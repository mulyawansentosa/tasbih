com.flazhost.tasbih.MainActivity -> com.flazhost.tasbih.MainActivity:
    void <init>() -> <init>
    void onCreate(android.os.Bundle) -> onCreate
io.flutter.app.FlutterActivity -> io.flutter.app.FlutterActivity:
    java.lang.String TAG -> TAG
    io.flutter.app.FlutterActivityDelegate delegate -> delegate
    io.flutter.app.FlutterActivityEvents eventDelegate -> eventDelegate
    io.flutter.view.FlutterView$Provider viewProvider -> viewProvider
    io.flutter.plugin.common.PluginRegistry pluginRegistry -> pluginRegistry
    void <init>() -> <init>
    io.flutter.view.FlutterView getFlutterView() -> getFlutterView
    io.flutter.view.FlutterView createFlutterView(android.content.Context) -> createFlutterView
    io.flutter.view.FlutterNativeView createFlutterNativeView() -> createFlutterNativeView
    boolean retainFlutterNativeView() -> retainFlutterNativeView
    boolean hasPlugin(java.lang.String) -> hasPlugin
    java.lang.Object valuePublishedByPlugin(java.lang.String) -> valuePublishedByPlugin
    io.flutter.plugin.common.PluginRegistry$Registrar registrarFor(java.lang.String) -> registrarFor
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void onResume() -> onResume
    void onDestroy() -> onDestroy
    void onBackPressed() -> onBackPressed
    void onStop() -> onStop
    void onPause() -> onPause
    void onPostResume() -> onPostResume
    void onRequestPermissionsResult(int,java.lang.String[],int[]) -> onRequestPermissionsResult
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onUserLeaveHint() -> onUserLeaveHint
    void onTrimMemory(int) -> onTrimMemory
    void onLowMemory() -> onLowMemory
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
io.flutter.app.FlutterActivityDelegate -> io.flutter.app.FlutterActivityDelegate:
    java.lang.String SPLASH_SCREEN_META_DATA_KEY -> SPLASH_SCREEN_META_DATA_KEY
    java.lang.String TAG -> TAG
    android.view.WindowManager$LayoutParams matchParent -> matchParent
    android.app.Activity activity -> activity
    io.flutter.app.FlutterActivityDelegate$ViewFactory viewFactory -> viewFactory
    io.flutter.view.FlutterView flutterView -> flutterView
    android.view.View launchView -> launchView
    void <init>(android.app.Activity,io.flutter.app.FlutterActivityDelegate$ViewFactory) -> <init>
    io.flutter.view.FlutterView getFlutterView() -> getFlutterView
    boolean hasPlugin(java.lang.String) -> hasPlugin
    java.lang.Object valuePublishedByPlugin(java.lang.String) -> valuePublishedByPlugin
    io.flutter.plugin.common.PluginRegistry$Registrar registrarFor(java.lang.String) -> registrarFor
    boolean onRequestPermissionsResult(int,java.lang.String[],int[]) -> onRequestPermissionsResult
    boolean onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onCreate(android.os.Bundle) -> onCreate
    void onNewIntent(android.content.Intent) -> onNewIntent
    boolean isDebuggable() -> isDebuggable
    void onPause() -> onPause
    void onStart() -> onStart
    void onResume() -> onResume
    void onStop() -> onStop
    void onPostResume() -> onPostResume
    void onDestroy() -> onDestroy
    boolean onBackPressed() -> onBackPressed
    void onUserLeaveHint() -> onUserLeaveHint
    void onTrimMemory(int) -> onTrimMemory
    void onLowMemory() -> onLowMemory
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    java.lang.String[] getArgsFromIntent(android.content.Intent) -> getArgsFromIntent
    boolean loadIntent(android.content.Intent) -> loadIntent
    void runBundle(java.lang.String) -> runBundle
    android.view.View createLaunchView() -> createLaunchView
    android.graphics.drawable.Drawable getLaunchScreenDrawableFromActivityTheme() -> getLaunchScreenDrawableFromActivityTheme
    java.lang.Boolean showSplashScreenUntilFirstFrame() -> showSplashScreenUntilFirstFrame
    void addLaunchView() -> addLaunchView
    android.view.View access$000(io.flutter.app.FlutterActivityDelegate) -> access$000
    android.view.View access$002(io.flutter.app.FlutterActivityDelegate,android.view.View) -> access$002
    io.flutter.view.FlutterView access$100(io.flutter.app.FlutterActivityDelegate) -> access$100
    void <clinit>() -> <clinit>
io.flutter.app.FlutterActivityDelegate$1 -> io.flutter.app.FlutterActivityDelegate$1:
    io.flutter.app.FlutterActivityDelegate this$0 -> this$0
    void <init>(io.flutter.app.FlutterActivityDelegate) -> <init>
    void onFirstFrame() -> onFirstFrame
io.flutter.app.FlutterActivityDelegate$1$1 -> io.flutter.app.FlutterActivityDelegate$1$1:
    io.flutter.app.FlutterActivityDelegate$1 this$1 -> this$1
    void <init>(io.flutter.app.FlutterActivityDelegate$1) -> <init>
    void onAnimationEnd(android.animation.Animator) -> onAnimationEnd
io.flutter.app.FlutterActivityDelegate$ViewFactory -> io.flutter.app.FlutterActivityDelegate$ViewFactory:
    io.flutter.view.FlutterView createFlutterView(android.content.Context) -> createFlutterView
    io.flutter.view.FlutterNativeView createFlutterNativeView() -> createFlutterNativeView
    boolean retainFlutterNativeView() -> retainFlutterNativeView
io.flutter.app.FlutterActivityEvents -> io.flutter.app.FlutterActivityEvents:
    void onCreate(android.os.Bundle) -> onCreate
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onPause() -> onPause
    void onStart() -> onStart
    void onResume() -> onResume
    void onPostResume() -> onPostResume
    void onDestroy() -> onDestroy
    void onStop() -> onStop
    boolean onBackPressed() -> onBackPressed
    void onUserLeaveHint() -> onUserLeaveHint
io.flutter.app.FlutterApplication -> io.flutter.app.FlutterApplication:
    android.app.Activity mCurrentActivity -> mCurrentActivity
    void <init>() -> <init>
    void onCreate() -> onCreate
    android.app.Activity getCurrentActivity() -> getCurrentActivity
    void setCurrentActivity(android.app.Activity) -> setCurrentActivity
io.flutter.app.FlutterFragmentActivity -> io.flutter.app.FlutterFragmentActivity:
    io.flutter.app.FlutterActivityDelegate delegate -> delegate
    io.flutter.app.FlutterActivityEvents eventDelegate -> eventDelegate
    io.flutter.view.FlutterView$Provider viewProvider -> viewProvider
    io.flutter.plugin.common.PluginRegistry pluginRegistry -> pluginRegistry
    void <init>() -> <init>
    io.flutter.view.FlutterView getFlutterView() -> getFlutterView
    io.flutter.view.FlutterView createFlutterView(android.content.Context) -> createFlutterView
    io.flutter.view.FlutterNativeView createFlutterNativeView() -> createFlutterNativeView
    boolean retainFlutterNativeView() -> retainFlutterNativeView
    boolean hasPlugin(java.lang.String) -> hasPlugin
    java.lang.Object valuePublishedByPlugin(java.lang.String) -> valuePublishedByPlugin
    io.flutter.plugin.common.PluginRegistry$Registrar registrarFor(java.lang.String) -> registrarFor
    void onCreate(android.os.Bundle) -> onCreate
    void onDestroy() -> onDestroy
    void onBackPressed() -> onBackPressed
    void onStart() -> onStart
    void onStop() -> onStop
    void onPause() -> onPause
    void onPostResume() -> onPostResume
    void onRequestPermissionsResult(int,java.lang.String[],int[]) -> onRequestPermissionsResult
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onUserLeaveHint() -> onUserLeaveHint
    void onTrimMemory(int) -> onTrimMemory
    void onLowMemory() -> onLowMemory
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
io.flutter.app.FlutterPluginRegistry -> io.flutter.app.FlutterPluginRegistry:
    java.lang.String TAG -> TAG
    android.app.Activity mActivity -> mActivity
    android.content.Context mAppContext -> mAppContext
    io.flutter.view.FlutterNativeView mNativeView -> mNativeView
    io.flutter.view.FlutterView mFlutterView -> mFlutterView
    io.flutter.plugin.platform.PlatformViewsController mPlatformViewsController -> mPlatformViewsController
    java.util.Map mPluginMap -> mPluginMap
    java.util.List mRequestPermissionsResultListeners -> mRequestPermissionsResultListeners
    java.util.List mActivityResultListeners -> mActivityResultListeners
    java.util.List mNewIntentListeners -> mNewIntentListeners
    java.util.List mUserLeaveHintListeners -> mUserLeaveHintListeners
    java.util.List mViewDestroyListeners -> mViewDestroyListeners
    void <init>(io.flutter.view.FlutterNativeView,android.content.Context) -> <init>
    void <init>(io.flutter.embedding.engine.FlutterEngine,android.content.Context) -> <init>
    boolean hasPlugin(java.lang.String) -> hasPlugin
    java.lang.Object valuePublishedByPlugin(java.lang.String) -> valuePublishedByPlugin
    io.flutter.plugin.common.PluginRegistry$Registrar registrarFor(java.lang.String) -> registrarFor
    void attach(io.flutter.view.FlutterView,android.app.Activity) -> attach
    void detach() -> detach
    void onPreEngineRestart() -> onPreEngineRestart
    io.flutter.plugin.platform.PlatformViewsController getPlatformViewsController() -> getPlatformViewsController
    boolean onRequestPermissionsResult(int,java.lang.String[],int[]) -> onRequestPermissionsResult
    boolean onActivityResult(int,int,android.content.Intent) -> onActivityResult
    boolean onNewIntent(android.content.Intent) -> onNewIntent
    void onUserLeaveHint() -> onUserLeaveHint
    boolean onViewDestroy(io.flutter.view.FlutterNativeView) -> onViewDestroy
    void destroy() -> destroy
    android.app.Activity access$000(io.flutter.app.FlutterPluginRegistry) -> access$000
    android.content.Context access$100(io.flutter.app.FlutterPluginRegistry) -> access$100
    io.flutter.view.FlutterNativeView access$200(io.flutter.app.FlutterPluginRegistry) -> access$200
    io.flutter.view.FlutterView access$300(io.flutter.app.FlutterPluginRegistry) -> access$300
    io.flutter.plugin.platform.PlatformViewsController access$400(io.flutter.app.FlutterPluginRegistry) -> access$400
    java.util.Map access$500(io.flutter.app.FlutterPluginRegistry) -> access$500
    java.util.List access$600(io.flutter.app.FlutterPluginRegistry) -> access$600
    java.util.List access$700(io.flutter.app.FlutterPluginRegistry) -> access$700
    java.util.List access$800(io.flutter.app.FlutterPluginRegistry) -> access$800
    java.util.List access$900(io.flutter.app.FlutterPluginRegistry) -> access$900
    java.util.List access$1000(io.flutter.app.FlutterPluginRegistry) -> access$1000
io.flutter.app.FlutterPluginRegistry$FlutterRegistrar -> io.flutter.app.FlutterPluginRegistry$FlutterRegistrar:
    java.lang.String pluginKey -> pluginKey
    io.flutter.app.FlutterPluginRegistry this$0 -> this$0
    void <init>(io.flutter.app.FlutterPluginRegistry,java.lang.String) -> <init>
    android.app.Activity activity() -> activity
    android.content.Context context() -> context
    android.content.Context activeContext() -> activeContext
    io.flutter.plugin.common.BinaryMessenger messenger() -> messenger
    io.flutter.view.TextureRegistry textures() -> textures
    io.flutter.plugin.platform.PlatformViewRegistry platformViewRegistry() -> platformViewRegistry
    io.flutter.view.FlutterView view() -> view
    java.lang.String lookupKeyForAsset(java.lang.String) -> lookupKeyForAsset
    java.lang.String lookupKeyForAsset(java.lang.String,java.lang.String) -> lookupKeyForAsset
    io.flutter.plugin.common.PluginRegistry$Registrar publish(java.lang.Object) -> publish
    io.flutter.plugin.common.PluginRegistry$Registrar addRequestPermissionsResultListener(io.flutter.plugin.common.PluginRegistry$RequestPermissionsResultListener) -> addRequestPermissionsResultListener
    io.flutter.plugin.common.PluginRegistry$Registrar addActivityResultListener(io.flutter.plugin.common.PluginRegistry$ActivityResultListener) -> addActivityResultListener
    io.flutter.plugin.common.PluginRegistry$Registrar addNewIntentListener(io.flutter.plugin.common.PluginRegistry$NewIntentListener) -> addNewIntentListener
    io.flutter.plugin.common.PluginRegistry$Registrar addUserLeaveHintListener(io.flutter.plugin.common.PluginRegistry$UserLeaveHintListener) -> addUserLeaveHintListener
    io.flutter.plugin.common.PluginRegistry$Registrar addViewDestroyListener(io.flutter.plugin.common.PluginRegistry$ViewDestroyListener) -> addViewDestroyListener
io.flutter.embedding.android.AndroidKeyProcessor -> io.flutter.embedding.android.AndroidKeyProcessor:
    io.flutter.embedding.engine.systemchannels.KeyEventChannel keyEventChannel -> keyEventChannel
    io.flutter.plugin.editing.TextInputPlugin textInputPlugin -> textInputPlugin
    int combiningCharacter -> combiningCharacter
    void <init>(io.flutter.embedding.engine.systemchannels.KeyEventChannel,io.flutter.plugin.editing.TextInputPlugin) -> <init>
    void onKeyUp(android.view.KeyEvent) -> onKeyUp
    void onKeyDown(android.view.KeyEvent) -> onKeyDown
    java.lang.Character applyCombiningCharacterToBaseCharacter(int) -> applyCombiningCharacterToBaseCharacter
io.flutter.embedding.android.AndroidTouchProcessor -> io.flutter.embedding.android.AndroidTouchProcessor:
    int POINTER_DATA_FIELD_COUNT -> POINTER_DATA_FIELD_COUNT
    int BYTES_PER_FIELD -> BYTES_PER_FIELD
    int POINTER_DATA_FLAG_BATCHED -> POINTER_DATA_FLAG_BATCHED
    io.flutter.embedding.engine.renderer.FlutterRenderer renderer -> renderer
    void <init>(io.flutter.embedding.engine.renderer.FlutterRenderer) -> <init>
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean onGenericMotionEvent(android.view.MotionEvent) -> onGenericMotionEvent
    void addPointerForIndex(android.view.MotionEvent,int,int,int,java.nio.ByteBuffer) -> addPointerForIndex
    int getPointerChangeForAction(int) -> getPointerChangeForAction
    int getPointerDeviceTypeForToolType(int) -> getPointerDeviceTypeForToolType
io.flutter.embedding.android.AndroidTouchProcessor$PointerChange -> io.flutter.embedding.android.AndroidTouchProcessor$PointerChange:
    int CANCEL -> CANCEL
    int ADD -> ADD
    int REMOVE -> REMOVE
    int HOVER -> HOVER
    int DOWN -> DOWN
    int MOVE -> MOVE
    int UP -> UP
io.flutter.embedding.android.AndroidTouchProcessor$PointerDeviceKind -> io.flutter.embedding.android.AndroidTouchProcessor$PointerDeviceKind:
    int TOUCH -> TOUCH
    int MOUSE -> MOUSE
    int STYLUS -> STYLUS
    int INVERTED_STYLUS -> INVERTED_STYLUS
    int UNKNOWN -> UNKNOWN
io.flutter.embedding.android.AndroidTouchProcessor$PointerSignalKind -> io.flutter.embedding.android.AndroidTouchProcessor$PointerSignalKind:
    int NONE -> NONE
    int SCROLL -> SCROLL
    int UNKNOWN -> UNKNOWN
io.flutter.embedding.android.FlutterActivity -> io.flutter.embedding.android.FlutterActivity:
    java.lang.String TAG -> TAG
    java.lang.String DART_ENTRYPOINT_META_DATA_KEY -> DART_ENTRYPOINT_META_DATA_KEY
    java.lang.String INITIAL_ROUTE_META_DATA_KEY -> INITIAL_ROUTE_META_DATA_KEY
    java.lang.String EXTRA_DART_ENTRYPOINT -> EXTRA_DART_ENTRYPOINT
    java.lang.String EXTRA_INITIAL_ROUTE -> EXTRA_INITIAL_ROUTE
    java.lang.String DEFAULT_DART_ENTRYPOINT -> DEFAULT_DART_ENTRYPOINT
    java.lang.String DEFAULT_INITIAL_ROUTE -> DEFAULT_INITIAL_ROUTE
    java.lang.String TAG_FLUTTER_FRAGMENT -> TAG_FLUTTER_FRAGMENT
    int FRAGMENT_CONTAINER_ID -> FRAGMENT_CONTAINER_ID
    io.flutter.embedding.android.FlutterFragment flutterFragment -> flutterFragment
    android.view.View coverView -> coverView
    void <init>() -> <init>
    android.content.Intent createDefaultIntent(android.content.Context) -> createDefaultIntent
    io.flutter.embedding.android.FlutterActivity$IntentBuilder createBuilder() -> createBuilder
    void onCreate(android.os.Bundle) -> onCreate
    void showCoverView() -> showCoverView
    android.graphics.drawable.Drawable createCoverViewBackground() -> createCoverViewBackground
    void hideCoverView() -> hideCoverView
    void configureStatusBarForFullscreenFlutterExperience() -> configureStatusBarForFullscreenFlutterExperience
    android.view.View createFragmentContainer() -> createFragmentContainer
    void ensureFlutterFragmentCreated() -> ensureFlutterFragmentCreated
    io.flutter.embedding.android.FlutterFragment createFlutterFragment() -> createFlutterFragment
    void onPostResume() -> onPostResume
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onBackPressed() -> onBackPressed
    void onRequestPermissionsResult(int,java.lang.String[],int[]) -> onRequestPermissionsResult
    void onUserLeaveHint() -> onUserLeaveHint
    void onTrimMemory(int) -> onTrimMemory
    io.flutter.embedding.engine.FlutterEngine getFlutterEngine() -> getFlutterEngine
    java.lang.String getAppBundlePath() -> getAppBundlePath
    java.lang.String getDartEntrypoint() -> getDartEntrypoint
    java.lang.String getInitialRoute() -> getInitialRoute
    boolean isDebuggable() -> isDebuggable
    void onFirstFrameRendered() -> onFirstFrameRendered
io.flutter.embedding.android.FlutterActivity$IntentBuilder -> io.flutter.embedding.android.FlutterActivity$IntentBuilder:
    java.lang.Class activityClass -> activityClass
    java.lang.String dartEntrypoint -> dartEntrypoint
    java.lang.String initialRoute -> initialRoute
    void <init>(java.lang.Class) -> <init>
    io.flutter.embedding.android.FlutterActivity$IntentBuilder dartEntrypoint(java.lang.String) -> dartEntrypoint
    io.flutter.embedding.android.FlutterActivity$IntentBuilder initialRoute(java.lang.String) -> initialRoute
    android.content.Intent build(android.content.Context) -> build
io.flutter.embedding.android.FlutterFragment -> io.flutter.embedding.android.FlutterFragment:
    java.lang.String TAG -> TAG
    java.lang.String ARG_DART_ENTRYPOINT -> ARG_DART_ENTRYPOINT
    java.lang.String ARG_INITIAL_ROUTE -> ARG_INITIAL_ROUTE
    java.lang.String ARG_APP_BUNDLE_PATH -> ARG_APP_BUNDLE_PATH
    java.lang.String ARG_FLUTTER_INITIALIZATION_ARGS -> ARG_FLUTTER_INITIALIZATION_ARGS
    java.lang.String ARG_FLUTTERVIEW_RENDER_MODE -> ARG_FLUTTERVIEW_RENDER_MODE
    java.lang.String ARG_FLUTTERVIEW_TRANSPARENCY_MODE -> ARG_FLUTTERVIEW_TRANSPARENCY_MODE
    io.flutter.embedding.engine.FlutterEngine flutterEngine -> flutterEngine
    boolean isFlutterEngineFromActivity -> isFlutterEngineFromActivity
    io.flutter.embedding.android.FlutterView flutterView -> flutterView
    io.flutter.plugin.platform.PlatformPlugin platformPlugin -> platformPlugin
    io.flutter.embedding.engine.renderer.OnFirstFrameRenderedListener onFirstFrameRenderedListener -> onFirstFrameRenderedListener
    void <init>() -> <init>
    io.flutter.embedding.engine.FlutterEngine getFlutterEngine() -> getFlutterEngine
    void onAttach(android.content.Context) -> onAttach
    void initializeFlutter(android.content.Context) -> initializeFlutter
    void setupFlutterEngine() -> setupFlutterEngine
    io.flutter.embedding.engine.FlutterEngine createFlutterEngine(android.content.Context) -> createFlutterEngine
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> onCreateView
    void doInitialFlutterViewRun() -> doInitialFlutterViewRun
    java.lang.String getInitialRoute() -> getInitialRoute
    java.lang.String getAppBundlePath() -> getAppBundlePath
    java.lang.String getDartEntrypointFunctionName() -> getDartEntrypointFunctionName
    io.flutter.embedding.android.FlutterView$RenderMode getRenderMode() -> getRenderMode
    io.flutter.embedding.android.FlutterView$TransparencyMode getTransparencyMode() -> getTransparencyMode
    void onResume() -> onResume
    void onPostResume() -> onPostResume
    void onPause() -> onPause
    void onStop() -> onStop
    void onDestroyView() -> onDestroyView
    void onDetach() -> onDetach
    boolean retainFlutterEngineAfterFragmentDestruction() -> retainFlutterEngineAfterFragmentDestruction
    void onBackPressed() -> onBackPressed
    void onRequestPermissionsResult(int,java.lang.String[],int[]) -> onRequestPermissionsResult
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onUserLeaveHint() -> onUserLeaveHint
    void onTrimMemory(int) -> onTrimMemory
    void onLowMemory() -> onLowMemory
    android.content.Context getContextCompat() -> getContextCompat
    void onFirstFrameRendered() -> onFirstFrameRendered
    io.flutter.embedding.engine.FlutterEngine access$000(io.flutter.embedding.android.FlutterFragment) -> access$000
    io.flutter.embedding.android.FlutterView access$100(io.flutter.embedding.android.FlutterFragment) -> access$100
    void access$200(io.flutter.embedding.android.FlutterFragment) -> access$200
io.flutter.embedding.android.FlutterFragment$1 -> io.flutter.embedding.android.FlutterFragment$1:
    io.flutter.embedding.android.FlutterFragment this$0 -> this$0
    void <init>(io.flutter.embedding.android.FlutterFragment) -> <init>
    void onFirstFrameRendered() -> onFirstFrameRendered
io.flutter.embedding.android.FlutterFragment$2 -> io.flutter.embedding.android.FlutterFragment$2:
    io.flutter.embedding.android.FlutterFragment this$0 -> this$0
    void <init>(io.flutter.embedding.android.FlutterFragment) -> <init>
    void run() -> run
io.flutter.embedding.android.FlutterFragment$Builder -> io.flutter.embedding.android.FlutterFragment$Builder:
    java.lang.Class fragmentClass -> fragmentClass
    java.lang.String dartEntrypoint -> dartEntrypoint
    java.lang.String initialRoute -> initialRoute
    java.lang.String appBundlePath -> appBundlePath
    io.flutter.embedding.engine.FlutterShellArgs shellArgs -> shellArgs
    io.flutter.embedding.android.FlutterView$RenderMode renderMode -> renderMode
    io.flutter.embedding.android.FlutterView$TransparencyMode transparencyMode -> transparencyMode
    void <init>() -> <init>
    void <init>(java.lang.Class) -> <init>
    io.flutter.embedding.android.FlutterFragment$Builder dartEntrypoint(java.lang.String) -> dartEntrypoint
    io.flutter.embedding.android.FlutterFragment$Builder initialRoute(java.lang.String) -> initialRoute
    io.flutter.embedding.android.FlutterFragment$Builder appBundlePath(java.lang.String) -> appBundlePath
    io.flutter.embedding.android.FlutterFragment$Builder flutterShellArgs(io.flutter.embedding.engine.FlutterShellArgs) -> flutterShellArgs
    io.flutter.embedding.android.FlutterFragment$Builder renderMode(io.flutter.embedding.android.FlutterView$RenderMode) -> renderMode
    io.flutter.embedding.android.FlutterFragment$Builder transparencyMode(io.flutter.embedding.android.FlutterView$TransparencyMode) -> transparencyMode
    android.os.Bundle createArgs() -> createArgs
    io.flutter.embedding.android.FlutterFragment build() -> build
io.flutter.embedding.android.FlutterFragment$FlutterEngineProvider -> io.flutter.embedding.android.FlutterFragment$FlutterEngineProvider:
    io.flutter.embedding.engine.FlutterEngine getFlutterEngine(android.content.Context) -> getFlutterEngine
io.flutter.embedding.android.FlutterSurfaceView -> io.flutter.embedding.android.FlutterSurfaceView:
    java.lang.String TAG -> TAG
    boolean renderTransparently -> renderTransparently
    boolean isSurfaceAvailableForRendering -> isSurfaceAvailableForRendering
    boolean isAttachedToFlutterRenderer -> isAttachedToFlutterRenderer
    io.flutter.embedding.engine.renderer.FlutterRenderer flutterRenderer -> flutterRenderer
    java.util.Set onFirstFrameRenderedListeners -> onFirstFrameRenderedListeners
    android.view.SurfaceHolder$Callback surfaceCallback -> surfaceCallback
    void <init>(android.content.Context) -> <init>
    void <init>(android.content.Context,boolean) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet,boolean) -> <init>
    void init() -> init
    void attachToRenderer(io.flutter.embedding.engine.renderer.FlutterRenderer) -> attachToRenderer
    void detachFromRenderer() -> detachFromRenderer
    void connectSurfaceToRenderer() -> connectSurfaceToRenderer
    void changeSurfaceSize(int,int) -> changeSurfaceSize
    void disconnectSurfaceFromRenderer() -> disconnectSurfaceFromRenderer
    void addOnFirstFrameRenderedListener(io.flutter.embedding.engine.renderer.OnFirstFrameRenderedListener) -> addOnFirstFrameRenderedListener
    void removeOnFirstFrameRenderedListener(io.flutter.embedding.engine.renderer.OnFirstFrameRenderedListener) -> removeOnFirstFrameRenderedListener
    void onFirstFrameRendered() -> onFirstFrameRendered
    boolean access$002(io.flutter.embedding.android.FlutterSurfaceView,boolean) -> access$002
    boolean access$100(io.flutter.embedding.android.FlutterSurfaceView) -> access$100
    void access$200(io.flutter.embedding.android.FlutterSurfaceView) -> access$200
    void access$300(io.flutter.embedding.android.FlutterSurfaceView,int,int) -> access$300
    void access$400(io.flutter.embedding.android.FlutterSurfaceView) -> access$400
io.flutter.embedding.android.FlutterSurfaceView$1 -> io.flutter.embedding.android.FlutterSurfaceView$1:
    io.flutter.embedding.android.FlutterSurfaceView this$0 -> this$0
    void <init>(io.flutter.embedding.android.FlutterSurfaceView) -> <init>
    void surfaceCreated(android.view.SurfaceHolder) -> surfaceCreated
    void surfaceChanged(android.view.SurfaceHolder,int,int,int) -> surfaceChanged
    void surfaceDestroyed(android.view.SurfaceHolder) -> surfaceDestroyed
io.flutter.embedding.android.FlutterTextureView -> io.flutter.embedding.android.FlutterTextureView:
    java.lang.String TAG -> TAG
    boolean isSurfaceAvailableForRendering -> isSurfaceAvailableForRendering
    boolean isAttachedToFlutterRenderer -> isAttachedToFlutterRenderer
    io.flutter.embedding.engine.renderer.FlutterRenderer flutterRenderer -> flutterRenderer
    java.util.Set onFirstFrameRenderedListeners -> onFirstFrameRenderedListeners
    android.view.TextureView$SurfaceTextureListener surfaceTextureListener -> surfaceTextureListener
    void <init>(android.content.Context) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void init() -> init
    void attachToRenderer(io.flutter.embedding.engine.renderer.FlutterRenderer) -> attachToRenderer
    void detachFromRenderer() -> detachFromRenderer
    void connectSurfaceToRenderer() -> connectSurfaceToRenderer
    void changeSurfaceSize(int,int) -> changeSurfaceSize
    void disconnectSurfaceFromRenderer() -> disconnectSurfaceFromRenderer
    void addOnFirstFrameRenderedListener(io.flutter.embedding.engine.renderer.OnFirstFrameRenderedListener) -> addOnFirstFrameRenderedListener
    void removeOnFirstFrameRenderedListener(io.flutter.embedding.engine.renderer.OnFirstFrameRenderedListener) -> removeOnFirstFrameRenderedListener
    void onFirstFrameRendered() -> onFirstFrameRendered
    boolean access$002(io.flutter.embedding.android.FlutterTextureView,boolean) -> access$002
    boolean access$100(io.flutter.embedding.android.FlutterTextureView) -> access$100
    void access$200(io.flutter.embedding.android.FlutterTextureView) -> access$200
    void access$300(io.flutter.embedding.android.FlutterTextureView,int,int) -> access$300
    void access$400(io.flutter.embedding.android.FlutterTextureView) -> access$400
io.flutter.embedding.android.FlutterTextureView$1 -> io.flutter.embedding.android.FlutterTextureView$1:
    io.flutter.embedding.android.FlutterTextureView this$0 -> this$0
    void <init>(io.flutter.embedding.android.FlutterTextureView) -> <init>
    void onSurfaceTextureAvailable(android.graphics.SurfaceTexture,int,int) -> onSurfaceTextureAvailable
    void onSurfaceTextureSizeChanged(android.graphics.SurfaceTexture,int,int) -> onSurfaceTextureSizeChanged
    void onSurfaceTextureUpdated(android.graphics.SurfaceTexture) -> onSurfaceTextureUpdated
    boolean onSurfaceTextureDestroyed(android.graphics.SurfaceTexture) -> onSurfaceTextureDestroyed
io.flutter.embedding.android.FlutterView -> io.flutter.embedding.android.FlutterView:
    java.lang.String TAG -> TAG
    io.flutter.embedding.android.FlutterView$RenderMode renderMode -> renderMode
    io.flutter.embedding.android.FlutterView$TransparencyMode transparencyMode -> transparencyMode
    io.flutter.embedding.engine.renderer.FlutterRenderer$RenderSurface renderSurface -> renderSurface
    io.flutter.embedding.engine.FlutterEngine flutterEngine -> flutterEngine
    io.flutter.plugin.editing.TextInputPlugin textInputPlugin -> textInputPlugin
    io.flutter.embedding.android.AndroidKeyProcessor androidKeyProcessor -> androidKeyProcessor
    io.flutter.embedding.android.AndroidTouchProcessor androidTouchProcessor -> androidTouchProcessor
    io.flutter.view.AccessibilityBridge accessibilityBridge -> accessibilityBridge
    io.flutter.embedding.engine.renderer.FlutterRenderer$ViewportMetrics viewportMetrics -> viewportMetrics
    io.flutter.view.AccessibilityBridge$OnAccessibilityChangeListener onAccessibilityChangeListener -> onAccessibilityChangeListener
    void <init>(android.content.Context) -> <init>
    void <init>(android.content.Context,io.flutter.embedding.android.FlutterView$RenderMode) -> <init>
    void <init>(android.content.Context,io.flutter.embedding.android.FlutterView$TransparencyMode) -> <init>
    void <init>(android.content.Context,io.flutter.embedding.android.FlutterView$RenderMode,io.flutter.embedding.android.FlutterView$TransparencyMode) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet,io.flutter.embedding.android.FlutterView$RenderMode,io.flutter.embedding.android.FlutterView$TransparencyMode) -> <init>
    void init() -> init
    void addOnFirstFrameRenderedListener(io.flutter.embedding.engine.renderer.OnFirstFrameRenderedListener) -> addOnFirstFrameRenderedListener
    void removeOnFirstFrameRenderedListener(io.flutter.embedding.engine.renderer.OnFirstFrameRenderedListener) -> removeOnFirstFrameRenderedListener
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    android.view.WindowInsets onApplyWindowInsets(android.view.WindowInsets) -> onApplyWindowInsets
    boolean fitSystemWindows(android.graphics.Rect) -> fitSystemWindows
    android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo) -> onCreateInputConnection
    boolean onKeyUp(int,android.view.KeyEvent) -> onKeyUp
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean onGenericMotionEvent(android.view.MotionEvent) -> onGenericMotionEvent
    boolean onHoverEvent(android.view.MotionEvent) -> onHoverEvent
    android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider() -> getAccessibilityNodeProvider
    void resetWillNotDraw(boolean,boolean) -> resetWillNotDraw
    void attachToFlutterEngine(io.flutter.embedding.engine.FlutterEngine) -> attachToFlutterEngine
    void detachFromFlutterEngine() -> detachFromFlutterEngine
    boolean isAttachedToFlutterEngine() -> isAttachedToFlutterEngine
    void sendLocalesToFlutter(android.content.res.Configuration) -> sendLocalesToFlutter
    void sendUserSettingsToFlutter() -> sendUserSettingsToFlutter
    void sendViewportMetricsToFlutter() -> sendViewportMetricsToFlutter
    void access$000(io.flutter.embedding.android.FlutterView,boolean,boolean) -> access$000
io.flutter.embedding.android.FlutterView$1 -> io.flutter.embedding.android.FlutterView$1:
    io.flutter.embedding.android.FlutterView this$0 -> this$0
    void <init>(io.flutter.embedding.android.FlutterView) -> <init>
    void onAccessibilityChanged(boolean,boolean) -> onAccessibilityChanged
io.flutter.embedding.android.FlutterView$2 -> io.flutter.embedding.android.FlutterView$2:
    int[] $SwitchMap$io$flutter$embedding$android$FlutterView$RenderMode -> $SwitchMap$io$flutter$embedding$android$FlutterView$RenderMode
    void <clinit>() -> <clinit>
io.flutter.embedding.android.FlutterView$RenderMode -> io.flutter.embedding.android.FlutterView$RenderMode:
    io.flutter.embedding.android.FlutterView$RenderMode surface -> surface
    io.flutter.embedding.android.FlutterView$RenderMode texture -> texture
    io.flutter.embedding.android.FlutterView$RenderMode[] $VALUES -> $VALUES
    io.flutter.embedding.android.FlutterView$RenderMode[] values() -> values
    io.flutter.embedding.android.FlutterView$RenderMode valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
io.flutter.embedding.android.FlutterView$TransparencyMode -> io.flutter.embedding.android.FlutterView$TransparencyMode:
    io.flutter.embedding.android.FlutterView$TransparencyMode opaque -> opaque
    io.flutter.embedding.android.FlutterView$TransparencyMode transparent -> transparent
    io.flutter.embedding.android.FlutterView$TransparencyMode[] $VALUES -> $VALUES
    io.flutter.embedding.android.FlutterView$TransparencyMode[] values() -> values
    io.flutter.embedding.android.FlutterView$TransparencyMode valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
io.flutter.embedding.engine.FlutterEngine -> io.flutter.embedding.engine.FlutterEngine:
    java.lang.String TAG -> TAG
    io.flutter.embedding.engine.FlutterJNI flutterJNI -> flutterJNI
    io.flutter.embedding.engine.renderer.FlutterRenderer renderer -> renderer
    io.flutter.embedding.engine.dart.DartExecutor dartExecutor -> dartExecutor
    io.flutter.app.FlutterPluginRegistry pluginRegistry -> pluginRegistry
    io.flutter.embedding.engine.systemchannels.AccessibilityChannel accessibilityChannel -> accessibilityChannel
    io.flutter.embedding.engine.systemchannels.KeyEventChannel keyEventChannel -> keyEventChannel
    io.flutter.embedding.engine.systemchannels.LifecycleChannel lifecycleChannel -> lifecycleChannel
    io.flutter.embedding.engine.systemchannels.LocalizationChannel localizationChannel -> localizationChannel
    io.flutter.embedding.engine.systemchannels.NavigationChannel navigationChannel -> navigationChannel
    io.flutter.embedding.engine.systemchannels.PlatformChannel platformChannel -> platformChannel
    io.flutter.embedding.engine.systemchannels.SettingsChannel settingsChannel -> settingsChannel
    io.flutter.embedding.engine.systemchannels.SystemChannel systemChannel -> systemChannel
    io.flutter.embedding.engine.systemchannels.TextInputChannel textInputChannel -> textInputChannel
    io.flutter.embedding.engine.FlutterEngine$EngineLifecycleListener engineLifecycleListener -> engineLifecycleListener
    void <init>(android.content.Context) -> <init>
    void attachToJni() -> attachToJni
    boolean isAttachedToJni() -> isAttachedToJni
    void detachFromJni() -> detachFromJni
    void destroy() -> destroy
    io.flutter.embedding.engine.dart.DartExecutor getDartExecutor() -> getDartExecutor
    io.flutter.embedding.engine.renderer.FlutterRenderer getRenderer() -> getRenderer
    io.flutter.embedding.engine.systemchannels.AccessibilityChannel getAccessibilityChannel() -> getAccessibilityChannel
    io.flutter.embedding.engine.systemchannels.KeyEventChannel getKeyEventChannel() -> getKeyEventChannel
    io.flutter.embedding.engine.systemchannels.LifecycleChannel getLifecycleChannel() -> getLifecycleChannel
    io.flutter.embedding.engine.systemchannels.LocalizationChannel getLocalizationChannel() -> getLocalizationChannel
    io.flutter.embedding.engine.systemchannels.NavigationChannel getNavigationChannel() -> getNavigationChannel
    io.flutter.embedding.engine.systemchannels.PlatformChannel getPlatformChannel() -> getPlatformChannel
    io.flutter.embedding.engine.systemchannels.SettingsChannel getSettingsChannel() -> getSettingsChannel
    io.flutter.embedding.engine.systemchannels.SystemChannel getSystemChannel() -> getSystemChannel
    io.flutter.embedding.engine.systemchannels.TextInputChannel getTextInputChannel() -> getTextInputChannel
    io.flutter.app.FlutterPluginRegistry getPluginRegistry() -> getPluginRegistry
    io.flutter.app.FlutterPluginRegistry access$000(io.flutter.embedding.engine.FlutterEngine) -> access$000
io.flutter.embedding.engine.FlutterEngine$1 -> io.flutter.embedding.engine.FlutterEngine$1:
    io.flutter.embedding.engine.FlutterEngine this$0 -> this$0
    void <init>(io.flutter.embedding.engine.FlutterEngine) -> <init>
    void onPreEngineRestart() -> onPreEngineRestart
io.flutter.embedding.engine.FlutterEngine$EngineLifecycleListener -> io.flutter.embedding.engine.FlutterEngine$EngineLifecycleListener:
    void onPreEngineRestart() -> onPreEngineRestart
io.flutter.embedding.engine.FlutterJNI -> io.flutter.embedding.engine.FlutterJNI:
    java.lang.String TAG -> TAG
    java.lang.Long nativePlatformViewId -> nativePlatformViewId
    io.flutter.embedding.engine.renderer.FlutterRenderer$RenderSurface renderSurface -> renderSurface
    io.flutter.embedding.engine.FlutterJNI$AccessibilityDelegate accessibilityDelegate -> accessibilityDelegate
    io.flutter.embedding.engine.dart.PlatformMessageHandler platformMessageHandler -> platformMessageHandler
    java.util.Set engineLifecycleListeners -> engineLifecycleListeners
    java.util.Set firstFrameListeners -> firstFrameListeners
    void <init>() -> <init>
    boolean nativeGetIsSoftwareRenderingEnabled() -> nativeGetIsSoftwareRenderingEnabled
    java.lang.String nativeGetObservatoryUri() -> nativeGetObservatoryUri
    void setRenderSurface(io.flutter.embedding.engine.renderer.FlutterRenderer$RenderSurface) -> setRenderSurface
    void setAccessibilityDelegate(io.flutter.embedding.engine.FlutterJNI$AccessibilityDelegate) -> setAccessibilityDelegate
    void updateSemantics(java.nio.ByteBuffer,java.lang.String[]) -> updateSemantics
    void updateCustomAccessibilityActions(java.nio.ByteBuffer,java.lang.String[]) -> updateCustomAccessibilityActions
    void onFirstFrame() -> onFirstFrame
    void setPlatformMessageHandler(io.flutter.embedding.engine.dart.PlatformMessageHandler) -> setPlatformMessageHandler
    void handlePlatformMessage(java.lang.String,byte[],int) -> handlePlatformMessage
    void handlePlatformMessageResponse(int,byte[]) -> handlePlatformMessageResponse
    void addEngineLifecycleListener(io.flutter.embedding.engine.FlutterEngine$EngineLifecycleListener) -> addEngineLifecycleListener
    void removeEngineLifecycleListener(io.flutter.embedding.engine.FlutterEngine$EngineLifecycleListener) -> removeEngineLifecycleListener
    void addOnFirstFrameRenderedListener(io.flutter.embedding.engine.renderer.OnFirstFrameRenderedListener) -> addOnFirstFrameRenderedListener
    void removeOnFirstFrameRenderedListener(io.flutter.embedding.engine.renderer.OnFirstFrameRenderedListener) -> removeOnFirstFrameRenderedListener
    void onSurfaceCreated(android.view.Surface) -> onSurfaceCreated
    void nativeSurfaceCreated(long,android.view.Surface) -> nativeSurfaceCreated
    void onSurfaceChanged(int,int) -> onSurfaceChanged
    void nativeSurfaceChanged(long,int,int) -> nativeSurfaceChanged
    void onSurfaceDestroyed() -> onSurfaceDestroyed
    void nativeSurfaceDestroyed(long) -> nativeSurfaceDestroyed
    void setViewportMetrics(float,int,int,int,int,int,int,int,int,int,int) -> setViewportMetrics
    void nativeSetViewportMetrics(long,float,int,int,int,int,int,int,int,int,int,int) -> nativeSetViewportMetrics
    android.graphics.Bitmap getBitmap() -> getBitmap
    android.graphics.Bitmap nativeGetBitmap(long) -> nativeGetBitmap
    void dispatchPointerDataPacket(java.nio.ByteBuffer,int) -> dispatchPointerDataPacket
    void nativeDispatchPointerDataPacket(long,java.nio.ByteBuffer,int) -> nativeDispatchPointerDataPacket
    void dispatchSemanticsAction(int,io.flutter.view.AccessibilityBridge$Action) -> dispatchSemanticsAction
    void dispatchSemanticsAction(int,io.flutter.view.AccessibilityBridge$Action,java.lang.Object) -> dispatchSemanticsAction
    void dispatchSemanticsAction(int,int,java.nio.ByteBuffer,int) -> dispatchSemanticsAction
    void nativeDispatchSemanticsAction(long,int,int,java.nio.ByteBuffer,int) -> nativeDispatchSemanticsAction
    void setSemanticsEnabled(boolean) -> setSemanticsEnabled
    void nativeSetSemanticsEnabled(long,boolean) -> nativeSetSemanticsEnabled
    void setAccessibilityFeatures(int) -> setAccessibilityFeatures
    void nativeSetAccessibilityFeatures(long,int) -> nativeSetAccessibilityFeatures
    void registerTexture(long,android.graphics.SurfaceTexture) -> registerTexture
    void nativeRegisterTexture(long,long,android.graphics.SurfaceTexture) -> nativeRegisterTexture
    void markTextureFrameAvailable(long) -> markTextureFrameAvailable
    void nativeMarkTextureFrameAvailable(long,long) -> nativeMarkTextureFrameAvailable
    void unregisterTexture(long) -> unregisterTexture
    void nativeUnregisterTexture(long,long) -> nativeUnregisterTexture
    boolean isAttached() -> isAttached
    void attachToNative(boolean) -> attachToNative
    long nativeAttach(io.flutter.embedding.engine.FlutterJNI,boolean) -> nativeAttach
    void detachFromNativeAndReleaseResources() -> detachFromNativeAndReleaseResources
    void nativeDestroy(long) -> nativeDestroy
    void runBundleAndSnapshotFromLibrary(java.lang.String[],java.lang.String,java.lang.String,android.content.res.AssetManager) -> runBundleAndSnapshotFromLibrary
    void nativeRunBundleAndSnapshotFromLibrary(long,java.lang.String[],java.lang.String,java.lang.String,android.content.res.AssetManager) -> nativeRunBundleAndSnapshotFromLibrary
    void dispatchEmptyPlatformMessage(java.lang.String,int) -> dispatchEmptyPlatformMessage
    void nativeDispatchEmptyPlatformMessage(long,java.lang.String,int) -> nativeDispatchEmptyPlatformMessage
    void dispatchPlatformMessage(java.lang.String,java.nio.ByteBuffer,int,int) -> dispatchPlatformMessage
    void nativeDispatchPlatformMessage(long,java.lang.String,java.nio.ByteBuffer,int,int) -> nativeDispatchPlatformMessage
    void invokePlatformMessageEmptyResponseCallback(int) -> invokePlatformMessageEmptyResponseCallback
    void nativeInvokePlatformMessageEmptyResponseCallback(long,int) -> nativeInvokePlatformMessageEmptyResponseCallback
    void invokePlatformMessageResponseCallback(int,java.nio.ByteBuffer,int) -> invokePlatformMessageResponseCallback
    void nativeInvokePlatformMessageResponseCallback(long,int,java.nio.ByteBuffer,int) -> nativeInvokePlatformMessageResponseCallback
    void onPreEngineRestart() -> onPreEngineRestart
    void ensureNotAttachedToNative() -> ensureNotAttachedToNative
    void ensureAttachedToNative() -> ensureAttachedToNative
io.flutter.embedding.engine.FlutterJNI$AccessibilityDelegate -> io.flutter.embedding.engine.FlutterJNI$AccessibilityDelegate:
    void updateCustomAccessibilityActions(java.nio.ByteBuffer,java.lang.String[]) -> updateCustomAccessibilityActions
    void updateSemantics(java.nio.ByteBuffer,java.lang.String[]) -> updateSemantics
io.flutter.embedding.engine.FlutterShellArgs -> io.flutter.embedding.engine.FlutterShellArgs:
    java.lang.String ARG_KEY_TRACE_STARTUP -> ARG_KEY_TRACE_STARTUP
    java.lang.String ARG_TRACE_STARTUP -> ARG_TRACE_STARTUP
    java.lang.String ARG_KEY_START_PAUSED -> ARG_KEY_START_PAUSED
    java.lang.String ARG_START_PAUSED -> ARG_START_PAUSED
    java.lang.String ARG_KEY_DISABLE_SERVICE_AUTH_CODES -> ARG_KEY_DISABLE_SERVICE_AUTH_CODES
    java.lang.String ARG_DISABLE_SERVICE_AUTH_CODES -> ARG_DISABLE_SERVICE_AUTH_CODES
    java.lang.String ARG_KEY_USE_TEST_FONTS -> ARG_KEY_USE_TEST_FONTS
    java.lang.String ARG_USE_TEST_FONTS -> ARG_USE_TEST_FONTS
    java.lang.String ARG_KEY_ENABLE_DART_PROFILING -> ARG_KEY_ENABLE_DART_PROFILING
    java.lang.String ARG_ENABLE_DART_PROFILING -> ARG_ENABLE_DART_PROFILING
    java.lang.String ARG_KEY_ENABLE_SOFTWARE_RENDERING -> ARG_KEY_ENABLE_SOFTWARE_RENDERING
    java.lang.String ARG_ENABLE_SOFTWARE_RENDERING -> ARG_ENABLE_SOFTWARE_RENDERING
    java.lang.String ARG_KEY_SKIA_DETERMINISTIC_RENDERING -> ARG_KEY_SKIA_DETERMINISTIC_RENDERING
    java.lang.String ARG_SKIA_DETERMINISTIC_RENDERING -> ARG_SKIA_DETERMINISTIC_RENDERING
    java.lang.String ARG_KEY_TRACE_SKIA -> ARG_KEY_TRACE_SKIA
    java.lang.String ARG_TRACE_SKIA -> ARG_TRACE_SKIA
    java.lang.String ARG_KEY_DUMP_SHADER_SKP_ON_SHADER_COMPILATION -> ARG_KEY_DUMP_SHADER_SKP_ON_SHADER_COMPILATION
    java.lang.String ARG_DUMP_SHADER_SKP_ON_SHADER_COMPILATION -> ARG_DUMP_SHADER_SKP_ON_SHADER_COMPILATION
    java.lang.String ARG_KEY_VERBOSE_LOGGING -> ARG_KEY_VERBOSE_LOGGING
    java.lang.String ARG_VERBOSE_LOGGING -> ARG_VERBOSE_LOGGING
    java.util.Set args -> args
    io.flutter.embedding.engine.FlutterShellArgs fromIntent(android.content.Intent) -> fromIntent
    void <init>(java.lang.String[]) -> <init>
    void <init>(java.util.List) -> <init>
    void <init>(java.util.Set) -> <init>
    void add(java.lang.String) -> add
    void remove(java.lang.String) -> remove
    java.lang.String[] toArray() -> toArray
io.flutter.embedding.engine.dart.DartExecutor -> io.flutter.embedding.engine.dart.DartExecutor:
    java.lang.String TAG -> TAG
    io.flutter.embedding.engine.FlutterJNI flutterJNI -> flutterJNI
    io.flutter.embedding.engine.dart.DartMessenger messenger -> messenger
    boolean isApplicationRunning -> isApplicationRunning
    void <init>(io.flutter.embedding.engine.FlutterJNI) -> <init>
    void onAttachedToJNI() -> onAttachedToJNI
    void onDetachedFromJNI() -> onDetachedFromJNI
    boolean isExecutingDart() -> isExecutingDart
    void executeDartEntrypoint(io.flutter.embedding.engine.dart.DartExecutor$DartEntrypoint) -> executeDartEntrypoint
    void executeDartCallback(io.flutter.embedding.engine.dart.DartExecutor$DartCallback) -> executeDartCallback
    void send(java.lang.String,java.nio.ByteBuffer) -> send
    void send(java.lang.String,java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply) -> send
    void setMessageHandler(java.lang.String,io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler) -> setMessageHandler
io.flutter.embedding.engine.dart.DartExecutor$DartCallback -> io.flutter.embedding.engine.dart.DartExecutor$DartCallback:
    android.content.res.AssetManager androidAssetManager -> androidAssetManager
    java.lang.String pathToPrimaryBundle -> pathToPrimaryBundle
    java.lang.String pathToFallbackBundle -> pathToFallbackBundle
    io.flutter.view.FlutterCallbackInformation callbackHandle -> callbackHandle
    void <init>(android.content.res.AssetManager,java.lang.String,io.flutter.view.FlutterCallbackInformation) -> <init>
    void <init>(android.content.res.AssetManager,java.lang.String,java.lang.String,io.flutter.view.FlutterCallbackInformation) -> <init>
io.flutter.embedding.engine.dart.DartExecutor$DartEntrypoint -> io.flutter.embedding.engine.dart.DartExecutor$DartEntrypoint:
    android.content.res.AssetManager androidAssetManager -> androidAssetManager
    java.lang.String pathToPrimaryBundle -> pathToPrimaryBundle
    java.lang.String pathToFallbackBundle -> pathToFallbackBundle
    java.lang.String dartEntrypointFunctionName -> dartEntrypointFunctionName
    void <init>(android.content.res.AssetManager,java.lang.String,java.lang.String) -> <init>
    void <init>(android.content.res.AssetManager,java.lang.String,java.lang.String,java.lang.String) -> <init>
io.flutter.embedding.engine.dart.DartMessenger -> io.flutter.embedding.engine.dart.DartMessenger:
    java.lang.String TAG -> TAG
    io.flutter.embedding.engine.FlutterJNI flutterJNI -> flutterJNI
    java.util.Map messageHandlers -> messageHandlers
    java.util.Map pendingReplies -> pendingReplies
    int nextReplyId -> nextReplyId
    void <init>(io.flutter.embedding.engine.FlutterJNI) -> <init>
    void setMessageHandler(java.lang.String,io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler) -> setMessageHandler
    void send(java.lang.String,java.nio.ByteBuffer) -> send
    void send(java.lang.String,java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply) -> send
    void handleMessageFromDart(java.lang.String,byte[],int) -> handleMessageFromDart
    void handlePlatformMessageResponse(int,byte[]) -> handlePlatformMessageResponse
io.flutter.embedding.engine.dart.DartMessenger$Reply -> io.flutter.embedding.engine.dart.DartMessenger$Reply:
    io.flutter.embedding.engine.FlutterJNI flutterJNI -> flutterJNI
    int replyId -> replyId
    java.util.concurrent.atomic.AtomicBoolean done -> done
    void <init>(io.flutter.embedding.engine.FlutterJNI,int) -> <init>
    void reply(java.nio.ByteBuffer) -> reply
io.flutter.embedding.engine.dart.PlatformMessageHandler -> io.flutter.embedding.engine.dart.PlatformMessageHandler:
    void handleMessageFromDart(java.lang.String,byte[],int) -> handleMessageFromDart
    void handlePlatformMessageResponse(int,byte[]) -> handlePlatformMessageResponse
io.flutter.embedding.engine.renderer.FlutterRenderer -> io.flutter.embedding.engine.renderer.FlutterRenderer:
    io.flutter.embedding.engine.FlutterJNI flutterJNI -> flutterJNI
    java.util.concurrent.atomic.AtomicLong nextTextureId -> nextTextureId
    io.flutter.embedding.engine.renderer.FlutterRenderer$RenderSurface renderSurface -> renderSurface
    void <init>(io.flutter.embedding.engine.FlutterJNI) -> <init>
    void attachToRenderSurface(io.flutter.embedding.engine.renderer.FlutterRenderer$RenderSurface) -> attachToRenderSurface
    void detachFromRenderSurface() -> detachFromRenderSurface
    void addOnFirstFrameRenderedListener(io.flutter.embedding.engine.renderer.OnFirstFrameRenderedListener) -> addOnFirstFrameRenderedListener
    void removeOnFirstFrameRenderedListener(io.flutter.embedding.engine.renderer.OnFirstFrameRenderedListener) -> removeOnFirstFrameRenderedListener
    io.flutter.view.TextureRegistry$SurfaceTextureEntry createSurfaceTexture() -> createSurfaceTexture
    void surfaceCreated(android.view.Surface) -> surfaceCreated
    void surfaceChanged(int,int) -> surfaceChanged
    void surfaceDestroyed() -> surfaceDestroyed
    void setViewportMetrics(io.flutter.embedding.engine.renderer.FlutterRenderer$ViewportMetrics) -> setViewportMetrics
    android.graphics.Bitmap getBitmap() -> getBitmap
    void dispatchPointerDataPacket(java.nio.ByteBuffer,int) -> dispatchPointerDataPacket
    void registerTexture(long,android.graphics.SurfaceTexture) -> registerTexture
    void markTextureFrameAvailable(long) -> markTextureFrameAvailable
    void unregisterTexture(long) -> unregisterTexture
    boolean isSoftwareRenderingEnabled() -> isSoftwareRenderingEnabled
    void setAccessibilityFeatures(int) -> setAccessibilityFeatures
    void setSemanticsEnabled(boolean) -> setSemanticsEnabled
    void dispatchSemanticsAction(int,int,java.nio.ByteBuffer,int) -> dispatchSemanticsAction
    void access$200(io.flutter.embedding.engine.renderer.FlutterRenderer,long) -> access$200
    void access$300(io.flutter.embedding.engine.renderer.FlutterRenderer,long) -> access$300
io.flutter.embedding.engine.renderer.FlutterRenderer$RenderSurface -> io.flutter.embedding.engine.renderer.FlutterRenderer$RenderSurface:
    void attachToRenderer(io.flutter.embedding.engine.renderer.FlutterRenderer) -> attachToRenderer
    void detachFromRenderer() -> detachFromRenderer
    void onFirstFrameRendered() -> onFirstFrameRendered
    void addOnFirstFrameRenderedListener(io.flutter.embedding.engine.renderer.OnFirstFrameRenderedListener) -> addOnFirstFrameRenderedListener
    void removeOnFirstFrameRenderedListener(io.flutter.embedding.engine.renderer.OnFirstFrameRenderedListener) -> removeOnFirstFrameRenderedListener
io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry -> io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry:
    long id -> id
    android.graphics.SurfaceTexture surfaceTexture -> surfaceTexture
    boolean released -> released
    android.graphics.SurfaceTexture$OnFrameAvailableListener onFrameListener -> onFrameListener
    io.flutter.embedding.engine.renderer.FlutterRenderer this$0 -> this$0
    void <init>(io.flutter.embedding.engine.renderer.FlutterRenderer,long,android.graphics.SurfaceTexture) -> <init>
    android.graphics.SurfaceTexture surfaceTexture() -> surfaceTexture
    long id() -> id
    void release() -> release
    boolean access$000(io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry) -> access$000
    long access$100(io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry) -> access$100
io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry$1 -> io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry$1:
    io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry this$1 -> this$1
    void <init>(io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry) -> <init>
    void onFrameAvailable(android.graphics.SurfaceTexture) -> onFrameAvailable
io.flutter.embedding.engine.renderer.FlutterRenderer$ViewportMetrics -> io.flutter.embedding.engine.renderer.FlutterRenderer$ViewportMetrics:
    float devicePixelRatio -> devicePixelRatio
    int width -> width
    int height -> height
    int paddingTop -> paddingTop
    int paddingRight -> paddingRight
    int paddingBottom -> paddingBottom
    int paddingLeft -> paddingLeft
    int viewInsetTop -> viewInsetTop
    int viewInsetRight -> viewInsetRight
    int viewInsetBottom -> viewInsetBottom
    int viewInsetLeft -> viewInsetLeft
    void <init>() -> <init>
io.flutter.embedding.engine.renderer.OnFirstFrameRenderedListener -> io.flutter.embedding.engine.renderer.OnFirstFrameRenderedListener:
    void onFirstFrameRendered() -> onFirstFrameRendered
io.flutter.embedding.engine.systemchannels.AccessibilityChannel -> io.flutter.embedding.engine.systemchannels.AccessibilityChannel:
    io.flutter.plugin.common.BasicMessageChannel channel -> channel
    io.flutter.embedding.engine.FlutterJNI flutterJNI -> flutterJNI
    io.flutter.embedding.engine.systemchannels.AccessibilityChannel$AccessibilityMessageHandler handler -> handler
    io.flutter.plugin.common.BasicMessageChannel$MessageHandler parsingMessageHandler -> parsingMessageHandler
    void <init>(io.flutter.embedding.engine.dart.DartExecutor,io.flutter.embedding.engine.FlutterJNI) -> <init>
    void onAndroidAccessibilityEnabled() -> onAndroidAccessibilityEnabled
    void onAndroidAccessibilityDisabled() -> onAndroidAccessibilityDisabled
    void setAccessibilityFeatures(int) -> setAccessibilityFeatures
    void dispatchSemanticsAction(int,io.flutter.view.AccessibilityBridge$Action) -> dispatchSemanticsAction
    void dispatchSemanticsAction(int,io.flutter.view.AccessibilityBridge$Action,java.lang.Object) -> dispatchSemanticsAction
    void setAccessibilityMessageHandler(io.flutter.embedding.engine.systemchannels.AccessibilityChannel$AccessibilityMessageHandler) -> setAccessibilityMessageHandler
    io.flutter.embedding.engine.systemchannels.AccessibilityChannel$AccessibilityMessageHandler access$000(io.flutter.embedding.engine.systemchannels.AccessibilityChannel) -> access$000
io.flutter.embedding.engine.systemchannels.AccessibilityChannel$1 -> io.flutter.embedding.engine.systemchannels.AccessibilityChannel$1:
    io.flutter.embedding.engine.systemchannels.AccessibilityChannel this$0 -> this$0
    void <init>(io.flutter.embedding.engine.systemchannels.AccessibilityChannel) -> <init>
    void onMessage(java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply) -> onMessage
io.flutter.embedding.engine.systemchannels.AccessibilityChannel$AccessibilityMessageHandler -> io.flutter.embedding.engine.systemchannels.AccessibilityChannel$AccessibilityMessageHandler:
    void announce(java.lang.String) -> announce
    void onTap(int) -> onTap
    void onLongPress(int) -> onLongPress
    void onTooltip(java.lang.String) -> onTooltip
io.flutter.embedding.engine.systemchannels.KeyEventChannel -> io.flutter.embedding.engine.systemchannels.KeyEventChannel:
    io.flutter.plugin.common.BasicMessageChannel channel -> channel
    void <init>(io.flutter.embedding.engine.dart.DartExecutor) -> <init>
    void keyUp(io.flutter.embedding.engine.systemchannels.KeyEventChannel$FlutterKeyEvent) -> keyUp
    void keyDown(io.flutter.embedding.engine.systemchannels.KeyEventChannel$FlutterKeyEvent) -> keyDown
    void encodeKeyEvent(io.flutter.embedding.engine.systemchannels.KeyEventChannel$FlutterKeyEvent,java.util.Map) -> encodeKeyEvent
io.flutter.embedding.engine.systemchannels.KeyEventChannel$FlutterKeyEvent -> io.flutter.embedding.engine.systemchannels.KeyEventChannel$FlutterKeyEvent:
    int flags -> flags
    int plainCodePoint -> plainCodePoint
    int codePoint -> codePoint
    int keyCode -> keyCode
    java.lang.Character complexCharacter -> complexCharacter
    int scanCode -> scanCode
    int metaState -> metaState
    void <init>(android.view.KeyEvent) -> <init>
    void <init>(android.view.KeyEvent,java.lang.Character) -> <init>
    void <init>(int,int,int,int,java.lang.Character,int,int) -> <init>
io.flutter.embedding.engine.systemchannels.LifecycleChannel -> io.flutter.embedding.engine.systemchannels.LifecycleChannel:
    io.flutter.plugin.common.BasicMessageChannel channel -> channel
    void <init>(io.flutter.embedding.engine.dart.DartExecutor) -> <init>
    void appIsInactive() -> appIsInactive
    void appIsResumed() -> appIsResumed
    void appIsPaused() -> appIsPaused
io.flutter.embedding.engine.systemchannels.LocalizationChannel -> io.flutter.embedding.engine.systemchannels.LocalizationChannel:
    io.flutter.plugin.common.MethodChannel channel -> channel
    void <init>(io.flutter.embedding.engine.dart.DartExecutor) -> <init>
    void sendLocales(java.util.List) -> sendLocales
io.flutter.embedding.engine.systemchannels.NavigationChannel -> io.flutter.embedding.engine.systemchannels.NavigationChannel:
    io.flutter.plugin.common.MethodChannel channel -> channel
    void <init>(io.flutter.embedding.engine.dart.DartExecutor) -> <init>
    void setInitialRoute(java.lang.String) -> setInitialRoute
    void pushRoute(java.lang.String) -> pushRoute
    void popRoute() -> popRoute
    void setMethodCallHandler(io.flutter.plugin.common.MethodChannel$MethodCallHandler) -> setMethodCallHandler
io.flutter.embedding.engine.systemchannels.PlatformChannel -> io.flutter.embedding.engine.systemchannels.PlatformChannel:
    io.flutter.plugin.common.MethodChannel channel -> channel
    io.flutter.embedding.engine.systemchannels.PlatformChannel$PlatformMessageHandler platformMessageHandler -> platformMessageHandler
    io.flutter.plugin.common.MethodChannel$MethodCallHandler parsingMethodCallHandler -> parsingMethodCallHandler
    void <init>(io.flutter.embedding.engine.dart.DartExecutor) -> <init>
    void setPlatformMessageHandler(io.flutter.embedding.engine.systemchannels.PlatformChannel$PlatformMessageHandler) -> setPlatformMessageHandler
    int decodeOrientations(org.json.JSONArray) -> decodeOrientations
    io.flutter.embedding.engine.systemchannels.PlatformChannel$AppSwitcherDescription decodeAppSwitcherDescription(org.json.JSONObject) -> decodeAppSwitcherDescription
    java.util.List decodeSystemUiOverlays(org.json.JSONArray) -> decodeSystemUiOverlays
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle decodeSystemChromeStyle(org.json.JSONObject) -> decodeSystemChromeStyle
    io.flutter.embedding.engine.systemchannels.PlatformChannel$PlatformMessageHandler access$000(io.flutter.embedding.engine.systemchannels.PlatformChannel) -> access$000
    int access$100(io.flutter.embedding.engine.systemchannels.PlatformChannel,org.json.JSONArray) -> access$100
    io.flutter.embedding.engine.systemchannels.PlatformChannel$AppSwitcherDescription access$200(io.flutter.embedding.engine.systemchannels.PlatformChannel,org.json.JSONObject) -> access$200
    java.util.List access$300(io.flutter.embedding.engine.systemchannels.PlatformChannel,org.json.JSONArray) -> access$300
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle access$400(io.flutter.embedding.engine.systemchannels.PlatformChannel,org.json.JSONObject) -> access$400
io.flutter.embedding.engine.systemchannels.PlatformChannel$1 -> io.flutter.embedding.engine.systemchannels.PlatformChannel$1:
    io.flutter.embedding.engine.systemchannels.PlatformChannel this$0 -> this$0
    void <init>(io.flutter.embedding.engine.systemchannels.PlatformChannel) -> <init>
    void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result) -> onMethodCall
io.flutter.embedding.engine.systemchannels.PlatformChannel$2 -> io.flutter.embedding.engine.systemchannels.PlatformChannel$2:
    int[] $SwitchMap$io$flutter$embedding$engine$systemchannels$PlatformChannel$DeviceOrientation -> $SwitchMap$io$flutter$embedding$engine$systemchannels$PlatformChannel$DeviceOrientation
    int[] $SwitchMap$io$flutter$embedding$engine$systemchannels$PlatformChannel$SystemUiOverlay -> $SwitchMap$io$flutter$embedding$engine$systemchannels$PlatformChannel$SystemUiOverlay
    void <clinit>() -> <clinit>
io.flutter.embedding.engine.systemchannels.PlatformChannel$AppSwitcherDescription -> io.flutter.embedding.engine.systemchannels.PlatformChannel$AppSwitcherDescription:
    int color -> color
    java.lang.String label -> label
    void <init>(int,java.lang.String) -> <init>
io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness -> io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness:
    io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness LIGHT -> LIGHT
    io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness DARK -> DARK
    java.lang.String encodedName -> encodedName
    io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness[] $VALUES -> $VALUES
    io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness[] values() -> values
    io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness valueOf(java.lang.String) -> valueOf
    io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness fromValue(java.lang.String) -> fromValue
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    void <clinit>() -> <clinit>
io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat -> io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat:
    io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat PLAIN_TEXT -> PLAIN_TEXT
    java.lang.String encodedName -> encodedName
    io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat[] $VALUES -> $VALUES
    io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat[] values() -> values
    io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat valueOf(java.lang.String) -> valueOf
    io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat fromValue(java.lang.String) -> fromValue
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    void <clinit>() -> <clinit>
io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation -> io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation:
    io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation PORTRAIT_UP -> PORTRAIT_UP
    io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation PORTRAIT_DOWN -> PORTRAIT_DOWN
    io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation LANDSCAPE_LEFT -> LANDSCAPE_LEFT
    io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation LANDSCAPE_RIGHT -> LANDSCAPE_RIGHT
    java.lang.String encodedName -> encodedName
    io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation[] $VALUES -> $VALUES
    io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation[] values() -> values
    io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation valueOf(java.lang.String) -> valueOf
    io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation fromValue(java.lang.String) -> fromValue
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    void <clinit>() -> <clinit>
io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType -> io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType:
    io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType STANDARD -> STANDARD
    io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType LIGHT_IMPACT -> LIGHT_IMPACT
    io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType MEDIUM_IMPACT -> MEDIUM_IMPACT
    io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType HEAVY_IMPACT -> HEAVY_IMPACT
    io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType SELECTION_CLICK -> SELECTION_CLICK
    java.lang.String encodedName -> encodedName
    io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType[] $VALUES -> $VALUES
    io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType[] values() -> values
    io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType valueOf(java.lang.String) -> valueOf
    io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType fromValue(java.lang.String) -> fromValue
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    void <clinit>() -> <clinit>
io.flutter.embedding.engine.systemchannels.PlatformChannel$PlatformMessageHandler -> io.flutter.embedding.engine.systemchannels.PlatformChannel$PlatformMessageHandler:
    void playSystemSound(io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType) -> playSystemSound
    void vibrateHapticFeedback(io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType) -> vibrateHapticFeedback
    void setPreferredOrientations(int) -> setPreferredOrientations
    void setApplicationSwitcherDescription(io.flutter.embedding.engine.systemchannels.PlatformChannel$AppSwitcherDescription) -> setApplicationSwitcherDescription
    void showSystemOverlays(java.util.List) -> showSystemOverlays
    void restoreSystemUiOverlays() -> restoreSystemUiOverlays
    void setSystemUiOverlayStyle(io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle) -> setSystemUiOverlayStyle
    void popSystemNavigator() -> popSystemNavigator
    java.lang.CharSequence getClipboardData(io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat) -> getClipboardData
    void setClipboardData(java.lang.String) -> setClipboardData
io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType -> io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType:
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType CLICK -> CLICK
    java.lang.String encodedName -> encodedName
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType[] $VALUES -> $VALUES
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType[] values() -> values
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType valueOf(java.lang.String) -> valueOf
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType fromValue(java.lang.String) -> fromValue
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    void <clinit>() -> <clinit>
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle -> io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle:
    java.lang.Integer statusBarColor -> statusBarColor
    io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness statusBarIconBrightness -> statusBarIconBrightness
    java.lang.Integer systemNavigationBarColor -> systemNavigationBarColor
    io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness systemNavigationBarIconBrightness -> systemNavigationBarIconBrightness
    java.lang.Integer systemNavigationBarDividerColor -> systemNavigationBarDividerColor
    void <init>(java.lang.Integer,io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness,java.lang.Integer,io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness,java.lang.Integer) -> <init>
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay -> io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay:
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay TOP_OVERLAYS -> TOP_OVERLAYS
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay BOTTOM_OVERLAYS -> BOTTOM_OVERLAYS
    java.lang.String encodedName -> encodedName
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay[] $VALUES -> $VALUES
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay[] values() -> values
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay valueOf(java.lang.String) -> valueOf
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay fromValue(java.lang.String) -> fromValue
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    void <clinit>() -> <clinit>
io.flutter.embedding.engine.systemchannels.SettingsChannel -> io.flutter.embedding.engine.systemchannels.SettingsChannel:
    java.lang.String CHANNEL_NAME -> CHANNEL_NAME
    io.flutter.plugin.common.BasicMessageChannel channel -> channel
    void <init>(io.flutter.embedding.engine.dart.DartExecutor) -> <init>
    io.flutter.embedding.engine.systemchannels.SettingsChannel$MessageBuilder startMessage() -> startMessage
io.flutter.embedding.engine.systemchannels.SettingsChannel$MessageBuilder -> io.flutter.embedding.engine.systemchannels.SettingsChannel$MessageBuilder:
    io.flutter.plugin.common.BasicMessageChannel channel -> channel
    java.util.Map message -> message
    void <init>(io.flutter.plugin.common.BasicMessageChannel) -> <init>
    io.flutter.embedding.engine.systemchannels.SettingsChannel$MessageBuilder setTextScaleFactor(float) -> setTextScaleFactor
    io.flutter.embedding.engine.systemchannels.SettingsChannel$MessageBuilder setUse24HourFormat(boolean) -> setUse24HourFormat
    io.flutter.embedding.engine.systemchannels.SettingsChannel$MessageBuilder setPlatformBrightness(io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness) -> setPlatformBrightness
    void send() -> send
io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness -> io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness:
    io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness light -> light
    io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness dark -> dark
    java.lang.String name -> name
    io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness[] $VALUES -> $VALUES
    io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness[] values() -> values
    io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    void <clinit>() -> <clinit>
io.flutter.embedding.engine.systemchannels.SystemChannel -> io.flutter.embedding.engine.systemchannels.SystemChannel:
    io.flutter.plugin.common.BasicMessageChannel channel -> channel
    void <init>(io.flutter.embedding.engine.dart.DartExecutor) -> <init>
    void sendMemoryPressureWarning() -> sendMemoryPressureWarning
io.flutter.embedding.engine.systemchannels.TextInputChannel -> io.flutter.embedding.engine.systemchannels.TextInputChannel:
    java.lang.String TAG -> TAG
    io.flutter.plugin.common.MethodChannel channel -> channel
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputMethodHandler textInputMethodHandler -> textInputMethodHandler
    io.flutter.plugin.common.MethodChannel$MethodCallHandler parsingMethodHandler -> parsingMethodHandler
    void <init>(io.flutter.embedding.engine.dart.DartExecutor) -> <init>
    void updateEditingState(int,java.lang.String,int,int,int,int) -> updateEditingState
    void newline(int) -> newline
    void go(int) -> go
    void search(int) -> search
    void send(int) -> send
    void done(int) -> done
    void next(int) -> next
    void previous(int) -> previous
    void unspecifiedAction(int) -> unspecifiedAction
    void setTextInputMethodHandler(io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputMethodHandler) -> setTextInputMethodHandler
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputMethodHandler access$000(io.flutter.embedding.engine.systemchannels.TextInputChannel) -> access$000
io.flutter.embedding.engine.systemchannels.TextInputChannel$1 -> io.flutter.embedding.engine.systemchannels.TextInputChannel$1:
    io.flutter.embedding.engine.systemchannels.TextInputChannel this$0 -> this$0
    void <init>(io.flutter.embedding.engine.systemchannels.TextInputChannel) -> <init>
    void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result) -> onMethodCall
io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration -> io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration:
    boolean obscureText -> obscureText
    boolean autocorrect -> autocorrect
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization textCapitalization -> textCapitalization
    io.flutter.embedding.engine.systemchannels.TextInputChannel$InputType inputType -> inputType
    java.lang.Integer inputAction -> inputAction
    java.lang.String actionLabel -> actionLabel
    io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration fromJson(org.json.JSONObject) -> fromJson
    java.lang.Integer inputActionFromTextInputAction(java.lang.String) -> inputActionFromTextInputAction
    void <init>(boolean,boolean,io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization,io.flutter.embedding.engine.systemchannels.TextInputChannel$InputType,java.lang.Integer,java.lang.String) -> <init>
io.flutter.embedding.engine.systemchannels.TextInputChannel$InputType -> io.flutter.embedding.engine.systemchannels.TextInputChannel$InputType:
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType type -> type
    boolean isSigned -> isSigned
    boolean isDecimal -> isDecimal
    io.flutter.embedding.engine.systemchannels.TextInputChannel$InputType fromJson(org.json.JSONObject) -> fromJson
    void <init>(io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType,boolean,boolean) -> <init>
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization -> io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization:
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization CHARACTERS -> CHARACTERS
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization WORDS -> WORDS
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization SENTENCES -> SENTENCES
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization NONE -> NONE
    java.lang.String encodedName -> encodedName
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization[] $VALUES -> $VALUES
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization[] values() -> values
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization valueOf(java.lang.String) -> valueOf
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization fromValue(java.lang.String) -> fromValue
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    void <clinit>() -> <clinit>
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState -> io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState:
    java.lang.String text -> text
    int selectionStart -> selectionStart
    int selectionEnd -> selectionEnd
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState fromJson(org.json.JSONObject) -> fromJson
    void <init>(java.lang.String,int,int) -> <init>
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputMethodHandler -> io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputMethodHandler:
    void show() -> show
    void hide() -> hide
    void setClient(int,io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration) -> setClient
    void setEditingState(io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState) -> setEditingState
    void clearClient() -> clearClient
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType -> io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType:
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType TEXT -> TEXT
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType DATETIME -> DATETIME
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType NUMBER -> NUMBER
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType PHONE -> PHONE
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType MULTILINE -> MULTILINE
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType EMAIL_ADDRESS -> EMAIL_ADDRESS
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType URL -> URL
    java.lang.String encodedName -> encodedName
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType[] $VALUES -> $VALUES
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType[] values() -> values
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType valueOf(java.lang.String) -> valueOf
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType fromValue(java.lang.String) -> fromValue
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    void <clinit>() -> <clinit>
io.flutter.plugin.common.ActivityLifecycleListener -> io.flutter.plugin.common.ActivityLifecycleListener:
    void onPostResume() -> onPostResume
io.flutter.plugin.common.BasicMessageChannel -> io.flutter.plugin.common.BasicMessageChannel:
    java.lang.String TAG -> TAG
    io.flutter.plugin.common.BinaryMessenger messenger -> messenger
    java.lang.String name -> name
    io.flutter.plugin.common.MessageCodec codec -> codec
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>(io.flutter.plugin.common.BinaryMessenger,java.lang.String,io.flutter.plugin.common.MessageCodec) -> <init>
    void send(java.lang.Object) -> send
    void send(java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply) -> send
    void setMessageHandler(io.flutter.plugin.common.BasicMessageChannel$MessageHandler) -> setMessageHandler
    io.flutter.plugin.common.MessageCodec access$200(io.flutter.plugin.common.BasicMessageChannel) -> access$200
    java.lang.String access$300(io.flutter.plugin.common.BasicMessageChannel) -> access$300
    void <clinit>() -> <clinit>
io.flutter.plugin.common.BasicMessageChannel$1 -> io.flutter.plugin.common.BasicMessageChannel$1:
io.flutter.plugin.common.BasicMessageChannel$IncomingMessageHandler -> io.flutter.plugin.common.BasicMessageChannel$IncomingMessageHandler:
    io.flutter.plugin.common.BasicMessageChannel$MessageHandler handler -> handler
    io.flutter.plugin.common.BasicMessageChannel this$0 -> this$0
    void <init>(io.flutter.plugin.common.BasicMessageChannel,io.flutter.plugin.common.BasicMessageChannel$MessageHandler) -> <init>
    void onMessage(java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply) -> onMessage
    void <init>(io.flutter.plugin.common.BasicMessageChannel,io.flutter.plugin.common.BasicMessageChannel$MessageHandler,io.flutter.plugin.common.BasicMessageChannel$1) -> <init>
io.flutter.plugin.common.BasicMessageChannel$IncomingMessageHandler$1 -> io.flutter.plugin.common.BasicMessageChannel$IncomingMessageHandler$1:
    io.flutter.plugin.common.BinaryMessenger$BinaryReply val$callback -> val$callback
    io.flutter.plugin.common.BasicMessageChannel$IncomingMessageHandler this$1 -> this$1
    void <init>(io.flutter.plugin.common.BasicMessageChannel$IncomingMessageHandler,io.flutter.plugin.common.BinaryMessenger$BinaryReply) -> <init>
    void reply(java.lang.Object) -> reply
io.flutter.plugin.common.BasicMessageChannel$IncomingReplyHandler -> io.flutter.plugin.common.BasicMessageChannel$IncomingReplyHandler:
    io.flutter.plugin.common.BasicMessageChannel$Reply callback -> callback
    io.flutter.plugin.common.BasicMessageChannel this$0 -> this$0
    void <init>(io.flutter.plugin.common.BasicMessageChannel,io.flutter.plugin.common.BasicMessageChannel$Reply) -> <init>
    void reply(java.nio.ByteBuffer) -> reply
    void <init>(io.flutter.plugin.common.BasicMessageChannel,io.flutter.plugin.common.BasicMessageChannel$Reply,io.flutter.plugin.common.BasicMessageChannel$1) -> <init>
io.flutter.plugin.common.BasicMessageChannel$MessageHandler -> io.flutter.plugin.common.BasicMessageChannel$MessageHandler:
    void onMessage(java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply) -> onMessage
io.flutter.plugin.common.BasicMessageChannel$Reply -> io.flutter.plugin.common.BasicMessageChannel$Reply:
    void reply(java.lang.Object) -> reply
io.flutter.plugin.common.BinaryCodec -> io.flutter.plugin.common.BinaryCodec:
    io.flutter.plugin.common.BinaryCodec INSTANCE -> INSTANCE
    void <init>() -> <init>
    java.nio.ByteBuffer encodeMessage(java.nio.ByteBuffer) -> encodeMessage
    java.nio.ByteBuffer decodeMessage(java.nio.ByteBuffer) -> decodeMessage
    java.lang.Object decodeMessage(java.nio.ByteBuffer) -> decodeMessage
    java.nio.ByteBuffer encodeMessage(java.lang.Object) -> encodeMessage
    void <clinit>() -> <clinit>
io.flutter.plugin.common.BinaryMessenger -> io.flutter.plugin.common.BinaryMessenger:
    void send(java.lang.String,java.nio.ByteBuffer) -> send
    void send(java.lang.String,java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply) -> send
    void setMessageHandler(java.lang.String,io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler) -> setMessageHandler
io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler -> io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler:
    void onMessage(java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply) -> onMessage
io.flutter.plugin.common.BinaryMessenger$BinaryReply -> io.flutter.plugin.common.BinaryMessenger$BinaryReply:
    void reply(java.nio.ByteBuffer) -> reply
io.flutter.plugin.common.ErrorLogResult -> io.flutter.plugin.common.ErrorLogResult:
    java.lang.String tag -> tag
    int level -> level
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,int) -> <init>
    void success(java.lang.Object) -> success
    void error(java.lang.String,java.lang.String,java.lang.Object) -> error
    void notImplemented() -> notImplemented
io.flutter.plugin.common.EventChannel -> io.flutter.plugin.common.EventChannel:
    java.lang.String TAG -> TAG
    io.flutter.plugin.common.BinaryMessenger messenger -> messenger
    java.lang.String name -> name
    io.flutter.plugin.common.MethodCodec codec -> codec
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>(io.flutter.plugin.common.BinaryMessenger,java.lang.String) -> <init>
    void <init>(io.flutter.plugin.common.BinaryMessenger,java.lang.String,io.flutter.plugin.common.MethodCodec) -> <init>
    void setStreamHandler(io.flutter.plugin.common.EventChannel$StreamHandler) -> setStreamHandler
    io.flutter.plugin.common.MethodCodec access$000(io.flutter.plugin.common.EventChannel) -> access$000
    java.lang.String access$200(io.flutter.plugin.common.EventChannel) -> access$200
    io.flutter.plugin.common.BinaryMessenger access$400(io.flutter.plugin.common.EventChannel) -> access$400
    void <clinit>() -> <clinit>
io.flutter.plugin.common.EventChannel$1 -> io.flutter.plugin.common.EventChannel$1:
io.flutter.plugin.common.EventChannel$EventSink -> io.flutter.plugin.common.EventChannel$EventSink:
    void success(java.lang.Object) -> success
    void error(java.lang.String,java.lang.String,java.lang.Object) -> error
    void endOfStream() -> endOfStream
io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler -> io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler:
    io.flutter.plugin.common.EventChannel$StreamHandler handler -> handler
    java.util.concurrent.atomic.AtomicReference activeSink -> activeSink
    io.flutter.plugin.common.EventChannel this$0 -> this$0
    void <init>(io.flutter.plugin.common.EventChannel,io.flutter.plugin.common.EventChannel$StreamHandler) -> <init>
    void onMessage(java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply) -> onMessage
    void onListen(java.lang.Object,io.flutter.plugin.common.BinaryMessenger$BinaryReply) -> onListen
    void onCancel(java.lang.Object,io.flutter.plugin.common.BinaryMessenger$BinaryReply) -> onCancel
    java.util.concurrent.atomic.AtomicReference access$300(io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler) -> access$300
io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler$EventSinkImplementation -> io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler$EventSinkImplementation:
    java.util.concurrent.atomic.AtomicBoolean hasEnded -> hasEnded
    io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler this$1 -> this$1
    void <init>(io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler) -> <init>
    void success(java.lang.Object) -> success
    void error(java.lang.String,java.lang.String,java.lang.Object) -> error
    void endOfStream() -> endOfStream
    void <init>(io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler,io.flutter.plugin.common.EventChannel$1) -> <init>
io.flutter.plugin.common.EventChannel$StreamHandler -> io.flutter.plugin.common.EventChannel$StreamHandler:
    void onListen(java.lang.Object,io.flutter.plugin.common.EventChannel$EventSink) -> onListen
    void onCancel(java.lang.Object) -> onCancel
io.flutter.plugin.common.FlutterException -> io.flutter.plugin.common.FlutterException:
    java.lang.String code -> code
    java.lang.Object details -> details
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>(java.lang.String,java.lang.String,java.lang.Object) -> <init>
    void <clinit>() -> <clinit>
io.flutter.plugin.common.JSONMessageCodec -> io.flutter.plugin.common.JSONMessageCodec:
    io.flutter.plugin.common.JSONMessageCodec INSTANCE -> INSTANCE
    void <init>() -> <init>
    java.nio.ByteBuffer encodeMessage(java.lang.Object) -> encodeMessage
    java.lang.Object decodeMessage(java.nio.ByteBuffer) -> decodeMessage
    void <clinit>() -> <clinit>
io.flutter.plugin.common.JSONMethodCodec -> io.flutter.plugin.common.JSONMethodCodec:
    io.flutter.plugin.common.JSONMethodCodec INSTANCE -> INSTANCE
    void <init>() -> <init>
    java.nio.ByteBuffer encodeMethodCall(io.flutter.plugin.common.MethodCall) -> encodeMethodCall
    io.flutter.plugin.common.MethodCall decodeMethodCall(java.nio.ByteBuffer) -> decodeMethodCall
    java.nio.ByteBuffer encodeSuccessEnvelope(java.lang.Object) -> encodeSuccessEnvelope
    java.nio.ByteBuffer encodeErrorEnvelope(java.lang.String,java.lang.String,java.lang.Object) -> encodeErrorEnvelope
    java.lang.Object decodeEnvelope(java.nio.ByteBuffer) -> decodeEnvelope
    java.lang.Object unwrapNull(java.lang.Object) -> unwrapNull
    void <clinit>() -> <clinit>
io.flutter.plugin.common.JSONUtil -> io.flutter.plugin.common.JSONUtil:
    void <init>() -> <init>
    java.lang.Object unwrap(java.lang.Object) -> unwrap
    java.lang.Object wrap(java.lang.Object) -> wrap
io.flutter.plugin.common.MessageCodec -> io.flutter.plugin.common.MessageCodec:
    java.nio.ByteBuffer encodeMessage(java.lang.Object) -> encodeMessage
    java.lang.Object decodeMessage(java.nio.ByteBuffer) -> decodeMessage
io.flutter.plugin.common.MethodCall -> io.flutter.plugin.common.MethodCall:
    java.lang.String method -> method
    java.lang.Object arguments -> arguments
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>(java.lang.String,java.lang.Object) -> <init>
    java.lang.Object arguments() -> arguments
    java.lang.Object argument(java.lang.String) -> argument
    boolean hasArgument(java.lang.String) -> hasArgument
    void <clinit>() -> <clinit>
io.flutter.plugin.common.MethodChannel -> io.flutter.plugin.common.MethodChannel:
    java.lang.String TAG -> TAG
    io.flutter.plugin.common.BinaryMessenger messenger -> messenger
    java.lang.String name -> name
    io.flutter.plugin.common.MethodCodec codec -> codec
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>(io.flutter.plugin.common.BinaryMessenger,java.lang.String) -> <init>
    void <init>(io.flutter.plugin.common.BinaryMessenger,java.lang.String,io.flutter.plugin.common.MethodCodec) -> <init>
    void invokeMethod(java.lang.String,java.lang.Object) -> invokeMethod
    void invokeMethod(java.lang.String,java.lang.Object,io.flutter.plugin.common.MethodChannel$Result) -> invokeMethod
    void setMethodCallHandler(io.flutter.plugin.common.MethodChannel$MethodCallHandler) -> setMethodCallHandler
    io.flutter.plugin.common.MethodCodec access$000(io.flutter.plugin.common.MethodChannel) -> access$000
    java.lang.String access$100(io.flutter.plugin.common.MethodChannel) -> access$100
    void <clinit>() -> <clinit>
io.flutter.plugin.common.MethodChannel$IncomingMethodCallHandler -> io.flutter.plugin.common.MethodChannel$IncomingMethodCallHandler:
    io.flutter.plugin.common.MethodChannel$MethodCallHandler handler -> handler
    io.flutter.plugin.common.MethodChannel this$0 -> this$0
    void <init>(io.flutter.plugin.common.MethodChannel,io.flutter.plugin.common.MethodChannel$MethodCallHandler) -> <init>
    void onMessage(java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply) -> onMessage
io.flutter.plugin.common.MethodChannel$IncomingMethodCallHandler$1 -> io.flutter.plugin.common.MethodChannel$IncomingMethodCallHandler$1:
    io.flutter.plugin.common.BinaryMessenger$BinaryReply val$reply -> val$reply
    io.flutter.plugin.common.MethodChannel$IncomingMethodCallHandler this$1 -> this$1
    void <init>(io.flutter.plugin.common.MethodChannel$IncomingMethodCallHandler,io.flutter.plugin.common.BinaryMessenger$BinaryReply) -> <init>
    void success(java.lang.Object) -> success
    void error(java.lang.String,java.lang.String,java.lang.Object) -> error
    void notImplemented() -> notImplemented
io.flutter.plugin.common.MethodChannel$IncomingResultHandler -> io.flutter.plugin.common.MethodChannel$IncomingResultHandler:
    io.flutter.plugin.common.MethodChannel$Result callback -> callback
    io.flutter.plugin.common.MethodChannel this$0 -> this$0
    void <init>(io.flutter.plugin.common.MethodChannel,io.flutter.plugin.common.MethodChannel$Result) -> <init>
    void reply(java.nio.ByteBuffer) -> reply
io.flutter.plugin.common.MethodChannel$MethodCallHandler -> io.flutter.plugin.common.MethodChannel$MethodCallHandler:
    void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result) -> onMethodCall
io.flutter.plugin.common.MethodChannel$Result -> io.flutter.plugin.common.MethodChannel$Result:
    void success(java.lang.Object) -> success
    void error(java.lang.String,java.lang.String,java.lang.Object) -> error
    void notImplemented() -> notImplemented
io.flutter.plugin.common.MethodCodec -> io.flutter.plugin.common.MethodCodec:
    java.nio.ByteBuffer encodeMethodCall(io.flutter.plugin.common.MethodCall) -> encodeMethodCall
    io.flutter.plugin.common.MethodCall decodeMethodCall(java.nio.ByteBuffer) -> decodeMethodCall
    java.nio.ByteBuffer encodeSuccessEnvelope(java.lang.Object) -> encodeSuccessEnvelope
    java.nio.ByteBuffer encodeErrorEnvelope(java.lang.String,java.lang.String,java.lang.Object) -> encodeErrorEnvelope
    java.lang.Object decodeEnvelope(java.nio.ByteBuffer) -> decodeEnvelope
io.flutter.plugin.common.PluginRegistry -> io.flutter.plugin.common.PluginRegistry:
    io.flutter.plugin.common.PluginRegistry$Registrar registrarFor(java.lang.String) -> registrarFor
    boolean hasPlugin(java.lang.String) -> hasPlugin
    java.lang.Object valuePublishedByPlugin(java.lang.String) -> valuePublishedByPlugin
io.flutter.plugin.common.PluginRegistry$ActivityResultListener -> io.flutter.plugin.common.PluginRegistry$ActivityResultListener:
    boolean onActivityResult(int,int,android.content.Intent) -> onActivityResult
io.flutter.plugin.common.PluginRegistry$NewIntentListener -> io.flutter.plugin.common.PluginRegistry$NewIntentListener:
    boolean onNewIntent(android.content.Intent) -> onNewIntent
io.flutter.plugin.common.PluginRegistry$PluginRegistrantCallback -> io.flutter.plugin.common.PluginRegistry$PluginRegistrantCallback:
    void registerWith(io.flutter.plugin.common.PluginRegistry) -> registerWith
io.flutter.plugin.common.PluginRegistry$Registrar -> io.flutter.plugin.common.PluginRegistry$Registrar:
    android.app.Activity activity() -> activity
    android.content.Context context() -> context
    android.content.Context activeContext() -> activeContext
    io.flutter.plugin.common.BinaryMessenger messenger() -> messenger
    io.flutter.view.TextureRegistry textures() -> textures
    io.flutter.plugin.platform.PlatformViewRegistry platformViewRegistry() -> platformViewRegistry
    io.flutter.view.FlutterView view() -> view
    java.lang.String lookupKeyForAsset(java.lang.String) -> lookupKeyForAsset
    java.lang.String lookupKeyForAsset(java.lang.String,java.lang.String) -> lookupKeyForAsset
    io.flutter.plugin.common.PluginRegistry$Registrar publish(java.lang.Object) -> publish
    io.flutter.plugin.common.PluginRegistry$Registrar addRequestPermissionsResultListener(io.flutter.plugin.common.PluginRegistry$RequestPermissionsResultListener) -> addRequestPermissionsResultListener
    io.flutter.plugin.common.PluginRegistry$Registrar addActivityResultListener(io.flutter.plugin.common.PluginRegistry$ActivityResultListener) -> addActivityResultListener
    io.flutter.plugin.common.PluginRegistry$Registrar addNewIntentListener(io.flutter.plugin.common.PluginRegistry$NewIntentListener) -> addNewIntentListener
    io.flutter.plugin.common.PluginRegistry$Registrar addUserLeaveHintListener(io.flutter.plugin.common.PluginRegistry$UserLeaveHintListener) -> addUserLeaveHintListener
    io.flutter.plugin.common.PluginRegistry$Registrar addViewDestroyListener(io.flutter.plugin.common.PluginRegistry$ViewDestroyListener) -> addViewDestroyListener
io.flutter.plugin.common.PluginRegistry$RequestPermissionsResultListener -> io.flutter.plugin.common.PluginRegistry$RequestPermissionsResultListener:
    boolean onRequestPermissionsResult(int,java.lang.String[],int[]) -> onRequestPermissionsResult
io.flutter.plugin.common.PluginRegistry$UserLeaveHintListener -> io.flutter.plugin.common.PluginRegistry$UserLeaveHintListener:
    void onUserLeaveHint() -> onUserLeaveHint
io.flutter.plugin.common.PluginRegistry$ViewDestroyListener -> io.flutter.plugin.common.PluginRegistry$ViewDestroyListener:
    boolean onViewDestroy(io.flutter.view.FlutterNativeView) -> onViewDestroy
io.flutter.plugin.common.StandardMessageCodec -> io.flutter.plugin.common.StandardMessageCodec:
    io.flutter.plugin.common.StandardMessageCodec INSTANCE -> INSTANCE
    boolean LITTLE_ENDIAN -> LITTLE_ENDIAN
    java.nio.charset.Charset UTF8 -> UTF8
    byte NULL -> NULL
    byte TRUE -> TRUE
    byte FALSE -> FALSE
    byte INT -> INT
    byte LONG -> LONG
    byte BIGINT -> BIGINT
    byte DOUBLE -> DOUBLE
    byte STRING -> STRING
    byte BYTE_ARRAY -> BYTE_ARRAY
    byte INT_ARRAY -> INT_ARRAY
    byte LONG_ARRAY -> LONG_ARRAY
    byte DOUBLE_ARRAY -> DOUBLE_ARRAY
    byte LIST -> LIST
    byte MAP -> MAP
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>() -> <init>
    java.nio.ByteBuffer encodeMessage(java.lang.Object) -> encodeMessage
    java.lang.Object decodeMessage(java.nio.ByteBuffer) -> decodeMessage
    void writeSize(java.io.ByteArrayOutputStream,int) -> writeSize
    void writeChar(java.io.ByteArrayOutputStream,int) -> writeChar
    void writeInt(java.io.ByteArrayOutputStream,int) -> writeInt
    void writeLong(java.io.ByteArrayOutputStream,long) -> writeLong
    void writeDouble(java.io.ByteArrayOutputStream,double) -> writeDouble
    void writeBytes(java.io.ByteArrayOutputStream,byte[]) -> writeBytes
    void writeAlignment(java.io.ByteArrayOutputStream,int) -> writeAlignment
    void writeValue(java.io.ByteArrayOutputStream,java.lang.Object) -> writeValue
    int readSize(java.nio.ByteBuffer) -> readSize
    byte[] readBytes(java.nio.ByteBuffer) -> readBytes
    void readAlignment(java.nio.ByteBuffer,int) -> readAlignment
    java.lang.Object readValue(java.nio.ByteBuffer) -> readValue
    java.lang.Object readValueOfType(byte,java.nio.ByteBuffer) -> readValueOfType
    void <clinit>() -> <clinit>
io.flutter.plugin.common.StandardMessageCodec$ExposedByteArrayOutputStream -> io.flutter.plugin.common.StandardMessageCodec$ExposedByteArrayOutputStream:
    void <init>() -> <init>
    byte[] buffer() -> buffer
io.flutter.plugin.common.StandardMethodCodec -> io.flutter.plugin.common.StandardMethodCodec:
    io.flutter.plugin.common.StandardMethodCodec INSTANCE -> INSTANCE
    io.flutter.plugin.common.StandardMessageCodec messageCodec -> messageCodec
    void <init>(io.flutter.plugin.common.StandardMessageCodec) -> <init>
    java.nio.ByteBuffer encodeMethodCall(io.flutter.plugin.common.MethodCall) -> encodeMethodCall
    io.flutter.plugin.common.MethodCall decodeMethodCall(java.nio.ByteBuffer) -> decodeMethodCall
    java.nio.ByteBuffer encodeSuccessEnvelope(java.lang.Object) -> encodeSuccessEnvelope
    java.nio.ByteBuffer encodeErrorEnvelope(java.lang.String,java.lang.String,java.lang.Object) -> encodeErrorEnvelope
    java.lang.Object decodeEnvelope(java.nio.ByteBuffer) -> decodeEnvelope
    void <clinit>() -> <clinit>
io.flutter.plugin.common.StringCodec -> io.flutter.plugin.common.StringCodec:
    java.nio.charset.Charset UTF8 -> UTF8
    io.flutter.plugin.common.StringCodec INSTANCE -> INSTANCE
    void <init>() -> <init>
    java.nio.ByteBuffer encodeMessage(java.lang.String) -> encodeMessage
    java.lang.String decodeMessage(java.nio.ByteBuffer) -> decodeMessage
    java.lang.Object decodeMessage(java.nio.ByteBuffer) -> decodeMessage
    java.nio.ByteBuffer encodeMessage(java.lang.Object) -> encodeMessage
    void <clinit>() -> <clinit>
io.flutter.plugin.editing.InputConnectionAdaptor -> io.flutter.plugin.editing.InputConnectionAdaptor:
    android.view.View mFlutterView -> mFlutterView
    int mClient -> mClient
    io.flutter.embedding.engine.systemchannels.TextInputChannel textInputChannel -> textInputChannel
    android.text.Editable mEditable -> mEditable
    int mBatchCount -> mBatchCount
    android.view.inputmethod.InputMethodManager mImm -> mImm
    io.flutter.plugin.common.MethodChannel$Result logger -> logger
    void <init>(android.view.View,int,io.flutter.embedding.engine.systemchannels.TextInputChannel,android.text.Editable) -> <init>
    void updateEditingState() -> updateEditingState
    android.text.Editable getEditable() -> getEditable
    boolean beginBatchEdit() -> beginBatchEdit
    boolean endBatchEdit() -> endBatchEdit
    boolean commitText(java.lang.CharSequence,int) -> commitText
    boolean deleteSurroundingText(int,int) -> deleteSurroundingText
    boolean setComposingRegion(int,int) -> setComposingRegion
    boolean setComposingText(java.lang.CharSequence,int) -> setComposingText
    boolean setSelection(int,int) -> setSelection
    boolean sendKeyEvent(android.view.KeyEvent) -> sendKeyEvent
    boolean performEditorAction(int) -> performEditorAction
    void <clinit>() -> <clinit>
io.flutter.plugin.editing.TextInputPlugin -> io.flutter.plugin.editing.TextInputPlugin:
    android.view.View mView -> mView
    android.view.inputmethod.InputMethodManager mImm -> mImm
    io.flutter.embedding.engine.systemchannels.TextInputChannel textInputChannel -> textInputChannel
    int mClient -> mClient
    io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration configuration -> configuration
    android.text.Editable mEditable -> mEditable
    boolean mRestartInputPending -> mRestartInputPending
    android.view.inputmethod.InputConnection lastInputConnection -> lastInputConnection
    void <init>(android.view.View,io.flutter.embedding.engine.dart.DartExecutor) -> <init>
    android.view.inputmethod.InputMethodManager getInputMethodManager() -> getInputMethodManager
    int inputTypeFromTextInputType(io.flutter.embedding.engine.systemchannels.TextInputChannel$InputType,boolean,boolean,io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization) -> inputTypeFromTextInputType
    android.view.inputmethod.InputConnection createInputConnection(android.view.View,android.view.inputmethod.EditorInfo) -> createInputConnection
    android.view.inputmethod.InputConnection getLastInputConnection() -> getLastInputConnection
    void showTextInput(android.view.View) -> showTextInput
    void hideTextInput(android.view.View) -> hideTextInput
    void setTextInputClient(int,io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration) -> setTextInputClient
    void applyStateToSelection(io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState) -> applyStateToSelection
    void setTextInputEditingState(android.view.View,io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState) -> setTextInputEditingState
    void clearTextInputClient() -> clearTextInputClient
    android.view.View access$000(io.flutter.plugin.editing.TextInputPlugin) -> access$000
    void access$100(io.flutter.plugin.editing.TextInputPlugin,android.view.View) -> access$100
    void access$200(io.flutter.plugin.editing.TextInputPlugin,android.view.View) -> access$200
    void access$300(io.flutter.plugin.editing.TextInputPlugin,int,io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration) -> access$300
    void access$400(io.flutter.plugin.editing.TextInputPlugin,android.view.View,io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState) -> access$400
    void access$500(io.flutter.plugin.editing.TextInputPlugin) -> access$500
io.flutter.plugin.editing.TextInputPlugin$1 -> io.flutter.plugin.editing.TextInputPlugin$1:
    io.flutter.plugin.editing.TextInputPlugin this$0 -> this$0
    void <init>(io.flutter.plugin.editing.TextInputPlugin) -> <init>
    void show() -> show
    void hide() -> hide
    void setClient(int,io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration) -> setClient
    void setEditingState(io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState) -> setEditingState
    void clearClient() -> clearClient
io.flutter.plugin.platform.AccessibilityEventsDelegate -> io.flutter.plugin.platform.AccessibilityEventsDelegate:
    io.flutter.view.AccessibilityBridge accessibilityBridge -> accessibilityBridge
    void <init>() -> <init>
    boolean requestSendAccessibilityEvent(android.view.View,android.view.View,android.view.accessibility.AccessibilityEvent) -> requestSendAccessibilityEvent
    void setAccessibilityBridge(io.flutter.view.AccessibilityBridge) -> setAccessibilityBridge
io.flutter.plugin.platform.PlatformPlugin -> io.flutter.plugin.platform.PlatformPlugin:
    int DEFAULT_SYSTEM_UI -> DEFAULT_SYSTEM_UI
    android.app.Activity activity -> activity
    io.flutter.embedding.engine.systemchannels.PlatformChannel platformChannel -> platformChannel
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle currentTheme -> currentTheme
    int mEnabledOverlays -> mEnabledOverlays
    io.flutter.embedding.engine.systemchannels.PlatformChannel$PlatformMessageHandler mPlatformMessageHandler -> mPlatformMessageHandler
    void <init>(android.app.Activity,io.flutter.embedding.engine.systemchannels.PlatformChannel) -> <init>
    void playSystemSound(io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType) -> playSystemSound
    void vibrateHapticFeedback(io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType) -> vibrateHapticFeedback
    void setSystemChromePreferredOrientations(int) -> setSystemChromePreferredOrientations
    void setSystemChromeApplicationSwitcherDescription(io.flutter.embedding.engine.systemchannels.PlatformChannel$AppSwitcherDescription) -> setSystemChromeApplicationSwitcherDescription
    void setSystemChromeEnabledSystemUIOverlays(java.util.List) -> setSystemChromeEnabledSystemUIOverlays
    void updateSystemUiOverlays() -> updateSystemUiOverlays
    void restoreSystemChromeSystemUIOverlays() -> restoreSystemChromeSystemUIOverlays
    void setSystemChromeSystemUIOverlayStyle(io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle) -> setSystemChromeSystemUIOverlayStyle
    void popSystemNavigator() -> popSystemNavigator
    java.lang.CharSequence getClipboardData(io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat) -> getClipboardData
    void setClipboardData(java.lang.String) -> setClipboardData
    void onPostResume() -> onPostResume
    void access$000(io.flutter.plugin.platform.PlatformPlugin,io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType) -> access$000
    void access$100(io.flutter.plugin.platform.PlatformPlugin,io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType) -> access$100
    void access$200(io.flutter.plugin.platform.PlatformPlugin,int) -> access$200
    void access$300(io.flutter.plugin.platform.PlatformPlugin,io.flutter.embedding.engine.systemchannels.PlatformChannel$AppSwitcherDescription) -> access$300
    void access$400(io.flutter.plugin.platform.PlatformPlugin,java.util.List) -> access$400
    void access$500(io.flutter.plugin.platform.PlatformPlugin) -> access$500
    void access$600(io.flutter.plugin.platform.PlatformPlugin,io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle) -> access$600
    void access$700(io.flutter.plugin.platform.PlatformPlugin) -> access$700
    java.lang.CharSequence access$800(io.flutter.plugin.platform.PlatformPlugin,io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat) -> access$800
    void access$900(io.flutter.plugin.platform.PlatformPlugin,java.lang.String) -> access$900
io.flutter.plugin.platform.PlatformPlugin$1 -> io.flutter.plugin.platform.PlatformPlugin$1:
    io.flutter.plugin.platform.PlatformPlugin this$0 -> this$0
    void <init>(io.flutter.plugin.platform.PlatformPlugin) -> <init>
    void playSystemSound(io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType) -> playSystemSound
    void vibrateHapticFeedback(io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType) -> vibrateHapticFeedback
    void setPreferredOrientations(int) -> setPreferredOrientations
    void setApplicationSwitcherDescription(io.flutter.embedding.engine.systemchannels.PlatformChannel$AppSwitcherDescription) -> setApplicationSwitcherDescription
    void showSystemOverlays(java.util.List) -> showSystemOverlays
    void restoreSystemUiOverlays() -> restoreSystemUiOverlays
    void setSystemUiOverlayStyle(io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle) -> setSystemUiOverlayStyle
    void popSystemNavigator() -> popSystemNavigator
    java.lang.CharSequence getClipboardData(io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat) -> getClipboardData
    void setClipboardData(java.lang.String) -> setClipboardData
io.flutter.plugin.platform.PlatformPlugin$2 -> io.flutter.plugin.platform.PlatformPlugin$2:
    int[] $SwitchMap$io$flutter$embedding$engine$systemchannels$PlatformChannel$HapticFeedbackType -> $SwitchMap$io$flutter$embedding$engine$systemchannels$PlatformChannel$HapticFeedbackType
    int[] $SwitchMap$io$flutter$embedding$engine$systemchannels$PlatformChannel$SystemUiOverlay -> $SwitchMap$io$flutter$embedding$engine$systemchannels$PlatformChannel$SystemUiOverlay
    int[] $SwitchMap$io$flutter$embedding$engine$systemchannels$PlatformChannel$Brightness -> $SwitchMap$io$flutter$embedding$engine$systemchannels$PlatformChannel$Brightness
    void <clinit>() -> <clinit>
io.flutter.plugin.platform.PlatformView -> io.flutter.plugin.platform.PlatformView:
    android.view.View getView() -> getView
    void dispose() -> dispose
io.flutter.plugin.platform.PlatformViewFactory -> io.flutter.plugin.platform.PlatformViewFactory:
    io.flutter.plugin.common.MessageCodec mCreateArgsCodec -> mCreateArgsCodec
    void <init>(io.flutter.plugin.common.MessageCodec) -> <init>
    io.flutter.plugin.platform.PlatformView create(android.content.Context,int,java.lang.Object) -> create
    io.flutter.plugin.common.MessageCodec getCreateArgsCodec() -> getCreateArgsCodec
io.flutter.plugin.platform.PlatformViewRegistry -> io.flutter.plugin.platform.PlatformViewRegistry:
    boolean registerViewFactory(java.lang.String,io.flutter.plugin.platform.PlatformViewFactory) -> registerViewFactory
io.flutter.plugin.platform.PlatformViewRegistryImpl -> io.flutter.plugin.platform.PlatformViewRegistryImpl:
    java.util.Map viewFactories -> viewFactories
    void <init>() -> <init>
    boolean registerViewFactory(java.lang.String,io.flutter.plugin.platform.PlatformViewFactory) -> registerViewFactory
    io.flutter.plugin.platform.PlatformViewFactory getFactory(java.lang.String) -> getFactory
io.flutter.plugin.platform.PlatformViewsAccessibilityDelegate -> io.flutter.plugin.platform.PlatformViewsAccessibilityDelegate:
    android.view.View getPlatformViewById(java.lang.Integer) -> getPlatformViewById
    void attachAccessibilityBridge(io.flutter.view.AccessibilityBridge) -> attachAccessibilityBridge
    void detachAccessibiltyBridge() -> detachAccessibiltyBridge
io.flutter.plugin.platform.PlatformViewsController -> io.flutter.plugin.platform.PlatformViewsController:
    java.lang.String TAG -> TAG
    java.lang.String CHANNEL_NAME -> CHANNEL_NAME
    int MINIMAL_SDK -> MINIMAL_SDK
    io.flutter.plugin.platform.PlatformViewRegistryImpl mRegistry -> mRegistry
    android.content.Context mContext -> mContext
    io.flutter.view.TextureRegistry mTextureRegistry -> mTextureRegistry
    io.flutter.plugin.common.BinaryMessenger mMessenger -> mMessenger
    io.flutter.plugin.platform.AccessibilityEventsDelegate mAccessibilityEventsDelegate -> mAccessibilityEventsDelegate
    java.util.HashMap vdControllers -> vdControllers
    void <init>() -> <init>
    void attach(android.content.Context,io.flutter.view.TextureRegistry,io.flutter.plugin.common.BinaryMessenger) -> attach
    void detach() -> detach
    void attachAccessibilityBridge(io.flutter.view.AccessibilityBridge) -> attachAccessibilityBridge
    void detachAccessibiltyBridge() -> detachAccessibiltyBridge
    io.flutter.plugin.platform.PlatformViewRegistry getRegistry() -> getRegistry
    void onFlutterViewDestroyed() -> onFlutterViewDestroyed
    void onPreEngineRestart() -> onPreEngineRestart
    android.view.View getPlatformViewById(java.lang.Integer) -> getPlatformViewById
    void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result) -> onMethodCall
    void createPlatformView(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result) -> createPlatformView
    void disposePlatformView(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result) -> disposePlatformView
    void resizePlatformView(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result) -> resizePlatformView
    void onTouch(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result) -> onTouch
    void setDirection(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result) -> setDirection
    boolean validateDirection(int) -> validateDirection
    java.util.List parsePointerPropertiesList(java.lang.Object) -> parsePointerPropertiesList
    android.view.MotionEvent$PointerProperties parsePointerProperties(java.lang.Object) -> parsePointerProperties
    java.util.List parsePointerCoordsList(java.lang.Object,float) -> parsePointerCoordsList
    android.view.MotionEvent$PointerCoords parsePointerCoords(java.lang.Object,float) -> parsePointerCoords
    int toPhysicalPixels(double) -> toPhysicalPixels
    void flushAllViews() -> flushAllViews
io.flutter.plugin.platform.PlatformViewsController$1 -> io.flutter.plugin.platform.PlatformViewsController$1:
    io.flutter.plugin.common.MethodChannel$Result val$result -> val$result
    io.flutter.plugin.platform.PlatformViewsController this$0 -> this$0
    void <init>(io.flutter.plugin.platform.PlatformViewsController,io.flutter.plugin.common.MethodChannel$Result) -> <init>
    void run() -> run
io.flutter.plugin.platform.SingleViewPresentation -> io.flutter.plugin.platform.SingleViewPresentation:
    io.flutter.plugin.platform.PlatformViewFactory mViewFactory -> mViewFactory
    io.flutter.plugin.platform.AccessibilityEventsDelegate mAccessibilityEventsDelegate -> mAccessibilityEventsDelegate
    int mViewId -> mViewId
    java.lang.Object mCreateParams -> mCreateParams
    io.flutter.plugin.platform.SingleViewPresentation$AccessibilityDelegatingFrameLayout mRootView -> mRootView
    android.widget.FrameLayout mContainer -> mContainer
    io.flutter.plugin.platform.SingleViewPresentation$PresentationState mState -> mState
    void <init>(android.content.Context,android.view.Display,io.flutter.plugin.platform.PlatformViewFactory,io.flutter.plugin.platform.AccessibilityEventsDelegate,int,java.lang.Object) -> <init>
    void <init>(android.content.Context,android.view.Display,io.flutter.plugin.platform.AccessibilityEventsDelegate,io.flutter.plugin.platform.SingleViewPresentation$PresentationState) -> <init>
    void onCreate(android.os.Bundle) -> onCreate
    io.flutter.plugin.platform.SingleViewPresentation$PresentationState detachState() -> detachState
    io.flutter.plugin.platform.PlatformView getView() -> getView
io.flutter.plugin.platform.SingleViewPresentation$AccessibilityDelegatingFrameLayout -> io.flutter.plugin.platform.SingleViewPresentation$AccessibilityDelegatingFrameLayout:
    io.flutter.plugin.platform.AccessibilityEventsDelegate mAccessibilityEventsDelegate -> mAccessibilityEventsDelegate
    android.view.View mEmbeddedView -> mEmbeddedView
    void <init>(android.content.Context,io.flutter.plugin.platform.AccessibilityEventsDelegate,android.view.View) -> <init>
    boolean requestSendAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> requestSendAccessibilityEvent
io.flutter.plugin.platform.SingleViewPresentation$FakeWindowViewGroup -> io.flutter.plugin.platform.SingleViewPresentation$FakeWindowViewGroup:
    android.graphics.Rect mViewBounds -> mViewBounds
    android.graphics.Rect mChildRect -> mChildRect
    void <init>(android.content.Context) -> <init>
    void onLayout(boolean,int,int,int,int) -> onLayout
    void onMeasure(int,int) -> onMeasure
    int atMost(int) -> atMost
io.flutter.plugin.platform.SingleViewPresentation$PresentationContext -> io.flutter.plugin.platform.SingleViewPresentation$PresentationContext:
    android.view.WindowManager mWindowManager -> mWindowManager
    io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler mWindowManagerHandler -> mWindowManagerHandler
    void <init>(android.content.Context,io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler) -> <init>
    java.lang.Object getSystemService(java.lang.String) -> getSystemService
    android.view.WindowManager getWindowManager() -> getWindowManager
io.flutter.plugin.platform.SingleViewPresentation$PresentationState -> io.flutter.plugin.platform.SingleViewPresentation$PresentationState:
    io.flutter.plugin.platform.PlatformView mView -> mView
    io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler mWindowManagerHandler -> mWindowManagerHandler
    io.flutter.plugin.platform.SingleViewPresentation$FakeWindowViewGroup mFakeWindowRootView -> mFakeWindowRootView
    void <init>() -> <init>
    io.flutter.plugin.platform.SingleViewPresentation$FakeWindowViewGroup access$000(io.flutter.plugin.platform.SingleViewPresentation$PresentationState) -> access$000
    io.flutter.plugin.platform.SingleViewPresentation$FakeWindowViewGroup access$002(io.flutter.plugin.platform.SingleViewPresentation$PresentationState,io.flutter.plugin.platform.SingleViewPresentation$FakeWindowViewGroup) -> access$002
    io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler access$100(io.flutter.plugin.platform.SingleViewPresentation$PresentationState) -> access$100
    io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler access$102(io.flutter.plugin.platform.SingleViewPresentation$PresentationState,io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler) -> access$102
    io.flutter.plugin.platform.PlatformView access$200(io.flutter.plugin.platform.SingleViewPresentation$PresentationState) -> access$200
    io.flutter.plugin.platform.PlatformView access$202(io.flutter.plugin.platform.SingleViewPresentation$PresentationState,io.flutter.plugin.platform.PlatformView) -> access$202
io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler -> io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler:
    java.lang.String TAG -> TAG
    android.view.WindowManager mDelegate -> mDelegate
    io.flutter.plugin.platform.SingleViewPresentation$FakeWindowViewGroup mFakeWindowRootView -> mFakeWindowRootView
    void <init>(android.view.WindowManager,io.flutter.plugin.platform.SingleViewPresentation$FakeWindowViewGroup) -> <init>
    android.view.WindowManager getWindowManager() -> getWindowManager
    java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[]) -> invoke
    void addView(java.lang.Object[]) -> addView
    void removeView(java.lang.Object[]) -> removeView
    void removeViewImmediate(java.lang.Object[]) -> removeViewImmediate
    void updateViewLayout(java.lang.Object[]) -> updateViewLayout
io.flutter.plugin.platform.VirtualDisplayController -> io.flutter.plugin.platform.VirtualDisplayController:
    android.content.Context mContext -> mContext
    io.flutter.plugin.platform.AccessibilityEventsDelegate mAccessibilityEventsDelegate -> mAccessibilityEventsDelegate
    int mDensityDpi -> mDensityDpi
    io.flutter.view.TextureRegistry$SurfaceTextureEntry mTextureEntry -> mTextureEntry
    android.hardware.display.VirtualDisplay mVirtualDisplay -> mVirtualDisplay
    io.flutter.plugin.platform.SingleViewPresentation mPresentation -> mPresentation
    android.view.Surface mSurface -> mSurface
    io.flutter.plugin.platform.VirtualDisplayController create(android.content.Context,io.flutter.plugin.platform.AccessibilityEventsDelegate,io.flutter.plugin.platform.PlatformViewFactory,io.flutter.view.TextureRegistry$SurfaceTextureEntry,int,int,int,java.lang.Object) -> create
    void <init>(android.content.Context,io.flutter.plugin.platform.AccessibilityEventsDelegate,android.hardware.display.VirtualDisplay,io.flutter.plugin.platform.PlatformViewFactory,android.view.Surface,io.flutter.view.TextureRegistry$SurfaceTextureEntry,int,java.lang.Object) -> <init>
    void resize(int,int,java.lang.Runnable) -> resize
    void dispose() -> dispose
    android.view.View getView() -> getView
io.flutter.plugin.platform.VirtualDisplayController$1 -> io.flutter.plugin.platform.VirtualDisplayController$1:
    android.view.View val$embeddedView -> val$embeddedView
    java.lang.Runnable val$onNewSizeFrameAvailable -> val$onNewSizeFrameAvailable
    io.flutter.plugin.platform.VirtualDisplayController this$0 -> this$0
    void <init>(io.flutter.plugin.platform.VirtualDisplayController,android.view.View,java.lang.Runnable) -> <init>
    void onViewAttachedToWindow(android.view.View) -> onViewAttachedToWindow
    void onViewDetachedFromWindow(android.view.View) -> onViewDetachedFromWindow
io.flutter.plugin.platform.VirtualDisplayController$1$1 -> io.flutter.plugin.platform.VirtualDisplayController$1$1:
    io.flutter.plugin.platform.VirtualDisplayController$1 this$1 -> this$1
    void <init>(io.flutter.plugin.platform.VirtualDisplayController$1) -> <init>
    void run() -> run
io.flutter.plugin.platform.VirtualDisplayController$OneTimeOnDrawListener -> io.flutter.plugin.platform.VirtualDisplayController$OneTimeOnDrawListener:
    android.view.View mView -> mView
    java.lang.Runnable mOnDrawRunnable -> mOnDrawRunnable
    void schedule(android.view.View,java.lang.Runnable) -> schedule
    void <init>(android.view.View,java.lang.Runnable) -> <init>
    void onDraw() -> onDraw
io.flutter.plugin.platform.VirtualDisplayController$OneTimeOnDrawListener$1 -> io.flutter.plugin.platform.VirtualDisplayController$OneTimeOnDrawListener$1:
    io.flutter.plugin.platform.VirtualDisplayController$OneTimeOnDrawListener this$0 -> this$0
    void <init>(io.flutter.plugin.platform.VirtualDisplayController$OneTimeOnDrawListener) -> <init>
    void run() -> run
io.flutter.plugins.GeneratedPluginRegistrant -> io.flutter.plugins.GeneratedPluginRegistrant:
    void <init>() -> <init>
    void registerWith(io.flutter.plugin.common.PluginRegistry) -> registerWith
    boolean alreadyRegisteredWith(io.flutter.plugin.common.PluginRegistry) -> alreadyRegisteredWith
io.flutter.util.BSDiff -> io.flutter.util.BSDiff:
    void <init>() -> <init>
    byte[] bspatch(byte[],byte[]) -> bspatch
    void read(java.io.InputStream,byte[],int,int) -> read
io.flutter.util.PathUtils -> io.flutter.util.PathUtils:
    void <init>() -> <init>
    java.lang.String getFilesDir(android.content.Context) -> getFilesDir
    java.lang.String getDataDirectory(android.content.Context) -> getDataDirectory
    java.lang.String getCacheDirectory(android.content.Context) -> getCacheDirectory
io.flutter.util.Preconditions -> io.flutter.util.Preconditions:
    void <init>() -> <init>
    java.lang.Object checkNotNull(java.lang.Object) -> checkNotNull
io.flutter.util.Predicate -> io.flutter.util.Predicate:
    boolean test(java.lang.Object) -> test
io.flutter.view.AccessibilityBridge -> io.flutter.view.AccessibilityBridge:
    java.lang.String TAG -> TAG
    int ACTION_SHOW_ON_SCREEN -> ACTION_SHOW_ON_SCREEN
    float SCROLL_EXTENT_FOR_INFINITY -> SCROLL_EXTENT_FOR_INFINITY
    float SCROLL_POSITION_CAP_FOR_INFINITY -> SCROLL_POSITION_CAP_FOR_INFINITY
    int ROOT_NODE_ID -> ROOT_NODE_ID
    int MIN_ENGINE_GENERATED_NODE_ID -> MIN_ENGINE_GENERATED_NODE_ID
    int FIRST_RESOURCE_ID -> FIRST_RESOURCE_ID
    android.view.View rootAccessibilityView -> rootAccessibilityView
    io.flutter.embedding.engine.systemchannels.AccessibilityChannel accessibilityChannel -> accessibilityChannel
    android.view.accessibility.AccessibilityManager accessibilityManager -> accessibilityManager
    io.flutter.view.AccessibilityViewEmbedder accessibilityViewEmbedder -> accessibilityViewEmbedder
    io.flutter.plugin.platform.PlatformViewsAccessibilityDelegate platformViewsAccessibilityDelegate -> platformViewsAccessibilityDelegate
    android.content.ContentResolver contentResolver -> contentResolver
    java.util.Map flutterSemanticsTree -> flutterSemanticsTree
    java.util.Map customAccessibilityActions -> customAccessibilityActions
    io.flutter.view.AccessibilityBridge$SemanticsNode accessibilityFocusedSemanticsNode -> accessibilityFocusedSemanticsNode
    java.lang.Integer embeddedAccessibilityFocusedNodeId -> embeddedAccessibilityFocusedNodeId
    java.lang.Integer embeddedInputFocusedNodeId -> embeddedInputFocusedNodeId
    int accessibilityFeatureFlags -> accessibilityFeatureFlags
    io.flutter.view.AccessibilityBridge$SemanticsNode inputFocusedSemanticsNode -> inputFocusedSemanticsNode
    io.flutter.view.AccessibilityBridge$SemanticsNode hoveredObject -> hoveredObject
    java.util.List flutterNavigationStack -> flutterNavigationStack
    int previousRouteId -> previousRouteId
    java.lang.Integer lastLeftFrameInset -> lastLeftFrameInset
    io.flutter.view.AccessibilityBridge$OnAccessibilityChangeListener onAccessibilityChangeListener -> onAccessibilityChangeListener
    io.flutter.embedding.engine.systemchannels.AccessibilityChannel$AccessibilityMessageHandler accessibilityMessageHandler -> accessibilityMessageHandler
    android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener accessibilityStateChangeListener -> accessibilityStateChangeListener
    android.view.accessibility.AccessibilityManager$TouchExplorationStateChangeListener touchExplorationStateChangeListener -> touchExplorationStateChangeListener
    android.database.ContentObserver animationScaleObserver -> animationScaleObserver
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>(android.view.View,io.flutter.embedding.engine.systemchannels.AccessibilityChannel,android.view.accessibility.AccessibilityManager,android.content.ContentResolver,io.flutter.plugin.platform.PlatformViewsAccessibilityDelegate) -> <init>
    void release() -> release
    boolean isAccessibilityEnabled() -> isAccessibilityEnabled
    boolean isTouchExplorationEnabled() -> isTouchExplorationEnabled
    void setOnAccessibilityChangeListener(io.flutter.view.AccessibilityBridge$OnAccessibilityChangeListener) -> setOnAccessibilityChangeListener
    void sendLatestAccessibilityFlagsToFlutter() -> sendLatestAccessibilityFlagsToFlutter
    boolean shouldSetCollectionInfo(io.flutter.view.AccessibilityBridge$SemanticsNode) -> shouldSetCollectionInfo
    android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int) -> createAccessibilityNodeInfo
    boolean performAction(int,int,android.os.Bundle) -> performAction
    boolean performCursorMoveAction(io.flutter.view.AccessibilityBridge$SemanticsNode,int,android.os.Bundle,boolean) -> performCursorMoveAction
    android.view.accessibility.AccessibilityNodeInfo findFocus(int) -> findFocus
    io.flutter.view.AccessibilityBridge$SemanticsNode getRootSemanticsNode() -> getRootSemanticsNode
    io.flutter.view.AccessibilityBridge$SemanticsNode getOrCreateSemanticsNode(int) -> getOrCreateSemanticsNode
    io.flutter.view.AccessibilityBridge$CustomAccessibilityAction getOrCreateAccessibilityAction(int) -> getOrCreateAccessibilityAction
    boolean onAccessibilityHoverEvent(android.view.MotionEvent) -> onAccessibilityHoverEvent
    void onTouchExplorationExit() -> onTouchExplorationExit
    void handleTouchExploration(float,float) -> handleTouchExploration
    void updateCustomAccessibilityActions(java.nio.ByteBuffer,java.lang.String[]) -> updateCustomAccessibilityActions
    void updateSemantics(java.nio.ByteBuffer,java.lang.String[]) -> updateSemantics
    android.view.accessibility.AccessibilityEvent createTextChangedEvent(int,java.lang.String,java.lang.String) -> createTextChangedEvent
    void sendAccessibilityEvent(int,int) -> sendAccessibilityEvent
    void sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent) -> sendAccessibilityEvent
    void createAndSendWindowChangeEvent(io.flutter.view.AccessibilityBridge$SemanticsNode) -> createAndSendWindowChangeEvent
    android.view.accessibility.AccessibilityEvent obtainAccessibilityEvent(int,int) -> obtainAccessibilityEvent
    void willRemoveSemanticsNode(io.flutter.view.AccessibilityBridge$SemanticsNode) -> willRemoveSemanticsNode
    void reset() -> reset
    boolean externalViewRequestSendAccessibilityEvent(android.view.View,android.view.View,android.view.accessibility.AccessibilityEvent) -> externalViewRequestSendAccessibilityEvent
    boolean lambda$shouldSetCollectionInfo$1(io.flutter.view.AccessibilityBridge$SemanticsNode) -> lambda$shouldSetCollectionInfo$1
    boolean lambda$shouldSetCollectionInfo$0(io.flutter.view.AccessibilityBridge$SemanticsNode,io.flutter.view.AccessibilityBridge$SemanticsNode) -> lambda$shouldSetCollectionInfo$0
    android.view.View access$000(io.flutter.view.AccessibilityBridge) -> access$000
    void access$100(io.flutter.view.AccessibilityBridge,int,int) -> access$100
    android.view.accessibility.AccessibilityEvent access$200(io.flutter.view.AccessibilityBridge,int,int) -> access$200
    void access$300(io.flutter.view.AccessibilityBridge,android.view.accessibility.AccessibilityEvent) -> access$300
    io.flutter.embedding.engine.systemchannels.AccessibilityChannel$AccessibilityMessageHandler access$400(io.flutter.view.AccessibilityBridge) -> access$400
    io.flutter.embedding.engine.systemchannels.AccessibilityChannel access$500(io.flutter.view.AccessibilityBridge) -> access$500
    io.flutter.view.AccessibilityBridge$OnAccessibilityChangeListener access$600(io.flutter.view.AccessibilityBridge) -> access$600
    android.view.accessibility.AccessibilityManager access$700(io.flutter.view.AccessibilityBridge) -> access$700
    android.content.ContentResolver access$800(io.flutter.view.AccessibilityBridge) -> access$800
    int access$900(io.flutter.view.AccessibilityBridge) -> access$900
    int access$902(io.flutter.view.AccessibilityBridge,int) -> access$902
    void access$1000(io.flutter.view.AccessibilityBridge) -> access$1000
    void access$1100(io.flutter.view.AccessibilityBridge) -> access$1100
    io.flutter.view.AccessibilityBridge$SemanticsNode access$5800(io.flutter.view.AccessibilityBridge,int) -> access$5800
    io.flutter.view.AccessibilityBridge$CustomAccessibilityAction access$5900(io.flutter.view.AccessibilityBridge,int) -> access$5900
    void <clinit>() -> <clinit>
io.flutter.view.AccessibilityBridge$1 -> io.flutter.view.AccessibilityBridge$1:
    io.flutter.view.AccessibilityBridge this$0 -> this$0
    void <init>(io.flutter.view.AccessibilityBridge) -> <init>
    void announce(java.lang.String) -> announce
    void onTap(int) -> onTap
    void onLongPress(int) -> onLongPress
    void onTooltip(java.lang.String) -> onTooltip
    void updateCustomAccessibilityActions(java.nio.ByteBuffer,java.lang.String[]) -> updateCustomAccessibilityActions
    void updateSemantics(java.nio.ByteBuffer,java.lang.String[]) -> updateSemantics
io.flutter.view.AccessibilityBridge$2 -> io.flutter.view.AccessibilityBridge$2:
    io.flutter.view.AccessibilityBridge this$0 -> this$0
    void <init>(io.flutter.view.AccessibilityBridge) -> <init>
    void onAccessibilityStateChanged(boolean) -> onAccessibilityStateChanged
io.flutter.view.AccessibilityBridge$3 -> io.flutter.view.AccessibilityBridge$3:
    io.flutter.view.AccessibilityBridge this$0 -> this$0
    void <init>(io.flutter.view.AccessibilityBridge,android.os.Handler) -> <init>
    void onChange(boolean) -> onChange
    void onChange(boolean,android.net.Uri) -> onChange
io.flutter.view.AccessibilityBridge$4 -> io.flutter.view.AccessibilityBridge$4:
    android.view.accessibility.AccessibilityManager val$accessibilityManager -> val$accessibilityManager
    io.flutter.view.AccessibilityBridge this$0 -> this$0
    void <init>(io.flutter.view.AccessibilityBridge,android.view.accessibility.AccessibilityManager) -> <init>
    void onTouchExplorationStateChanged(boolean) -> onTouchExplorationStateChanged
io.flutter.view.AccessibilityBridge$AccessibilityFeature -> io.flutter.view.AccessibilityBridge$AccessibilityFeature:
    io.flutter.view.AccessibilityBridge$AccessibilityFeature ACCESSIBLE_NAVIGATION -> ACCESSIBLE_NAVIGATION
    io.flutter.view.AccessibilityBridge$AccessibilityFeature INVERT_COLORS -> INVERT_COLORS
    io.flutter.view.AccessibilityBridge$AccessibilityFeature DISABLE_ANIMATIONS -> DISABLE_ANIMATIONS
    int value -> value
    io.flutter.view.AccessibilityBridge$AccessibilityFeature[] $VALUES -> $VALUES
    io.flutter.view.AccessibilityBridge$AccessibilityFeature[] values() -> values
    io.flutter.view.AccessibilityBridge$AccessibilityFeature valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    void <clinit>() -> <clinit>
io.flutter.view.AccessibilityBridge$Action -> io.flutter.view.AccessibilityBridge$Action:
    io.flutter.view.AccessibilityBridge$Action TAP -> TAP
    io.flutter.view.AccessibilityBridge$Action LONG_PRESS -> LONG_PRESS
    io.flutter.view.AccessibilityBridge$Action SCROLL_LEFT -> SCROLL_LEFT
    io.flutter.view.AccessibilityBridge$Action SCROLL_RIGHT -> SCROLL_RIGHT
    io.flutter.view.AccessibilityBridge$Action SCROLL_UP -> SCROLL_UP
    io.flutter.view.AccessibilityBridge$Action SCROLL_DOWN -> SCROLL_DOWN
    io.flutter.view.AccessibilityBridge$Action INCREASE -> INCREASE
    io.flutter.view.AccessibilityBridge$Action DECREASE -> DECREASE
    io.flutter.view.AccessibilityBridge$Action SHOW_ON_SCREEN -> SHOW_ON_SCREEN
    io.flutter.view.AccessibilityBridge$Action MOVE_CURSOR_FORWARD_BY_CHARACTER -> MOVE_CURSOR_FORWARD_BY_CHARACTER
    io.flutter.view.AccessibilityBridge$Action MOVE_CURSOR_BACKWARD_BY_CHARACTER -> MOVE_CURSOR_BACKWARD_BY_CHARACTER
    io.flutter.view.AccessibilityBridge$Action SET_SELECTION -> SET_SELECTION
    io.flutter.view.AccessibilityBridge$Action COPY -> COPY
    io.flutter.view.AccessibilityBridge$Action CUT -> CUT
    io.flutter.view.AccessibilityBridge$Action PASTE -> PASTE
    io.flutter.view.AccessibilityBridge$Action DID_GAIN_ACCESSIBILITY_FOCUS -> DID_GAIN_ACCESSIBILITY_FOCUS
    io.flutter.view.AccessibilityBridge$Action DID_LOSE_ACCESSIBILITY_FOCUS -> DID_LOSE_ACCESSIBILITY_FOCUS
    io.flutter.view.AccessibilityBridge$Action CUSTOM_ACTION -> CUSTOM_ACTION
    io.flutter.view.AccessibilityBridge$Action DISMISS -> DISMISS
    io.flutter.view.AccessibilityBridge$Action MOVE_CURSOR_FORWARD_BY_WORD -> MOVE_CURSOR_FORWARD_BY_WORD
    io.flutter.view.AccessibilityBridge$Action MOVE_CURSOR_BACKWARD_BY_WORD -> MOVE_CURSOR_BACKWARD_BY_WORD
    int value -> value
    io.flutter.view.AccessibilityBridge$Action[] $VALUES -> $VALUES
    io.flutter.view.AccessibilityBridge$Action[] values() -> values
    io.flutter.view.AccessibilityBridge$Action valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    void <clinit>() -> <clinit>
io.flutter.view.AccessibilityBridge$CustomAccessibilityAction -> io.flutter.view.AccessibilityBridge$CustomAccessibilityAction:
    int resourceId -> resourceId
    int id -> id
    int overrideId -> overrideId
    java.lang.String label -> label
    java.lang.String hint -> hint
    void <init>() -> <init>
    java.lang.String access$2400(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction) -> access$2400
    int access$2800(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction) -> access$2800
    java.lang.String access$2900(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction) -> access$2900
    int access$3400(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction) -> access$3400
    int access$3402(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction,int) -> access$3402
    int access$2802(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction,int) -> access$2802
    int access$3602(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction,int) -> access$3602
    java.lang.String access$2902(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction,java.lang.String) -> access$2902
    java.lang.String access$2402(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction,java.lang.String) -> access$2402
    int access$3600(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction) -> access$3600
io.flutter.view.AccessibilityBridge$Flag -> io.flutter.view.AccessibilityBridge$Flag:
    io.flutter.view.AccessibilityBridge$Flag HAS_CHECKED_STATE -> HAS_CHECKED_STATE
    io.flutter.view.AccessibilityBridge$Flag IS_CHECKED -> IS_CHECKED
    io.flutter.view.AccessibilityBridge$Flag IS_SELECTED -> IS_SELECTED
    io.flutter.view.AccessibilityBridge$Flag IS_BUTTON -> IS_BUTTON
    io.flutter.view.AccessibilityBridge$Flag IS_TEXT_FIELD -> IS_TEXT_FIELD
    io.flutter.view.AccessibilityBridge$Flag IS_FOCUSED -> IS_FOCUSED
    io.flutter.view.AccessibilityBridge$Flag HAS_ENABLED_STATE -> HAS_ENABLED_STATE
    io.flutter.view.AccessibilityBridge$Flag IS_ENABLED -> IS_ENABLED
    io.flutter.view.AccessibilityBridge$Flag IS_IN_MUTUALLY_EXCLUSIVE_GROUP -> IS_IN_MUTUALLY_EXCLUSIVE_GROUP
    io.flutter.view.AccessibilityBridge$Flag IS_HEADER -> IS_HEADER
    io.flutter.view.AccessibilityBridge$Flag IS_OBSCURED -> IS_OBSCURED
    io.flutter.view.AccessibilityBridge$Flag SCOPES_ROUTE -> SCOPES_ROUTE
    io.flutter.view.AccessibilityBridge$Flag NAMES_ROUTE -> NAMES_ROUTE
    io.flutter.view.AccessibilityBridge$Flag IS_HIDDEN -> IS_HIDDEN
    io.flutter.view.AccessibilityBridge$Flag IS_IMAGE -> IS_IMAGE
    io.flutter.view.AccessibilityBridge$Flag IS_LIVE_REGION -> IS_LIVE_REGION
    io.flutter.view.AccessibilityBridge$Flag HAS_TOGGLED_STATE -> HAS_TOGGLED_STATE
    io.flutter.view.AccessibilityBridge$Flag IS_TOGGLED -> IS_TOGGLED
    io.flutter.view.AccessibilityBridge$Flag HAS_IMPLICIT_SCROLLING -> HAS_IMPLICIT_SCROLLING
    int value -> value
    io.flutter.view.AccessibilityBridge$Flag[] $VALUES -> $VALUES
    io.flutter.view.AccessibilityBridge$Flag[] values() -> values
    io.flutter.view.AccessibilityBridge$Flag valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    void <clinit>() -> <clinit>
io.flutter.view.AccessibilityBridge$OnAccessibilityChangeListener -> io.flutter.view.AccessibilityBridge$OnAccessibilityChangeListener:
    void onAccessibilityChanged(boolean,boolean) -> onAccessibilityChanged
io.flutter.view.AccessibilityBridge$SemanticsNode -> io.flutter.view.AccessibilityBridge$SemanticsNode:
    io.flutter.view.AccessibilityBridge accessibilityBridge -> accessibilityBridge
    int id -> id
    int flags -> flags
    int actions -> actions
    int textSelectionBase -> textSelectionBase
    int textSelectionExtent -> textSelectionExtent
    int platformViewId -> platformViewId
    int scrollChildren -> scrollChildren
    int scrollIndex -> scrollIndex
    float scrollPosition -> scrollPosition
    float scrollExtentMax -> scrollExtentMax
    float scrollExtentMin -> scrollExtentMin
    java.lang.String label -> label
    java.lang.String value -> value
    java.lang.String increasedValue -> increasedValue
    java.lang.String decreasedValue -> decreasedValue
    java.lang.String hint -> hint
    io.flutter.view.AccessibilityBridge$TextDirection textDirection -> textDirection
    boolean hadPreviousConfig -> hadPreviousConfig
    int previousFlags -> previousFlags
    int previousActions -> previousActions
    int previousTextSelectionBase -> previousTextSelectionBase
    int previousTextSelectionExtent -> previousTextSelectionExtent
    float previousScrollPosition -> previousScrollPosition
    float previousScrollExtentMax -> previousScrollExtentMax
    float previousScrollExtentMin -> previousScrollExtentMin
    java.lang.String previousValue -> previousValue
    java.lang.String previousLabel -> previousLabel
    float left -> left
    float top -> top
    float right -> right
    float bottom -> bottom
    float[] transform -> transform
    io.flutter.view.AccessibilityBridge$SemanticsNode parent -> parent
    java.util.List childrenInTraversalOrder -> childrenInTraversalOrder
    java.util.List childrenInHitTestOrder -> childrenInHitTestOrder
    java.util.List customAccessibilityActions -> customAccessibilityActions
    io.flutter.view.AccessibilityBridge$CustomAccessibilityAction onTapOverride -> onTapOverride
    io.flutter.view.AccessibilityBridge$CustomAccessibilityAction onLongPressOverride -> onLongPressOverride
    boolean inverseTransformDirty -> inverseTransformDirty
    float[] inverseTransform -> inverseTransform
    boolean globalGeometryDirty -> globalGeometryDirty
    float[] globalTransform -> globalTransform
    android.graphics.Rect globalRect -> globalRect
    boolean $assertionsDisabled -> $assertionsDisabled
    boolean nullableHasAncestor(io.flutter.view.AccessibilityBridge$SemanticsNode,io.flutter.util.Predicate) -> nullableHasAncestor
    void <init>(io.flutter.view.AccessibilityBridge) -> <init>
    io.flutter.view.AccessibilityBridge$SemanticsNode getAncestor(io.flutter.util.Predicate) -> getAncestor
    boolean hasAction(io.flutter.view.AccessibilityBridge$Action) -> hasAction
    boolean hadAction(io.flutter.view.AccessibilityBridge$Action) -> hadAction
    boolean hasFlag(io.flutter.view.AccessibilityBridge$Flag) -> hasFlag
    boolean hadFlag(io.flutter.view.AccessibilityBridge$Flag) -> hadFlag
    boolean didScroll() -> didScroll
    boolean didChangeLabel() -> didChangeLabel
    void log(java.lang.String,boolean) -> log
    void updateWith(java.nio.ByteBuffer,java.lang.String[]) -> updateWith
    void ensureInverseTransform() -> ensureInverseTransform
    android.graphics.Rect getGlobalRect() -> getGlobalRect
    io.flutter.view.AccessibilityBridge$SemanticsNode hitTest(float[]) -> hitTest
    boolean isFocusable() -> isFocusable
    void collectRoutes(java.util.List) -> collectRoutes
    java.lang.String getRouteName() -> getRouteName
    void updateRecursively(float[],java.util.Set,boolean) -> updateRecursively
    void transformPoint(float[],float[],float[]) -> transformPoint
    float min(float,float,float,float) -> min
    float max(float,float,float,float) -> max
    java.lang.String getValueLabelHint() -> getValueLabelHint
    int access$1200(io.flutter.view.AccessibilityBridge$SemanticsNode) -> access$1200
    boolean access$1300(io.flutter.view.AccessibilityBridge$SemanticsNode,io.flutter.util.Predicate) -> access$1300
    int access$1400(io.flutter.view.AccessibilityBridge$SemanticsNode) -> access$1400
    android.graphics.Rect access$1500(io.flutter.view.AccessibilityBridge$SemanticsNode) -> access$1500
    int access$1600(io.flutter.view.AccessibilityBridge$SemanticsNode) -> access$1600
    boolean access$1700(io.flutter.view.AccessibilityBridge$SemanticsNode) -> access$1700
    boolean access$1800(io.flutter.view.AccessibilityBridge$SemanticsNode,io.flutter.view.AccessibilityBridge$Flag) -> access$1800
    int access$1900(io.flutter.view.AccessibilityBridge$SemanticsNode) -> access$1900
    int access$2000(io.flutter.view.AccessibilityBridge$SemanticsNode) -> access$2000
    boolean access$2100(io.flutter.view.AccessibilityBridge$SemanticsNode,io.flutter.view.AccessibilityBridge$Action) -> access$2100
    io.flutter.view.AccessibilityBridge$SemanticsNode access$2200(io.flutter.view.AccessibilityBridge$SemanticsNode) -> access$2200
    io.flutter.view.AccessibilityBridge$CustomAccessibilityAction access$2300(io.flutter.view.AccessibilityBridge$SemanticsNode) -> access$2300
    io.flutter.view.AccessibilityBridge$CustomAccessibilityAction access$2500(io.flutter.view.AccessibilityBridge$SemanticsNode) -> access$2500
    java.lang.String access$2600(io.flutter.view.AccessibilityBridge$SemanticsNode) -> access$2600
    java.util.List access$2700(io.flutter.view.AccessibilityBridge$SemanticsNode) -> access$2700
    java.util.List access$3000(io.flutter.view.AccessibilityBridge$SemanticsNode) -> access$3000
    java.lang.String access$3102(io.flutter.view.AccessibilityBridge$SemanticsNode,java.lang.String) -> access$3102
    java.lang.String access$3200(io.flutter.view.AccessibilityBridge$SemanticsNode) -> access$3200
    java.lang.String access$3300(io.flutter.view.AccessibilityBridge$SemanticsNode) -> access$3300
    int access$1602(io.flutter.view.AccessibilityBridge$SemanticsNode,int) -> access$1602
    io.flutter.view.AccessibilityBridge$SemanticsNode access$3500(io.flutter.view.AccessibilityBridge$SemanticsNode,float[]) -> access$3500
    void access$3700(io.flutter.view.AccessibilityBridge$SemanticsNode,java.nio.ByteBuffer,java.lang.String[]) -> access$3700
    boolean access$3800(io.flutter.view.AccessibilityBridge$SemanticsNode) -> access$3800
    boolean access$3902(io.flutter.view.AccessibilityBridge$SemanticsNode,boolean) -> access$3902
    boolean access$4002(io.flutter.view.AccessibilityBridge$SemanticsNode,boolean) -> access$4002
    void access$4100(io.flutter.view.AccessibilityBridge$SemanticsNode,float[],java.util.Set,boolean) -> access$4100
    void access$4200(io.flutter.view.AccessibilityBridge$SemanticsNode,java.util.List) -> access$4200
    boolean access$4300(io.flutter.view.AccessibilityBridge$SemanticsNode) -> access$4300
    float access$4400(io.flutter.view.AccessibilityBridge$SemanticsNode) -> access$4400
    float access$4500(io.flutter.view.AccessibilityBridge$SemanticsNode) -> access$4500
    float access$4600(io.flutter.view.AccessibilityBridge$SemanticsNode) -> access$4600
    boolean access$4700(io.flutter.view.AccessibilityBridge$SemanticsNode,io.flutter.view.AccessibilityBridge$Action) -> access$4700
    int access$4800(io.flutter.view.AccessibilityBridge$SemanticsNode) -> access$4800
    java.util.List access$4900(io.flutter.view.AccessibilityBridge$SemanticsNode) -> access$4900
    java.lang.String access$5000(io.flutter.view.AccessibilityBridge$SemanticsNode) -> access$5000
    java.lang.String access$5100(io.flutter.view.AccessibilityBridge$SemanticsNode) -> access$5100
    boolean access$5200(io.flutter.view.AccessibilityBridge$SemanticsNode,io.flutter.view.AccessibilityBridge$Flag) -> access$5200
    boolean access$5300(io.flutter.view.AccessibilityBridge$SemanticsNode) -> access$5300
    java.lang.String access$5400(io.flutter.view.AccessibilityBridge$SemanticsNode) -> access$5400
    java.lang.String access$3100(io.flutter.view.AccessibilityBridge$SemanticsNode) -> access$3100
    int access$5500(io.flutter.view.AccessibilityBridge$SemanticsNode) -> access$5500
    int access$5600(io.flutter.view.AccessibilityBridge$SemanticsNode) -> access$5600
    java.lang.String access$5700(io.flutter.view.AccessibilityBridge$SemanticsNode) -> access$5700
    io.flutter.view.AccessibilityBridge$SemanticsNode access$2202(io.flutter.view.AccessibilityBridge$SemanticsNode,io.flutter.view.AccessibilityBridge$SemanticsNode) -> access$2202
    void <clinit>() -> <clinit>
io.flutter.view.AccessibilityBridge$TextDirection -> io.flutter.view.AccessibilityBridge$TextDirection:
    io.flutter.view.AccessibilityBridge$TextDirection UNKNOWN -> UNKNOWN
    io.flutter.view.AccessibilityBridge$TextDirection LTR -> LTR
    io.flutter.view.AccessibilityBridge$TextDirection RTL -> RTL
    io.flutter.view.AccessibilityBridge$TextDirection[] $VALUES -> $VALUES
    io.flutter.view.AccessibilityBridge$TextDirection[] values() -> values
    io.flutter.view.AccessibilityBridge$TextDirection valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    io.flutter.view.AccessibilityBridge$TextDirection fromInt(int) -> fromInt
    void <clinit>() -> <clinit>
io.flutter.view.AccessibilityViewEmbedder -> io.flutter.view.AccessibilityViewEmbedder:
    java.lang.String TAG -> TAG
    io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors reflectionAccessors -> reflectionAccessors
    android.view.View rootAccessibilityView -> rootAccessibilityView
    android.util.SparseArray flutterIdToOrigin -> flutterIdToOrigin
    java.util.Map originToFlutterId -> originToFlutterId
    java.util.Map embeddedViewToDisplayBounds -> embeddedViewToDisplayBounds
    int nextFlutterId -> nextFlutterId
    void <init>(android.view.View,int) -> <init>
    android.view.accessibility.AccessibilityNodeInfo getRootNode(android.view.View,int,android.graphics.Rect) -> getRootNode
    android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int) -> createAccessibilityNodeInfo
    android.view.accessibility.AccessibilityNodeInfo convertToFlutterNode(android.view.accessibility.AccessibilityNodeInfo,int,android.view.View) -> convertToFlutterNode
    void setFlutterNodeParent(android.view.accessibility.AccessibilityNodeInfo,android.view.View,android.view.accessibility.AccessibilityNodeInfo) -> setFlutterNodeParent
    void addChildrenToFlutterNode(android.view.accessibility.AccessibilityNodeInfo,android.view.View,android.view.accessibility.AccessibilityNodeInfo) -> addChildrenToFlutterNode
    void cacheVirtualIdMappings(android.view.View,int,int) -> cacheVirtualIdMappings
    void setFlutterNodesTranslateBounds(android.view.accessibility.AccessibilityNodeInfo,android.graphics.Rect,android.view.accessibility.AccessibilityNodeInfo) -> setFlutterNodesTranslateBounds
    void copyAccessibilityFields(android.view.accessibility.AccessibilityNodeInfo,android.view.accessibility.AccessibilityNodeInfo) -> copyAccessibilityFields
    boolean requestSendAccessibilityEvent(android.view.View,android.view.View,android.view.accessibility.AccessibilityEvent) -> requestSendAccessibilityEvent
    boolean performAction(int,int,android.os.Bundle) -> performAction
    java.lang.Integer getRecordFlutterId(android.view.View,android.view.accessibility.AccessibilityRecord) -> getRecordFlutterId
    boolean onAccessibilityHoverEvent(int,android.view.MotionEvent) -> onAccessibilityHoverEvent
io.flutter.view.AccessibilityViewEmbedder$1 -> io.flutter.view.AccessibilityViewEmbedder$1:
io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors -> io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors:
    java.lang.reflect.Method getSourceNodeId -> getSourceNodeId
    java.lang.reflect.Method getParentNodeId -> getParentNodeId
    java.lang.reflect.Method getRecordSourceNodeId -> getRecordSourceNodeId
    java.lang.reflect.Method getChildId -> getChildId
    void <init>() -> <init>
    int getVirtualNodeId(long) -> getVirtualNodeId
    java.lang.Long getSourceNodeId(android.view.accessibility.AccessibilityNodeInfo) -> getSourceNodeId
    java.lang.Long getChildId(android.view.accessibility.AccessibilityNodeInfo,int) -> getChildId
    java.lang.Long getParentNodeId(android.view.accessibility.AccessibilityNodeInfo) -> getParentNodeId
    java.lang.Long getRecordSourceNodeId(android.view.accessibility.AccessibilityRecord) -> getRecordSourceNodeId
    void <init>(io.flutter.view.AccessibilityViewEmbedder$1) -> <init>
    java.lang.Long access$100(io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors,android.view.accessibility.AccessibilityNodeInfo) -> access$100
    int access$200(long) -> access$200
    java.lang.Long access$300(io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors,android.view.accessibility.AccessibilityNodeInfo) -> access$300
    java.lang.Long access$500(io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors,android.view.accessibility.AccessibilityNodeInfo,int) -> access$500
    java.lang.Long access$600(io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors,android.view.accessibility.AccessibilityRecord) -> access$600
io.flutter.view.AccessibilityViewEmbedder$ViewAndId -> io.flutter.view.AccessibilityViewEmbedder$ViewAndId:
    android.view.View view -> view
    int id -> id
    void <init>(android.view.View,int) -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void <init>(android.view.View,int,io.flutter.view.AccessibilityViewEmbedder$1) -> <init>
io.flutter.view.FlutterCallbackInformation -> io.flutter.view.FlutterCallbackInformation:
    java.lang.String callbackName -> callbackName
    java.lang.String callbackClassName -> callbackClassName
    java.lang.String callbackLibraryPath -> callbackLibraryPath
    io.flutter.view.FlutterCallbackInformation lookupCallbackInformation(long) -> lookupCallbackInformation
    void <init>(java.lang.String,java.lang.String,java.lang.String) -> <init>
    io.flutter.view.FlutterCallbackInformation nativeLookupCallbackInformation(long) -> nativeLookupCallbackInformation
io.flutter.view.FlutterMain -> io.flutter.view.FlutterMain:
    java.lang.String TAG -> TAG
    java.lang.String AOT_SHARED_LIBRARY_PATH -> AOT_SHARED_LIBRARY_PATH
    java.lang.String AOT_SNAPSHOT_PATH_KEY -> AOT_SNAPSHOT_PATH_KEY
    java.lang.String AOT_VM_SNAPSHOT_DATA_KEY -> AOT_VM_SNAPSHOT_DATA_KEY
    java.lang.String AOT_VM_SNAPSHOT_INSTR_KEY -> AOT_VM_SNAPSHOT_INSTR_KEY
    java.lang.String AOT_ISOLATE_SNAPSHOT_DATA_KEY -> AOT_ISOLATE_SNAPSHOT_DATA_KEY
    java.lang.String AOT_ISOLATE_SNAPSHOT_INSTR_KEY -> AOT_ISOLATE_SNAPSHOT_INSTR_KEY
    java.lang.String FLX_KEY -> FLX_KEY
    java.lang.String FLUTTER_ASSETS_DIR_KEY -> FLUTTER_ASSETS_DIR_KEY
    java.lang.String PUBLIC_AOT_AOT_SHARED_LIBRARY_PATH -> PUBLIC_AOT_AOT_SHARED_LIBRARY_PATH
    java.lang.String PUBLIC_AOT_VM_SNAPSHOT_DATA_KEY -> PUBLIC_AOT_VM_SNAPSHOT_DATA_KEY
    java.lang.String PUBLIC_AOT_VM_SNAPSHOT_INSTR_KEY -> PUBLIC_AOT_VM_SNAPSHOT_INSTR_KEY
    java.lang.String PUBLIC_AOT_ISOLATE_SNAPSHOT_DATA_KEY -> PUBLIC_AOT_ISOLATE_SNAPSHOT_DATA_KEY
    java.lang.String PUBLIC_AOT_ISOLATE_SNAPSHOT_INSTR_KEY -> PUBLIC_AOT_ISOLATE_SNAPSHOT_INSTR_KEY
    java.lang.String PUBLIC_FLX_KEY -> PUBLIC_FLX_KEY
    java.lang.String PUBLIC_FLUTTER_ASSETS_DIR_KEY -> PUBLIC_FLUTTER_ASSETS_DIR_KEY
    java.lang.String DEFAULT_AOT_SHARED_LIBRARY_PATH -> DEFAULT_AOT_SHARED_LIBRARY_PATH
    java.lang.String DEFAULT_AOT_VM_SNAPSHOT_DATA -> DEFAULT_AOT_VM_SNAPSHOT_DATA
    java.lang.String DEFAULT_AOT_VM_SNAPSHOT_INSTR -> DEFAULT_AOT_VM_SNAPSHOT_INSTR
    java.lang.String DEFAULT_AOT_ISOLATE_SNAPSHOT_DATA -> DEFAULT_AOT_ISOLATE_SNAPSHOT_DATA
    java.lang.String DEFAULT_AOT_ISOLATE_SNAPSHOT_INSTR -> DEFAULT_AOT_ISOLATE_SNAPSHOT_INSTR
    java.lang.String DEFAULT_FLX -> DEFAULT_FLX
    java.lang.String DEFAULT_LIBRARY -> DEFAULT_LIBRARY
    java.lang.String DEFAULT_KERNEL_BLOB -> DEFAULT_KERNEL_BLOB
    java.lang.String DEFAULT_FLUTTER_ASSETS_DIR -> DEFAULT_FLUTTER_ASSETS_DIR
    java.lang.String sAotSharedLibraryPath -> sAotSharedLibraryPath
    java.lang.String sAotVmSnapshotData -> sAotVmSnapshotData
    java.lang.String sAotVmSnapshotInstr -> sAotVmSnapshotInstr
    java.lang.String sAotIsolateSnapshotData -> sAotIsolateSnapshotData
    java.lang.String sAotIsolateSnapshotInstr -> sAotIsolateSnapshotInstr
    java.lang.String sFlx -> sFlx
    java.lang.String sFlutterAssetsDir -> sFlutterAssetsDir
    boolean sInitialized -> sInitialized
    io.flutter.view.ResourceUpdater sResourceUpdater -> sResourceUpdater
    io.flutter.view.ResourceExtractor sResourceExtractor -> sResourceExtractor
    boolean sIsPrecompiledAsBlobs -> sIsPrecompiledAsBlobs
    boolean sIsPrecompiledAsSharedLibrary -> sIsPrecompiledAsSharedLibrary
    io.flutter.view.FlutterMain$Settings sSettings -> sSettings
    void <init>() -> <init>
    java.lang.String fromFlutterAssets(java.lang.String) -> fromFlutterAssets
    void startInitialization(android.content.Context) -> startInitialization
    void startInitialization(android.content.Context,io.flutter.view.FlutterMain$Settings) -> startInitialization
    void ensureInitializationComplete(android.content.Context,java.lang.String[]) -> ensureInitializationComplete
    void ensureInitializationCompleteAsync(android.content.Context,java.lang.String[],android.os.Handler,java.lang.Runnable) -> ensureInitializationCompleteAsync
    void nativeInit(android.content.Context,java.lang.String[],java.lang.String,java.lang.String,java.lang.String) -> nativeInit
    void nativeRecordStartTimestamp(long) -> nativeRecordStartTimestamp
    void initConfig(android.content.Context) -> initConfig
    void initResources(android.content.Context) -> initResources
    void onResume(android.content.Context) -> onResume
    java.util.Set listAssets(android.content.Context,java.lang.String) -> listAssets
    void initAot(android.content.Context) -> initAot
    boolean isRunningPrecompiledCode() -> isRunningPrecompiledCode
    java.lang.String findAppBundlePath(android.content.Context) -> findAppBundlePath
    io.flutter.view.ResourceUpdater getResourceUpdater() -> getResourceUpdater
    java.lang.String getLookupKeyForAsset(java.lang.String) -> getLookupKeyForAsset
    java.lang.String getLookupKeyForAsset(java.lang.String,java.lang.String) -> getLookupKeyForAsset
    io.flutter.view.ResourceExtractor access$000() -> access$000
    void <clinit>() -> <clinit>
io.flutter.view.FlutterMain$1 -> io.flutter.view.FlutterMain$1:
    android.content.Context val$applicationContext -> val$applicationContext
    java.lang.String[] val$args -> val$args
    android.os.Handler val$callbackHandler -> val$callbackHandler
    java.lang.Runnable val$callback -> val$callback
    void <init>(android.content.Context,java.lang.String[],android.os.Handler,java.lang.Runnable) -> <init>
    void run() -> run
io.flutter.view.FlutterMain$1$1 -> io.flutter.view.FlutterMain$1$1:
    io.flutter.view.FlutterMain$1 this$0 -> this$0
    void <init>(io.flutter.view.FlutterMain$1) -> <init>
    void run() -> run
io.flutter.view.FlutterMain$ImmutableSetBuilder -> io.flutter.view.FlutterMain$ImmutableSetBuilder:
    java.util.HashSet set -> set
    io.flutter.view.FlutterMain$ImmutableSetBuilder newInstance() -> newInstance
    void <init>() -> <init>
    io.flutter.view.FlutterMain$ImmutableSetBuilder add(java.lang.Object) -> add
    io.flutter.view.FlutterMain$ImmutableSetBuilder add(java.lang.Object[]) -> add
    java.util.Set build() -> build
io.flutter.view.FlutterMain$Settings -> io.flutter.view.FlutterMain$Settings:
    java.lang.String logTag -> logTag
    void <init>() -> <init>
    java.lang.String getLogTag() -> getLogTag
    void setLogTag(java.lang.String) -> setLogTag
io.flutter.view.FlutterNativeView -> io.flutter.view.FlutterNativeView:
    java.lang.String TAG -> TAG
    io.flutter.app.FlutterPluginRegistry mPluginRegistry -> mPluginRegistry
    io.flutter.embedding.engine.dart.DartExecutor dartExecutor -> dartExecutor
    io.flutter.view.FlutterView mFlutterView -> mFlutterView
    io.flutter.embedding.engine.FlutterJNI mFlutterJNI -> mFlutterJNI
    android.content.Context mContext -> mContext
    boolean applicationIsRunning -> applicationIsRunning
    void <init>(android.content.Context) -> <init>
    void <init>(android.content.Context,boolean) -> <init>
    void detachFromFlutterView() -> detachFromFlutterView
    void destroy() -> destroy
    io.flutter.embedding.engine.dart.DartExecutor getDartExecutor() -> getDartExecutor
    io.flutter.app.FlutterPluginRegistry getPluginRegistry() -> getPluginRegistry
    void attachViewAndActivity(io.flutter.view.FlutterView,android.app.Activity) -> attachViewAndActivity
    boolean isAttached() -> isAttached
    void assertAttached() -> assertAttached
    void runFromBundle(io.flutter.view.FlutterRunArguments) -> runFromBundle
    void runFromBundle(java.lang.String,java.lang.String,java.lang.String,boolean) -> runFromBundle
    void runFromBundleInternal(java.lang.String[],java.lang.String,java.lang.String) -> runFromBundleInternal
    boolean isApplicationRunning() -> isApplicationRunning
    java.lang.String getObservatoryUri() -> getObservatoryUri
    void send(java.lang.String,java.nio.ByteBuffer) -> send
    void send(java.lang.String,java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply) -> send
    void setMessageHandler(java.lang.String,io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler) -> setMessageHandler
    io.flutter.embedding.engine.FlutterJNI getFlutterJNI() -> getFlutterJNI
    void attach(io.flutter.view.FlutterNativeView,boolean) -> attach
    io.flutter.view.FlutterView access$200(io.flutter.view.FlutterNativeView) -> access$200
    io.flutter.app.FlutterPluginRegistry access$300(io.flutter.view.FlutterNativeView) -> access$300
io.flutter.view.FlutterNativeView$1 -> io.flutter.view.FlutterNativeView$1:
io.flutter.view.FlutterNativeView$EngineLifecycleListenerImpl -> io.flutter.view.FlutterNativeView$EngineLifecycleListenerImpl:
    io.flutter.view.FlutterNativeView this$0 -> this$0
    void <init>(io.flutter.view.FlutterNativeView) -> <init>
    void onPreEngineRestart() -> onPreEngineRestart
    void <init>(io.flutter.view.FlutterNativeView,io.flutter.view.FlutterNativeView$1) -> <init>
io.flutter.view.FlutterNativeView$RenderSurfaceImpl -> io.flutter.view.FlutterNativeView$RenderSurfaceImpl:
    io.flutter.view.FlutterNativeView this$0 -> this$0
    void <init>(io.flutter.view.FlutterNativeView) -> <init>
    void attachToRenderer(io.flutter.embedding.engine.renderer.FlutterRenderer) -> attachToRenderer
    void detachFromRenderer() -> detachFromRenderer
    void updateSemantics(java.nio.ByteBuffer,java.lang.String[]) -> updateSemantics
    void updateCustomAccessibilityActions(java.nio.ByteBuffer,java.lang.String[]) -> updateCustomAccessibilityActions
    void onFirstFrameRendered() -> onFirstFrameRendered
    void addOnFirstFrameRenderedListener(io.flutter.embedding.engine.renderer.OnFirstFrameRenderedListener) -> addOnFirstFrameRenderedListener
    void removeOnFirstFrameRenderedListener(io.flutter.embedding.engine.renderer.OnFirstFrameRenderedListener) -> removeOnFirstFrameRenderedListener
    void <init>(io.flutter.view.FlutterNativeView,io.flutter.view.FlutterNativeView$1) -> <init>
io.flutter.view.FlutterRunArguments -> io.flutter.view.FlutterRunArguments:
    java.lang.String[] bundlePaths -> bundlePaths
    java.lang.String bundlePath -> bundlePath
    java.lang.String entrypoint -> entrypoint
    java.lang.String libraryPath -> libraryPath
    java.lang.String defaultPath -> defaultPath
    void <init>() -> <init>
io.flutter.view.FlutterView -> io.flutter.view.FlutterView:
    java.lang.String TAG -> TAG
    io.flutter.embedding.engine.dart.DartExecutor dartExecutor -> dartExecutor
    io.flutter.embedding.engine.renderer.FlutterRenderer flutterRenderer -> flutterRenderer
    io.flutter.embedding.engine.systemchannels.NavigationChannel navigationChannel -> navigationChannel
    io.flutter.embedding.engine.systemchannels.KeyEventChannel keyEventChannel -> keyEventChannel
    io.flutter.embedding.engine.systemchannels.LifecycleChannel lifecycleChannel -> lifecycleChannel
    io.flutter.embedding.engine.systemchannels.LocalizationChannel localizationChannel -> localizationChannel
    io.flutter.embedding.engine.systemchannels.PlatformChannel platformChannel -> platformChannel
    io.flutter.embedding.engine.systemchannels.SettingsChannel settingsChannel -> settingsChannel
    io.flutter.embedding.engine.systemchannels.SystemChannel systemChannel -> systemChannel
    android.view.inputmethod.InputMethodManager mImm -> mImm
    io.flutter.plugin.editing.TextInputPlugin mTextInputPlugin -> mTextInputPlugin
    io.flutter.embedding.android.AndroidKeyProcessor androidKeyProcessor -> androidKeyProcessor
    io.flutter.embedding.android.AndroidTouchProcessor androidTouchProcessor -> androidTouchProcessor
    io.flutter.view.AccessibilityBridge mAccessibilityNodeProvider -> mAccessibilityNodeProvider
    android.view.SurfaceHolder$Callback mSurfaceCallback -> mSurfaceCallback
    io.flutter.view.FlutterView$ViewportMetrics mMetrics -> mMetrics
    java.util.List mActivityLifecycleListeners -> mActivityLifecycleListeners
    java.util.List mFirstFrameListeners -> mFirstFrameListeners
    java.util.concurrent.atomic.AtomicLong nextTextureId -> nextTextureId
    io.flutter.view.FlutterNativeView mNativeView -> mNativeView
    boolean mIsSoftwareRenderingEnabled -> mIsSoftwareRenderingEnabled
    io.flutter.view.AccessibilityBridge$OnAccessibilityChangeListener onAccessibilityChangeListener -> onAccessibilityChangeListener
    void <init>(android.content.Context) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet,io.flutter.view.FlutterNativeView) -> <init>
    android.app.Activity getActivity(android.content.Context) -> getActivity
    boolean onKeyUp(int,android.view.KeyEvent) -> onKeyUp
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    io.flutter.view.FlutterNativeView getFlutterNativeView() -> getFlutterNativeView
    io.flutter.app.FlutterPluginRegistry getPluginRegistry() -> getPluginRegistry
    java.lang.String getLookupKeyForAsset(java.lang.String) -> getLookupKeyForAsset
    java.lang.String getLookupKeyForAsset(java.lang.String,java.lang.String) -> getLookupKeyForAsset
    void addActivityLifecycleListener(io.flutter.plugin.common.ActivityLifecycleListener) -> addActivityLifecycleListener
    void onStart() -> onStart
    void onPause() -> onPause
    void onPostResume() -> onPostResume
    void onStop() -> onStop
    void onMemoryPressure() -> onMemoryPressure
    void addFirstFrameListener(io.flutter.view.FlutterView$FirstFrameListener) -> addFirstFrameListener
    void removeFirstFrameListener(io.flutter.view.FlutterView$FirstFrameListener) -> removeFirstFrameListener
    void enableTransparentBackground() -> enableTransparentBackground
    void disableTransparentBackground() -> disableTransparentBackground
    void setInitialRoute(java.lang.String) -> setInitialRoute
    void pushRoute(java.lang.String) -> pushRoute
    void popRoute() -> popRoute
    void sendUserPlatformSettingsToDart() -> sendUserPlatformSettingsToDart
    void sendLocalesToDart(android.content.res.Configuration) -> sendLocalesToDart
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    float getDevicePixelRatio() -> getDevicePixelRatio
    io.flutter.view.FlutterNativeView detach() -> detach
    void destroy() -> destroy
    android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo) -> onCreateInputConnection
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean onHoverEvent(android.view.MotionEvent) -> onHoverEvent
    boolean onGenericMotionEvent(android.view.MotionEvent) -> onGenericMotionEvent
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    io.flutter.view.FlutterView$ZeroSides calculateShouldZeroSides() -> calculateShouldZeroSides
    int calculateBottomKeyboardInset(android.view.WindowInsets) -> calculateBottomKeyboardInset
    android.view.WindowInsets onApplyWindowInsets(android.view.WindowInsets) -> onApplyWindowInsets
    boolean fitSystemWindows(android.graphics.Rect) -> fitSystemWindows
    boolean isAttached() -> isAttached
    void assertAttached() -> assertAttached
    void preRun() -> preRun
    void resetAccessibilityTree() -> resetAccessibilityTree
    void postRun() -> postRun
    void runFromBundle(io.flutter.view.FlutterRunArguments) -> runFromBundle
    void runFromBundle(java.lang.String,java.lang.String) -> runFromBundle
    void runFromBundle(java.lang.String,java.lang.String,java.lang.String) -> runFromBundle
    void runFromBundle(java.lang.String,java.lang.String,java.lang.String,boolean) -> runFromBundle
    android.graphics.Bitmap getBitmap() -> getBitmap
    void updateViewportMetrics() -> updateViewportMetrics
    void updateSemantics(java.nio.ByteBuffer,java.lang.String[]) -> updateSemantics
    void updateCustomAccessibilityActions(java.nio.ByteBuffer,java.lang.String[]) -> updateCustomAccessibilityActions
    void onFirstFrame() -> onFirstFrame
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    void resetWillNotDraw(boolean,boolean) -> resetWillNotDraw
    android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider() -> getAccessibilityNodeProvider
    void send(java.lang.String,java.nio.ByteBuffer) -> send
    void send(java.lang.String,java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply) -> send
    void setMessageHandler(java.lang.String,io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler) -> setMessageHandler
    io.flutter.view.TextureRegistry$SurfaceTextureEntry createSurfaceTexture() -> createSurfaceTexture
    void access$000(io.flutter.view.FlutterView,boolean,boolean) -> access$000
    io.flutter.view.FlutterNativeView access$100(io.flutter.view.FlutterView) -> access$100
io.flutter.view.FlutterView$1 -> io.flutter.view.FlutterView$1:
    io.flutter.view.FlutterView this$0 -> this$0
    void <init>(io.flutter.view.FlutterView) -> <init>
    void onAccessibilityChanged(boolean,boolean) -> onAccessibilityChanged
io.flutter.view.FlutterView$2 -> io.flutter.view.FlutterView$2:
    io.flutter.view.FlutterView this$0 -> this$0
    void <init>(io.flutter.view.FlutterView) -> <init>
    void surfaceCreated(android.view.SurfaceHolder) -> surfaceCreated
    void surfaceChanged(android.view.SurfaceHolder,int,int,int) -> surfaceChanged
    void surfaceDestroyed(android.view.SurfaceHolder) -> surfaceDestroyed
io.flutter.view.FlutterView$FirstFrameListener -> io.flutter.view.FlutterView$FirstFrameListener:
    void onFirstFrame() -> onFirstFrame
io.flutter.view.FlutterView$Provider -> io.flutter.view.FlutterView$Provider:
    io.flutter.view.FlutterView getFlutterView() -> getFlutterView
io.flutter.view.FlutterView$SurfaceTextureRegistryEntry -> io.flutter.view.FlutterView$SurfaceTextureRegistryEntry:
    long id -> id
    android.graphics.SurfaceTexture surfaceTexture -> surfaceTexture
    boolean released -> released
    android.graphics.SurfaceTexture$OnFrameAvailableListener onFrameListener -> onFrameListener
    io.flutter.view.FlutterView this$0 -> this$0
    void <init>(io.flutter.view.FlutterView,long,android.graphics.SurfaceTexture) -> <init>
    android.graphics.SurfaceTexture surfaceTexture() -> surfaceTexture
    long id() -> id
    void release() -> release
    boolean access$200(io.flutter.view.FlutterView$SurfaceTextureRegistryEntry) -> access$200
    long access$300(io.flutter.view.FlutterView$SurfaceTextureRegistryEntry) -> access$300
io.flutter.view.FlutterView$SurfaceTextureRegistryEntry$1 -> io.flutter.view.FlutterView$SurfaceTextureRegistryEntry$1:
    io.flutter.view.FlutterView$SurfaceTextureRegistryEntry this$1 -> this$1
    void <init>(io.flutter.view.FlutterView$SurfaceTextureRegistryEntry) -> <init>
    void onFrameAvailable(android.graphics.SurfaceTexture) -> onFrameAvailable
io.flutter.view.FlutterView$ViewportMetrics -> io.flutter.view.FlutterView$ViewportMetrics:
    float devicePixelRatio -> devicePixelRatio
    int physicalWidth -> physicalWidth
    int physicalHeight -> physicalHeight
    int physicalPaddingTop -> physicalPaddingTop
    int physicalPaddingRight -> physicalPaddingRight
    int physicalPaddingBottom -> physicalPaddingBottom
    int physicalPaddingLeft -> physicalPaddingLeft
    int physicalViewInsetTop -> physicalViewInsetTop
    int physicalViewInsetRight -> physicalViewInsetRight
    int physicalViewInsetBottom -> physicalViewInsetBottom
    int physicalViewInsetLeft -> physicalViewInsetLeft
    void <init>() -> <init>
io.flutter.view.FlutterView$ZeroSides -> io.flutter.view.FlutterView$ZeroSides:
    io.flutter.view.FlutterView$ZeroSides NONE -> NONE
    io.flutter.view.FlutterView$ZeroSides LEFT -> LEFT
    io.flutter.view.FlutterView$ZeroSides RIGHT -> RIGHT
    io.flutter.view.FlutterView$ZeroSides BOTH -> BOTH
    io.flutter.view.FlutterView$ZeroSides[] $VALUES -> $VALUES
    io.flutter.view.FlutterView$ZeroSides[] values() -> values
    io.flutter.view.FlutterView$ZeroSides valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
io.flutter.view.ResourceCleaner -> io.flutter.view.ResourceCleaner:
    java.lang.String TAG -> TAG
    long DELAY_MS -> DELAY_MS
    android.content.Context mContext -> mContext
    void <init>(android.content.Context) -> <init>
    void start() -> start
io.flutter.view.ResourceCleaner$1 -> io.flutter.view.ResourceCleaner$1:
    io.flutter.view.ResourceCleaner this$0 -> this$0
    void <init>(io.flutter.view.ResourceCleaner) -> <init>
    boolean accept(java.io.File,java.lang.String) -> accept
io.flutter.view.ResourceCleaner$2 -> io.flutter.view.ResourceCleaner$2:
    io.flutter.view.ResourceCleaner$CleanTask val$task -> val$task
    io.flutter.view.ResourceCleaner this$0 -> this$0
    void <init>(io.flutter.view.ResourceCleaner,io.flutter.view.ResourceCleaner$CleanTask) -> <init>
    void run() -> run
io.flutter.view.ResourceCleaner$CleanTask -> io.flutter.view.ResourceCleaner$CleanTask:
    java.io.File[] mFilesToDelete -> mFilesToDelete
    io.flutter.view.ResourceCleaner this$0 -> this$0
    void <init>(io.flutter.view.ResourceCleaner,java.io.File[]) -> <init>
    boolean hasFilesToDelete() -> hasFilesToDelete
    java.lang.Void doInBackground(java.lang.Void[]) -> doInBackground
    void deleteRecursively(java.io.File) -> deleteRecursively
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
io.flutter.view.ResourceExtractor -> io.flutter.view.ResourceExtractor:
    java.lang.String TAG -> TAG
    java.lang.String TIMESTAMP_PREFIX -> TIMESTAMP_PREFIX
    java.lang.String[] SUPPORTED_ABIS -> SUPPORTED_ABIS
    android.content.Context mContext -> mContext
    java.util.HashSet mResources -> mResources
    io.flutter.view.ResourceExtractor$ExtractTask mExtractTask -> mExtractTask
    boolean $assertionsDisabled -> $assertionsDisabled
    long getVersionCode(android.content.pm.PackageInfo) -> getVersionCode
    void <init>(android.content.Context) -> <init>
    io.flutter.view.ResourceExtractor addResource(java.lang.String) -> addResource
    io.flutter.view.ResourceExtractor addResources(java.util.Collection) -> addResources
    io.flutter.view.ResourceExtractor start() -> start
    void waitForCompletion() -> waitForCompletion
    java.lang.String[] getExistingTimestamps(java.io.File) -> getExistingTimestamps
    void deleteFiles() -> deleteFiles
    boolean extractAPK(java.io.File) -> extractAPK
    boolean extractUpdate(java.io.File) -> extractUpdate
    java.lang.String checkTimestamp(java.io.File) -> checkTimestamp
    void copy(java.io.InputStream,java.io.OutputStream) -> copy
    java.lang.String getAPKPath() -> getAPKPath
    java.lang.String[] getSupportedAbis() -> getSupportedAbis
    android.content.Context access$000(io.flutter.view.ResourceExtractor) -> access$000
    java.lang.String access$100(io.flutter.view.ResourceExtractor,java.io.File) -> access$100
    void access$200(io.flutter.view.ResourceExtractor) -> access$200
    boolean access$300(io.flutter.view.ResourceExtractor,java.io.File) -> access$300
    boolean access$400(io.flutter.view.ResourceExtractor,java.io.File) -> access$400
    void <clinit>() -> <clinit>
io.flutter.view.ResourceExtractor$1 -> io.flutter.view.ResourceExtractor$1:
    io.flutter.view.ResourceExtractor this$0 -> this$0
    void <init>(io.flutter.view.ResourceExtractor) -> <init>
    boolean accept(java.io.File,java.lang.String) -> accept
io.flutter.view.ResourceExtractor$ExtractTask -> io.flutter.view.ResourceExtractor$ExtractTask:
    io.flutter.view.ResourceExtractor this$0 -> this$0
    void <init>(io.flutter.view.ResourceExtractor) -> <init>
    java.lang.Void doInBackground(java.lang.Void[]) -> doInBackground
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
io.flutter.view.ResourcePaths -> io.flutter.view.ResourcePaths:
    java.lang.String TEMPORARY_RESOURCE_PREFIX -> TEMPORARY_RESOURCE_PREFIX
    void <init>() -> <init>
    java.io.File createTempFile(android.content.Context,java.lang.String) -> createTempFile
io.flutter.view.ResourceUpdater -> io.flutter.view.ResourceUpdater:
    java.lang.String TAG -> TAG
    int BUFFER_SIZE -> BUFFER_SIZE
    android.content.Context context -> context
    io.flutter.view.ResourceUpdater$DownloadTask downloadTask -> downloadTask
    java.util.concurrent.locks.Lock installationLock -> installationLock
    java.util.concurrent.locks.Lock getInstallationLock() -> getInstallationLock
    java.io.File getInstalledPatch() -> getInstalledPatch
    java.io.File getDownloadedPatch() -> getDownloadedPatch
    void <init>(android.content.Context) -> <init>
    java.lang.String getAPKVersion() -> getAPKVersion
    java.lang.String buildUpdateDownloadURL() -> buildUpdateDownloadURL
    io.flutter.view.ResourceUpdater$DownloadMode getDownloadMode() -> getDownloadMode
    io.flutter.view.ResourceUpdater$InstallMode getInstallMode() -> getInstallMode
    org.json.JSONObject readManifest(java.io.File) -> readManifest
    boolean validateManifest(org.json.JSONObject) -> validateManifest
    void startUpdateDownloadOnce() -> startUpdateDownloadOnce
    void waitForDownloadCompletion() -> waitForDownloadCompletion
    java.lang.String access$000(io.flutter.view.ResourceUpdater) -> access$000
    java.util.concurrent.locks.Lock access$100(io.flutter.view.ResourceUpdater) -> access$100
io.flutter.view.ResourceUpdater$1 -> io.flutter.view.ResourceUpdater$1:
io.flutter.view.ResourceUpdater$DownloadMode -> io.flutter.view.ResourceUpdater$DownloadMode:
    io.flutter.view.ResourceUpdater$DownloadMode ON_RESTART -> ON_RESTART
    io.flutter.view.ResourceUpdater$DownloadMode ON_RESUME -> ON_RESUME
    io.flutter.view.ResourceUpdater$DownloadMode[] $VALUES -> $VALUES
    io.flutter.view.ResourceUpdater$DownloadMode[] values() -> values
    io.flutter.view.ResourceUpdater$DownloadMode valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
io.flutter.view.ResourceUpdater$DownloadTask -> io.flutter.view.ResourceUpdater$DownloadTask:
    io.flutter.view.ResourceUpdater this$0 -> this$0
    void <init>(io.flutter.view.ResourceUpdater) -> <init>
    java.lang.Void doInBackground(java.lang.String[]) -> doInBackground
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
    void <init>(io.flutter.view.ResourceUpdater,io.flutter.view.ResourceUpdater$1) -> <init>
io.flutter.view.ResourceUpdater$InstallMode -> io.flutter.view.ResourceUpdater$InstallMode:
    io.flutter.view.ResourceUpdater$InstallMode ON_NEXT_RESTART -> ON_NEXT_RESTART
    io.flutter.view.ResourceUpdater$InstallMode IMMEDIATE -> IMMEDIATE
    io.flutter.view.ResourceUpdater$InstallMode[] $VALUES -> $VALUES
    io.flutter.view.ResourceUpdater$InstallMode[] values() -> values
    io.flutter.view.ResourceUpdater$InstallMode valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
io.flutter.view.TextureRegistry -> io.flutter.view.TextureRegistry:
    io.flutter.view.TextureRegistry$SurfaceTextureEntry createSurfaceTexture() -> createSurfaceTexture
io.flutter.view.TextureRegistry$SurfaceTextureEntry -> io.flutter.view.TextureRegistry$SurfaceTextureEntry:
    android.graphics.SurfaceTexture surfaceTexture() -> surfaceTexture
    long id() -> id
    void release() -> release
io.flutter.view.VsyncWaiter -> io.flutter.view.VsyncWaiter:
    long refreshPeriodNanos -> refreshPeriodNanos
    float refreshRateFPS -> refreshRateFPS
    void <init>() -> <init>
    void asyncWaitForVsync(long) -> asyncWaitForVsync
    void nativeOnVsync(long,long,long) -> nativeOnVsync
    void access$000(long,long,long) -> access$000
    void <clinit>() -> <clinit>
io.flutter.view.VsyncWaiter$1 -> io.flutter.view.VsyncWaiter$1:
    long val$cookie -> val$cookie
    void <init>(long) -> <init>
    void doFrame(long) -> doFrame
