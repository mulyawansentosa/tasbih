com.flazhost.tasbih.MainActivity
com.flazhost.tasbih.MainActivity: MainActivity()
com.flazhost.tasbih.R$drawable: int launch_background
com.flazhost.tasbih.R$mipmap: int ic_lancher
com.flazhost.tasbih.R$mipmap: int ic_launcher
com.flazhost.tasbih.R$style: int LaunchTheme
io.flutter.app.FlutterActivity
io.flutter.app.FlutterActivity: java.lang.String TAG
io.flutter.app.FlutterActivity: io.flutter.app.FlutterActivityDelegate delegate
io.flutter.app.FlutterActivity: io.flutter.app.FlutterActivityEvents eventDelegate
io.flutter.app.FlutterActivity: io.flutter.view.FlutterView$Provider viewProvider
io.flutter.app.FlutterActivity: io.flutter.plugin.common.PluginRegistry pluginRegistry
io.flutter.app.FlutterActivity: FlutterActivity()
io.flutter.app.FlutterActivity: io.flutter.view.FlutterView getFlutterView()
io.flutter.app.FlutterActivity: io.flutter.view.FlutterView createFlutterView(android.content.Context)
io.flutter.app.FlutterActivity: io.flutter.view.FlutterNativeView createFlutterNativeView()
io.flutter.app.FlutterActivity: boolean retainFlutterNativeView()
io.flutter.app.FlutterActivity: boolean hasPlugin(java.lang.String)
io.flutter.app.FlutterActivity: java.lang.Object valuePublishedByPlugin(java.lang.String)
io.flutter.app.FlutterActivity: io.flutter.plugin.common.PluginRegistry$Registrar registrarFor(java.lang.String)
io.flutter.app.FlutterActivity: void onCreate(android.os.Bundle)
io.flutter.app.FlutterActivity: void onStart()
io.flutter.app.FlutterActivity: void onResume()
io.flutter.app.FlutterActivity: void onDestroy()
io.flutter.app.FlutterActivity: void onBackPressed()
io.flutter.app.FlutterActivity: void onStop()
io.flutter.app.FlutterActivity: void onPause()
io.flutter.app.FlutterActivity: void onPostResume()
io.flutter.app.FlutterActivity: void onRequestPermissionsResult(int,java.lang.String[],int[])
io.flutter.app.FlutterActivity: void onActivityResult(int,int,android.content.Intent)
io.flutter.app.FlutterActivity: void onNewIntent(android.content.Intent)
io.flutter.app.FlutterActivity: void onUserLeaveHint()
io.flutter.app.FlutterActivity: void onTrimMemory(int)
io.flutter.app.FlutterActivity: void onLowMemory()
io.flutter.app.FlutterActivity: void onConfigurationChanged(android.content.res.Configuration)
io.flutter.app.FlutterActivityDelegate
io.flutter.app.FlutterActivityDelegate: java.lang.String SPLASH_SCREEN_META_DATA_KEY
io.flutter.app.FlutterActivityDelegate: java.lang.String TAG
io.flutter.app.FlutterActivityDelegate: android.view.WindowManager$LayoutParams matchParent
io.flutter.app.FlutterActivityDelegate: android.app.Activity activity
io.flutter.app.FlutterActivityDelegate: io.flutter.app.FlutterActivityDelegate$ViewFactory viewFactory
io.flutter.app.FlutterActivityDelegate: io.flutter.view.FlutterView flutterView
io.flutter.app.FlutterActivityDelegate: android.view.View launchView
io.flutter.app.FlutterActivityDelegate: FlutterActivityDelegate(android.app.Activity,io.flutter.app.FlutterActivityDelegate$ViewFactory)
io.flutter.app.FlutterActivityDelegate: io.flutter.view.FlutterView getFlutterView()
io.flutter.app.FlutterActivityDelegate: boolean hasPlugin(java.lang.String)
io.flutter.app.FlutterActivityDelegate: java.lang.Object valuePublishedByPlugin(java.lang.String)
io.flutter.app.FlutterActivityDelegate: io.flutter.plugin.common.PluginRegistry$Registrar registrarFor(java.lang.String)
io.flutter.app.FlutterActivityDelegate: boolean onRequestPermissionsResult(int,java.lang.String[],int[])
io.flutter.app.FlutterActivityDelegate: boolean onActivityResult(int,int,android.content.Intent)
io.flutter.app.FlutterActivityDelegate: void onCreate(android.os.Bundle)
io.flutter.app.FlutterActivityDelegate: void onNewIntent(android.content.Intent)
io.flutter.app.FlutterActivityDelegate: boolean isDebuggable()
io.flutter.app.FlutterActivityDelegate: void onPause()
io.flutter.app.FlutterActivityDelegate: void onStart()
io.flutter.app.FlutterActivityDelegate: void onResume()
io.flutter.app.FlutterActivityDelegate: void onStop()
io.flutter.app.FlutterActivityDelegate: void onPostResume()
io.flutter.app.FlutterActivityDelegate: void onDestroy()
io.flutter.app.FlutterActivityDelegate: boolean onBackPressed()
io.flutter.app.FlutterActivityDelegate: void onUserLeaveHint()
io.flutter.app.FlutterActivityDelegate: void onTrimMemory(int)
io.flutter.app.FlutterActivityDelegate: void onLowMemory()
io.flutter.app.FlutterActivityDelegate: void onConfigurationChanged(android.content.res.Configuration)
io.flutter.app.FlutterActivityDelegate: java.lang.String[] getArgsFromIntent(android.content.Intent)
io.flutter.app.FlutterActivityDelegate: boolean loadIntent(android.content.Intent)
io.flutter.app.FlutterActivityDelegate: void runBundle(java.lang.String)
io.flutter.app.FlutterActivityDelegate: android.view.View createLaunchView()
io.flutter.app.FlutterActivityDelegate: android.graphics.drawable.Drawable getLaunchScreenDrawableFromActivityTheme()
io.flutter.app.FlutterActivityDelegate: java.lang.Boolean showSplashScreenUntilFirstFrame()
io.flutter.app.FlutterActivityDelegate: void addLaunchView()
io.flutter.app.FlutterActivityDelegate: android.view.View access$000(io.flutter.app.FlutterActivityDelegate)
io.flutter.app.FlutterActivityDelegate: android.view.View access$002(io.flutter.app.FlutterActivityDelegate,android.view.View)
io.flutter.app.FlutterActivityDelegate: io.flutter.view.FlutterView access$100(io.flutter.app.FlutterActivityDelegate)
io.flutter.app.FlutterActivityDelegate: void <clinit>()
io.flutter.app.FlutterActivityDelegate$1
io.flutter.app.FlutterActivityDelegate$1: io.flutter.app.FlutterActivityDelegate this$0
io.flutter.app.FlutterActivityDelegate$1: FlutterActivityDelegate$1(io.flutter.app.FlutterActivityDelegate)
io.flutter.app.FlutterActivityDelegate$1: void onFirstFrame()
io.flutter.app.FlutterActivityDelegate$1$1
io.flutter.app.FlutterActivityDelegate$1$1: io.flutter.app.FlutterActivityDelegate$1 this$1
io.flutter.app.FlutterActivityDelegate$1$1: FlutterActivityDelegate$1$1(io.flutter.app.FlutterActivityDelegate$1)
io.flutter.app.FlutterActivityDelegate$1$1: void onAnimationEnd(android.animation.Animator)
io.flutter.app.FlutterActivityDelegate$ViewFactory
io.flutter.app.FlutterActivityDelegate$ViewFactory: io.flutter.view.FlutterView createFlutterView(android.content.Context)
io.flutter.app.FlutterActivityDelegate$ViewFactory: io.flutter.view.FlutterNativeView createFlutterNativeView()
io.flutter.app.FlutterActivityDelegate$ViewFactory: boolean retainFlutterNativeView()
io.flutter.app.FlutterActivityEvents
io.flutter.app.FlutterActivityEvents: void onCreate(android.os.Bundle)
io.flutter.app.FlutterActivityEvents: void onNewIntent(android.content.Intent)
io.flutter.app.FlutterActivityEvents: void onPause()
io.flutter.app.FlutterActivityEvents: void onStart()
io.flutter.app.FlutterActivityEvents: void onResume()
io.flutter.app.FlutterActivityEvents: void onPostResume()
io.flutter.app.FlutterActivityEvents: void onDestroy()
io.flutter.app.FlutterActivityEvents: void onStop()
io.flutter.app.FlutterActivityEvents: boolean onBackPressed()
io.flutter.app.FlutterActivityEvents: void onUserLeaveHint()
io.flutter.app.FlutterApplication
io.flutter.app.FlutterApplication: android.app.Activity mCurrentActivity
io.flutter.app.FlutterApplication: FlutterApplication()
io.flutter.app.FlutterApplication: void onCreate()
io.flutter.app.FlutterApplication: android.app.Activity getCurrentActivity()
io.flutter.app.FlutterApplication: void setCurrentActivity(android.app.Activity)
io.flutter.app.FlutterFragmentActivity
io.flutter.app.FlutterFragmentActivity: io.flutter.app.FlutterActivityDelegate delegate
io.flutter.app.FlutterFragmentActivity: io.flutter.app.FlutterActivityEvents eventDelegate
io.flutter.app.FlutterFragmentActivity: io.flutter.view.FlutterView$Provider viewProvider
io.flutter.app.FlutterFragmentActivity: io.flutter.plugin.common.PluginRegistry pluginRegistry
io.flutter.app.FlutterFragmentActivity: FlutterFragmentActivity()
io.flutter.app.FlutterFragmentActivity: io.flutter.view.FlutterView getFlutterView()
io.flutter.app.FlutterFragmentActivity: io.flutter.view.FlutterView createFlutterView(android.content.Context)
io.flutter.app.FlutterFragmentActivity: io.flutter.view.FlutterNativeView createFlutterNativeView()
io.flutter.app.FlutterFragmentActivity: boolean retainFlutterNativeView()
io.flutter.app.FlutterFragmentActivity: boolean hasPlugin(java.lang.String)
io.flutter.app.FlutterFragmentActivity: java.lang.Object valuePublishedByPlugin(java.lang.String)
io.flutter.app.FlutterFragmentActivity: io.flutter.plugin.common.PluginRegistry$Registrar registrarFor(java.lang.String)
io.flutter.app.FlutterFragmentActivity: void onCreate(android.os.Bundle)
io.flutter.app.FlutterFragmentActivity: void onDestroy()
io.flutter.app.FlutterFragmentActivity: void onBackPressed()
io.flutter.app.FlutterFragmentActivity: void onStart()
io.flutter.app.FlutterFragmentActivity: void onStop()
io.flutter.app.FlutterFragmentActivity: void onPause()
io.flutter.app.FlutterFragmentActivity: void onPostResume()
io.flutter.app.FlutterFragmentActivity: void onRequestPermissionsResult(int,java.lang.String[],int[])
io.flutter.app.FlutterFragmentActivity: void onActivityResult(int,int,android.content.Intent)
io.flutter.app.FlutterFragmentActivity: void onNewIntent(android.content.Intent)
io.flutter.app.FlutterFragmentActivity: void onUserLeaveHint()
io.flutter.app.FlutterFragmentActivity: void onTrimMemory(int)
io.flutter.app.FlutterFragmentActivity: void onLowMemory()
io.flutter.app.FlutterFragmentActivity: void onConfigurationChanged(android.content.res.Configuration)
io.flutter.app.FlutterPluginRegistry
io.flutter.app.FlutterPluginRegistry: java.lang.String TAG
io.flutter.app.FlutterPluginRegistry: android.app.Activity mActivity
io.flutter.app.FlutterPluginRegistry: android.content.Context mAppContext
io.flutter.app.FlutterPluginRegistry: io.flutter.view.FlutterNativeView mNativeView
io.flutter.app.FlutterPluginRegistry: io.flutter.view.FlutterView mFlutterView
io.flutter.app.FlutterPluginRegistry: io.flutter.plugin.platform.PlatformViewsController mPlatformViewsController
io.flutter.app.FlutterPluginRegistry: java.util.Map mPluginMap
io.flutter.app.FlutterPluginRegistry: java.util.List mRequestPermissionsResultListeners
io.flutter.app.FlutterPluginRegistry: java.util.List mActivityResultListeners
io.flutter.app.FlutterPluginRegistry: java.util.List mNewIntentListeners
io.flutter.app.FlutterPluginRegistry: java.util.List mUserLeaveHintListeners
io.flutter.app.FlutterPluginRegistry: java.util.List mViewDestroyListeners
io.flutter.app.FlutterPluginRegistry: FlutterPluginRegistry(io.flutter.view.FlutterNativeView,android.content.Context)
io.flutter.app.FlutterPluginRegistry: FlutterPluginRegistry(io.flutter.embedding.engine.FlutterEngine,android.content.Context)
io.flutter.app.FlutterPluginRegistry: boolean hasPlugin(java.lang.String)
io.flutter.app.FlutterPluginRegistry: java.lang.Object valuePublishedByPlugin(java.lang.String)
io.flutter.app.FlutterPluginRegistry: io.flutter.plugin.common.PluginRegistry$Registrar registrarFor(java.lang.String)
io.flutter.app.FlutterPluginRegistry: void attach(io.flutter.view.FlutterView,android.app.Activity)
io.flutter.app.FlutterPluginRegistry: void detach()
io.flutter.app.FlutterPluginRegistry: void onPreEngineRestart()
io.flutter.app.FlutterPluginRegistry: io.flutter.plugin.platform.PlatformViewsController getPlatformViewsController()
io.flutter.app.FlutterPluginRegistry: boolean onRequestPermissionsResult(int,java.lang.String[],int[])
io.flutter.app.FlutterPluginRegistry: boolean onActivityResult(int,int,android.content.Intent)
io.flutter.app.FlutterPluginRegistry: boolean onNewIntent(android.content.Intent)
io.flutter.app.FlutterPluginRegistry: void onUserLeaveHint()
io.flutter.app.FlutterPluginRegistry: boolean onViewDestroy(io.flutter.view.FlutterNativeView)
io.flutter.app.FlutterPluginRegistry: void destroy()
io.flutter.app.FlutterPluginRegistry: android.app.Activity access$000(io.flutter.app.FlutterPluginRegistry)
io.flutter.app.FlutterPluginRegistry: android.content.Context access$100(io.flutter.app.FlutterPluginRegistry)
io.flutter.app.FlutterPluginRegistry: io.flutter.view.FlutterNativeView access$200(io.flutter.app.FlutterPluginRegistry)
io.flutter.app.FlutterPluginRegistry: io.flutter.view.FlutterView access$300(io.flutter.app.FlutterPluginRegistry)
io.flutter.app.FlutterPluginRegistry: io.flutter.plugin.platform.PlatformViewsController access$400(io.flutter.app.FlutterPluginRegistry)
io.flutter.app.FlutterPluginRegistry: java.util.Map access$500(io.flutter.app.FlutterPluginRegistry)
io.flutter.app.FlutterPluginRegistry: java.util.List access$600(io.flutter.app.FlutterPluginRegistry)
io.flutter.app.FlutterPluginRegistry: java.util.List access$700(io.flutter.app.FlutterPluginRegistry)
io.flutter.app.FlutterPluginRegistry: java.util.List access$800(io.flutter.app.FlutterPluginRegistry)
io.flutter.app.FlutterPluginRegistry: java.util.List access$900(io.flutter.app.FlutterPluginRegistry)
io.flutter.app.FlutterPluginRegistry: java.util.List access$1000(io.flutter.app.FlutterPluginRegistry)
io.flutter.app.FlutterPluginRegistry$FlutterRegistrar
io.flutter.app.FlutterPluginRegistry$FlutterRegistrar: java.lang.String pluginKey
io.flutter.app.FlutterPluginRegistry$FlutterRegistrar: io.flutter.app.FlutterPluginRegistry this$0
io.flutter.app.FlutterPluginRegistry$FlutterRegistrar: FlutterPluginRegistry$FlutterRegistrar(io.flutter.app.FlutterPluginRegistry,java.lang.String)
io.flutter.app.FlutterPluginRegistry$FlutterRegistrar: android.app.Activity activity()
io.flutter.app.FlutterPluginRegistry$FlutterRegistrar: android.content.Context context()
io.flutter.app.FlutterPluginRegistry$FlutterRegistrar: android.content.Context activeContext()
io.flutter.app.FlutterPluginRegistry$FlutterRegistrar: io.flutter.plugin.common.BinaryMessenger messenger()
io.flutter.app.FlutterPluginRegistry$FlutterRegistrar: io.flutter.view.TextureRegistry textures()
io.flutter.app.FlutterPluginRegistry$FlutterRegistrar: io.flutter.plugin.platform.PlatformViewRegistry platformViewRegistry()
io.flutter.app.FlutterPluginRegistry$FlutterRegistrar: io.flutter.view.FlutterView view()
io.flutter.app.FlutterPluginRegistry$FlutterRegistrar: java.lang.String lookupKeyForAsset(java.lang.String)
io.flutter.app.FlutterPluginRegistry$FlutterRegistrar: java.lang.String lookupKeyForAsset(java.lang.String,java.lang.String)
io.flutter.app.FlutterPluginRegistry$FlutterRegistrar: io.flutter.plugin.common.PluginRegistry$Registrar publish(java.lang.Object)
io.flutter.app.FlutterPluginRegistry$FlutterRegistrar: io.flutter.plugin.common.PluginRegistry$Registrar addRequestPermissionsResultListener(io.flutter.plugin.common.PluginRegistry$RequestPermissionsResultListener)
io.flutter.app.FlutterPluginRegistry$FlutterRegistrar: io.flutter.plugin.common.PluginRegistry$Registrar addActivityResultListener(io.flutter.plugin.common.PluginRegistry$ActivityResultListener)
io.flutter.app.FlutterPluginRegistry$FlutterRegistrar: io.flutter.plugin.common.PluginRegistry$Registrar addNewIntentListener(io.flutter.plugin.common.PluginRegistry$NewIntentListener)
io.flutter.app.FlutterPluginRegistry$FlutterRegistrar: io.flutter.plugin.common.PluginRegistry$Registrar addUserLeaveHintListener(io.flutter.plugin.common.PluginRegistry$UserLeaveHintListener)
io.flutter.app.FlutterPluginRegistry$FlutterRegistrar: io.flutter.plugin.common.PluginRegistry$Registrar addViewDestroyListener(io.flutter.plugin.common.PluginRegistry$ViewDestroyListener)
io.flutter.embedding.android.AndroidKeyProcessor
io.flutter.embedding.android.AndroidKeyProcessor: io.flutter.embedding.engine.systemchannels.KeyEventChannel keyEventChannel
io.flutter.embedding.android.AndroidKeyProcessor: io.flutter.plugin.editing.TextInputPlugin textInputPlugin
io.flutter.embedding.android.AndroidKeyProcessor: int combiningCharacter
io.flutter.embedding.android.AndroidKeyProcessor: AndroidKeyProcessor(io.flutter.embedding.engine.systemchannels.KeyEventChannel,io.flutter.plugin.editing.TextInputPlugin)
io.flutter.embedding.android.AndroidKeyProcessor: void onKeyUp(android.view.KeyEvent)
io.flutter.embedding.android.AndroidKeyProcessor: void onKeyDown(android.view.KeyEvent)
io.flutter.embedding.android.AndroidKeyProcessor: java.lang.Character applyCombiningCharacterToBaseCharacter(int)
io.flutter.embedding.android.AndroidTouchProcessor
io.flutter.embedding.android.AndroidTouchProcessor: int POINTER_DATA_FIELD_COUNT
io.flutter.embedding.android.AndroidTouchProcessor: int BYTES_PER_FIELD
io.flutter.embedding.android.AndroidTouchProcessor: int POINTER_DATA_FLAG_BATCHED
io.flutter.embedding.android.AndroidTouchProcessor: io.flutter.embedding.engine.renderer.FlutterRenderer renderer
io.flutter.embedding.android.AndroidTouchProcessor: AndroidTouchProcessor(io.flutter.embedding.engine.renderer.FlutterRenderer)
io.flutter.embedding.android.AndroidTouchProcessor: boolean onTouchEvent(android.view.MotionEvent)
io.flutter.embedding.android.AndroidTouchProcessor: boolean onGenericMotionEvent(android.view.MotionEvent)
io.flutter.embedding.android.AndroidTouchProcessor: void addPointerForIndex(android.view.MotionEvent,int,int,int,java.nio.ByteBuffer)
io.flutter.embedding.android.AndroidTouchProcessor: int getPointerChangeForAction(int)
io.flutter.embedding.android.AndroidTouchProcessor: int getPointerDeviceTypeForToolType(int)
io.flutter.embedding.android.AndroidTouchProcessor$PointerChange
io.flutter.embedding.android.AndroidTouchProcessor$PointerChange: int CANCEL
io.flutter.embedding.android.AndroidTouchProcessor$PointerChange: int ADD
io.flutter.embedding.android.AndroidTouchProcessor$PointerChange: int REMOVE
io.flutter.embedding.android.AndroidTouchProcessor$PointerChange: int HOVER
io.flutter.embedding.android.AndroidTouchProcessor$PointerChange: int DOWN
io.flutter.embedding.android.AndroidTouchProcessor$PointerChange: int MOVE
io.flutter.embedding.android.AndroidTouchProcessor$PointerChange: int UP
io.flutter.embedding.android.AndroidTouchProcessor$PointerDeviceKind
io.flutter.embedding.android.AndroidTouchProcessor$PointerDeviceKind: int TOUCH
io.flutter.embedding.android.AndroidTouchProcessor$PointerDeviceKind: int MOUSE
io.flutter.embedding.android.AndroidTouchProcessor$PointerDeviceKind: int STYLUS
io.flutter.embedding.android.AndroidTouchProcessor$PointerDeviceKind: int INVERTED_STYLUS
io.flutter.embedding.android.AndroidTouchProcessor$PointerDeviceKind: int UNKNOWN
io.flutter.embedding.android.AndroidTouchProcessor$PointerSignalKind
io.flutter.embedding.android.AndroidTouchProcessor$PointerSignalKind: int NONE
io.flutter.embedding.android.AndroidTouchProcessor$PointerSignalKind: int SCROLL
io.flutter.embedding.android.AndroidTouchProcessor$PointerSignalKind: int UNKNOWN
io.flutter.embedding.android.FlutterActivity
io.flutter.embedding.android.FlutterActivity: java.lang.String TAG
io.flutter.embedding.android.FlutterActivity: java.lang.String DART_ENTRYPOINT_META_DATA_KEY
io.flutter.embedding.android.FlutterActivity: java.lang.String INITIAL_ROUTE_META_DATA_KEY
io.flutter.embedding.android.FlutterActivity: java.lang.String EXTRA_DART_ENTRYPOINT
io.flutter.embedding.android.FlutterActivity: java.lang.String EXTRA_INITIAL_ROUTE
io.flutter.embedding.android.FlutterActivity: java.lang.String DEFAULT_DART_ENTRYPOINT
io.flutter.embedding.android.FlutterActivity: java.lang.String DEFAULT_INITIAL_ROUTE
io.flutter.embedding.android.FlutterActivity: java.lang.String TAG_FLUTTER_FRAGMENT
io.flutter.embedding.android.FlutterActivity: int FRAGMENT_CONTAINER_ID
io.flutter.embedding.android.FlutterActivity: io.flutter.embedding.android.FlutterFragment flutterFragment
io.flutter.embedding.android.FlutterActivity: android.view.View coverView
io.flutter.embedding.android.FlutterActivity: FlutterActivity()
io.flutter.embedding.android.FlutterActivity: android.content.Intent createDefaultIntent(android.content.Context)
io.flutter.embedding.android.FlutterActivity: io.flutter.embedding.android.FlutterActivity$IntentBuilder createBuilder()
io.flutter.embedding.android.FlutterActivity: void onCreate(android.os.Bundle)
io.flutter.embedding.android.FlutterActivity: void showCoverView()
io.flutter.embedding.android.FlutterActivity: android.graphics.drawable.Drawable createCoverViewBackground()
io.flutter.embedding.android.FlutterActivity: void hideCoverView()
io.flutter.embedding.android.FlutterActivity: void configureStatusBarForFullscreenFlutterExperience()
io.flutter.embedding.android.FlutterActivity: android.view.View createFragmentContainer()
io.flutter.embedding.android.FlutterActivity: void ensureFlutterFragmentCreated()
io.flutter.embedding.android.FlutterActivity: io.flutter.embedding.android.FlutterFragment createFlutterFragment()
io.flutter.embedding.android.FlutterActivity: void onPostResume()
io.flutter.embedding.android.FlutterActivity: void onNewIntent(android.content.Intent)
io.flutter.embedding.android.FlutterActivity: void onBackPressed()
io.flutter.embedding.android.FlutterActivity: void onRequestPermissionsResult(int,java.lang.String[],int[])
io.flutter.embedding.android.FlutterActivity: void onUserLeaveHint()
io.flutter.embedding.android.FlutterActivity: void onTrimMemory(int)
io.flutter.embedding.android.FlutterActivity: io.flutter.embedding.engine.FlutterEngine getFlutterEngine()
io.flutter.embedding.android.FlutterActivity: java.lang.String getAppBundlePath()
io.flutter.embedding.android.FlutterActivity: java.lang.String getDartEntrypoint()
io.flutter.embedding.android.FlutterActivity: java.lang.String getInitialRoute()
io.flutter.embedding.android.FlutterActivity: boolean isDebuggable()
io.flutter.embedding.android.FlutterActivity: void onFirstFrameRendered()
io.flutter.embedding.android.FlutterActivity$IntentBuilder
io.flutter.embedding.android.FlutterActivity$IntentBuilder: java.lang.Class activityClass
io.flutter.embedding.android.FlutterActivity$IntentBuilder: java.lang.String dartEntrypoint
io.flutter.embedding.android.FlutterActivity$IntentBuilder: java.lang.String initialRoute
io.flutter.embedding.android.FlutterActivity$IntentBuilder: FlutterActivity$IntentBuilder(java.lang.Class)
io.flutter.embedding.android.FlutterActivity$IntentBuilder: io.flutter.embedding.android.FlutterActivity$IntentBuilder dartEntrypoint(java.lang.String)
io.flutter.embedding.android.FlutterActivity$IntentBuilder: io.flutter.embedding.android.FlutterActivity$IntentBuilder initialRoute(java.lang.String)
io.flutter.embedding.android.FlutterActivity$IntentBuilder: android.content.Intent build(android.content.Context)
io.flutter.embedding.android.FlutterFragment
io.flutter.embedding.android.FlutterFragment: java.lang.String TAG
io.flutter.embedding.android.FlutterFragment: java.lang.String ARG_DART_ENTRYPOINT
io.flutter.embedding.android.FlutterFragment: java.lang.String ARG_INITIAL_ROUTE
io.flutter.embedding.android.FlutterFragment: java.lang.String ARG_APP_BUNDLE_PATH
io.flutter.embedding.android.FlutterFragment: java.lang.String ARG_FLUTTER_INITIALIZATION_ARGS
io.flutter.embedding.android.FlutterFragment: java.lang.String ARG_FLUTTERVIEW_RENDER_MODE
io.flutter.embedding.android.FlutterFragment: java.lang.String ARG_FLUTTERVIEW_TRANSPARENCY_MODE
io.flutter.embedding.android.FlutterFragment: io.flutter.embedding.engine.FlutterEngine flutterEngine
io.flutter.embedding.android.FlutterFragment: boolean isFlutterEngineFromActivity
io.flutter.embedding.android.FlutterFragment: io.flutter.embedding.android.FlutterView flutterView
io.flutter.embedding.android.FlutterFragment: io.flutter.plugin.platform.PlatformPlugin platformPlugin
io.flutter.embedding.android.FlutterFragment: io.flutter.embedding.engine.renderer.OnFirstFrameRenderedListener onFirstFrameRenderedListener
io.flutter.embedding.android.FlutterFragment: FlutterFragment()
io.flutter.embedding.android.FlutterFragment: io.flutter.embedding.engine.FlutterEngine getFlutterEngine()
io.flutter.embedding.android.FlutterFragment: void onAttach(android.content.Context)
io.flutter.embedding.android.FlutterFragment: void initializeFlutter(android.content.Context)
io.flutter.embedding.android.FlutterFragment: void setupFlutterEngine()
io.flutter.embedding.android.FlutterFragment: io.flutter.embedding.engine.FlutterEngine createFlutterEngine(android.content.Context)
io.flutter.embedding.android.FlutterFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)
io.flutter.embedding.android.FlutterFragment: void doInitialFlutterViewRun()
io.flutter.embedding.android.FlutterFragment: java.lang.String getInitialRoute()
io.flutter.embedding.android.FlutterFragment: java.lang.String getAppBundlePath()
io.flutter.embedding.android.FlutterFragment: java.lang.String getDartEntrypointFunctionName()
io.flutter.embedding.android.FlutterFragment: io.flutter.embedding.android.FlutterView$RenderMode getRenderMode()
io.flutter.embedding.android.FlutterFragment: io.flutter.embedding.android.FlutterView$TransparencyMode getTransparencyMode()
io.flutter.embedding.android.FlutterFragment: void onResume()
io.flutter.embedding.android.FlutterFragment: void onPostResume()
io.flutter.embedding.android.FlutterFragment: void onPause()
io.flutter.embedding.android.FlutterFragment: void onStop()
io.flutter.embedding.android.FlutterFragment: void onDestroyView()
io.flutter.embedding.android.FlutterFragment: void onDetach()
io.flutter.embedding.android.FlutterFragment: boolean retainFlutterEngineAfterFragmentDestruction()
io.flutter.embedding.android.FlutterFragment: void onBackPressed()
io.flutter.embedding.android.FlutterFragment: void onRequestPermissionsResult(int,java.lang.String[],int[])
io.flutter.embedding.android.FlutterFragment: void onNewIntent(android.content.Intent)
io.flutter.embedding.android.FlutterFragment: void onActivityResult(int,int,android.content.Intent)
io.flutter.embedding.android.FlutterFragment: void onUserLeaveHint()
io.flutter.embedding.android.FlutterFragment: void onTrimMemory(int)
io.flutter.embedding.android.FlutterFragment: void onLowMemory()
io.flutter.embedding.android.FlutterFragment: android.content.Context getContextCompat()
io.flutter.embedding.android.FlutterFragment: void onFirstFrameRendered()
io.flutter.embedding.android.FlutterFragment: io.flutter.embedding.engine.FlutterEngine access$000(io.flutter.embedding.android.FlutterFragment)
io.flutter.embedding.android.FlutterFragment: io.flutter.embedding.android.FlutterView access$100(io.flutter.embedding.android.FlutterFragment)
io.flutter.embedding.android.FlutterFragment: void access$200(io.flutter.embedding.android.FlutterFragment)
io.flutter.embedding.android.FlutterFragment$1
io.flutter.embedding.android.FlutterFragment$1: io.flutter.embedding.android.FlutterFragment this$0
io.flutter.embedding.android.FlutterFragment$1: FlutterFragment$1(io.flutter.embedding.android.FlutterFragment)
io.flutter.embedding.android.FlutterFragment$1: void onFirstFrameRendered()
io.flutter.embedding.android.FlutterFragment$2
io.flutter.embedding.android.FlutterFragment$2: io.flutter.embedding.android.FlutterFragment this$0
io.flutter.embedding.android.FlutterFragment$2: FlutterFragment$2(io.flutter.embedding.android.FlutterFragment)
io.flutter.embedding.android.FlutterFragment$2: void run()
io.flutter.embedding.android.FlutterFragment$Builder
io.flutter.embedding.android.FlutterFragment$Builder: java.lang.Class fragmentClass
io.flutter.embedding.android.FlutterFragment$Builder: java.lang.String dartEntrypoint
io.flutter.embedding.android.FlutterFragment$Builder: java.lang.String initialRoute
io.flutter.embedding.android.FlutterFragment$Builder: java.lang.String appBundlePath
io.flutter.embedding.android.FlutterFragment$Builder: io.flutter.embedding.engine.FlutterShellArgs shellArgs
io.flutter.embedding.android.FlutterFragment$Builder: io.flutter.embedding.android.FlutterView$RenderMode renderMode
io.flutter.embedding.android.FlutterFragment$Builder: io.flutter.embedding.android.FlutterView$TransparencyMode transparencyMode
io.flutter.embedding.android.FlutterFragment$Builder: FlutterFragment$Builder()
io.flutter.embedding.android.FlutterFragment$Builder: FlutterFragment$Builder(java.lang.Class)
io.flutter.embedding.android.FlutterFragment$Builder: io.flutter.embedding.android.FlutterFragment$Builder dartEntrypoint(java.lang.String)
io.flutter.embedding.android.FlutterFragment$Builder: io.flutter.embedding.android.FlutterFragment$Builder initialRoute(java.lang.String)
io.flutter.embedding.android.FlutterFragment$Builder: io.flutter.embedding.android.FlutterFragment$Builder appBundlePath(java.lang.String)
io.flutter.embedding.android.FlutterFragment$Builder: io.flutter.embedding.android.FlutterFragment$Builder flutterShellArgs(io.flutter.embedding.engine.FlutterShellArgs)
io.flutter.embedding.android.FlutterFragment$Builder: io.flutter.embedding.android.FlutterFragment$Builder renderMode(io.flutter.embedding.android.FlutterView$RenderMode)
io.flutter.embedding.android.FlutterFragment$Builder: io.flutter.embedding.android.FlutterFragment$Builder transparencyMode(io.flutter.embedding.android.FlutterView$TransparencyMode)
io.flutter.embedding.android.FlutterFragment$Builder: android.os.Bundle createArgs()
io.flutter.embedding.android.FlutterFragment$Builder: io.flutter.embedding.android.FlutterFragment build()
io.flutter.embedding.android.FlutterFragment$FlutterEngineProvider
io.flutter.embedding.android.FlutterFragment$FlutterEngineProvider: io.flutter.embedding.engine.FlutterEngine getFlutterEngine(android.content.Context)
io.flutter.embedding.android.FlutterSurfaceView
io.flutter.embedding.android.FlutterSurfaceView: java.lang.String TAG
io.flutter.embedding.android.FlutterSurfaceView: boolean renderTransparently
io.flutter.embedding.android.FlutterSurfaceView: boolean isSurfaceAvailableForRendering
io.flutter.embedding.android.FlutterSurfaceView: boolean isAttachedToFlutterRenderer
io.flutter.embedding.android.FlutterSurfaceView: io.flutter.embedding.engine.renderer.FlutterRenderer flutterRenderer
io.flutter.embedding.android.FlutterSurfaceView: java.util.Set onFirstFrameRenderedListeners
io.flutter.embedding.android.FlutterSurfaceView: android.view.SurfaceHolder$Callback surfaceCallback
io.flutter.embedding.android.FlutterSurfaceView: FlutterSurfaceView(android.content.Context)
io.flutter.embedding.android.FlutterSurfaceView: FlutterSurfaceView(android.content.Context,boolean)
io.flutter.embedding.android.FlutterSurfaceView: FlutterSurfaceView(android.content.Context,android.util.AttributeSet)
io.flutter.embedding.android.FlutterSurfaceView: FlutterSurfaceView(android.content.Context,android.util.AttributeSet,boolean)
io.flutter.embedding.android.FlutterSurfaceView: void init()
io.flutter.embedding.android.FlutterSurfaceView: void attachToRenderer(io.flutter.embedding.engine.renderer.FlutterRenderer)
io.flutter.embedding.android.FlutterSurfaceView: void detachFromRenderer()
io.flutter.embedding.android.FlutterSurfaceView: void connectSurfaceToRenderer()
io.flutter.embedding.android.FlutterSurfaceView: void changeSurfaceSize(int,int)
io.flutter.embedding.android.FlutterSurfaceView: void disconnectSurfaceFromRenderer()
io.flutter.embedding.android.FlutterSurfaceView: void addOnFirstFrameRenderedListener(io.flutter.embedding.engine.renderer.OnFirstFrameRenderedListener)
io.flutter.embedding.android.FlutterSurfaceView: void removeOnFirstFrameRenderedListener(io.flutter.embedding.engine.renderer.OnFirstFrameRenderedListener)
io.flutter.embedding.android.FlutterSurfaceView: void onFirstFrameRendered()
io.flutter.embedding.android.FlutterSurfaceView: boolean access$002(io.flutter.embedding.android.FlutterSurfaceView,boolean)
io.flutter.embedding.android.FlutterSurfaceView: boolean access$100(io.flutter.embedding.android.FlutterSurfaceView)
io.flutter.embedding.android.FlutterSurfaceView: void access$200(io.flutter.embedding.android.FlutterSurfaceView)
io.flutter.embedding.android.FlutterSurfaceView: void access$300(io.flutter.embedding.android.FlutterSurfaceView,int,int)
io.flutter.embedding.android.FlutterSurfaceView: void access$400(io.flutter.embedding.android.FlutterSurfaceView)
io.flutter.embedding.android.FlutterSurfaceView$1
io.flutter.embedding.android.FlutterSurfaceView$1: io.flutter.embedding.android.FlutterSurfaceView this$0
io.flutter.embedding.android.FlutterSurfaceView$1: FlutterSurfaceView$1(io.flutter.embedding.android.FlutterSurfaceView)
io.flutter.embedding.android.FlutterSurfaceView$1: void surfaceCreated(android.view.SurfaceHolder)
io.flutter.embedding.android.FlutterSurfaceView$1: void surfaceChanged(android.view.SurfaceHolder,int,int,int)
io.flutter.embedding.android.FlutterSurfaceView$1: void surfaceDestroyed(android.view.SurfaceHolder)
io.flutter.embedding.android.FlutterTextureView
io.flutter.embedding.android.FlutterTextureView: java.lang.String TAG
io.flutter.embedding.android.FlutterTextureView: boolean isSurfaceAvailableForRendering
io.flutter.embedding.android.FlutterTextureView: boolean isAttachedToFlutterRenderer
io.flutter.embedding.android.FlutterTextureView: io.flutter.embedding.engine.renderer.FlutterRenderer flutterRenderer
io.flutter.embedding.android.FlutterTextureView: java.util.Set onFirstFrameRenderedListeners
io.flutter.embedding.android.FlutterTextureView: android.view.TextureView$SurfaceTextureListener surfaceTextureListener
io.flutter.embedding.android.FlutterTextureView: FlutterTextureView(android.content.Context)
io.flutter.embedding.android.FlutterTextureView: FlutterTextureView(android.content.Context,android.util.AttributeSet)
io.flutter.embedding.android.FlutterTextureView: void init()
io.flutter.embedding.android.FlutterTextureView: void attachToRenderer(io.flutter.embedding.engine.renderer.FlutterRenderer)
io.flutter.embedding.android.FlutterTextureView: void detachFromRenderer()
io.flutter.embedding.android.FlutterTextureView: void connectSurfaceToRenderer()
io.flutter.embedding.android.FlutterTextureView: void changeSurfaceSize(int,int)
io.flutter.embedding.android.FlutterTextureView: void disconnectSurfaceFromRenderer()
io.flutter.embedding.android.FlutterTextureView: void addOnFirstFrameRenderedListener(io.flutter.embedding.engine.renderer.OnFirstFrameRenderedListener)
io.flutter.embedding.android.FlutterTextureView: void removeOnFirstFrameRenderedListener(io.flutter.embedding.engine.renderer.OnFirstFrameRenderedListener)
io.flutter.embedding.android.FlutterTextureView: void onFirstFrameRendered()
io.flutter.embedding.android.FlutterTextureView: boolean access$002(io.flutter.embedding.android.FlutterTextureView,boolean)
io.flutter.embedding.android.FlutterTextureView: boolean access$100(io.flutter.embedding.android.FlutterTextureView)
io.flutter.embedding.android.FlutterTextureView: void access$200(io.flutter.embedding.android.FlutterTextureView)
io.flutter.embedding.android.FlutterTextureView: void access$300(io.flutter.embedding.android.FlutterTextureView,int,int)
io.flutter.embedding.android.FlutterTextureView: void access$400(io.flutter.embedding.android.FlutterTextureView)
io.flutter.embedding.android.FlutterTextureView$1
io.flutter.embedding.android.FlutterTextureView$1: io.flutter.embedding.android.FlutterTextureView this$0
io.flutter.embedding.android.FlutterTextureView$1: FlutterTextureView$1(io.flutter.embedding.android.FlutterTextureView)
io.flutter.embedding.android.FlutterTextureView$1: void onSurfaceTextureAvailable(android.graphics.SurfaceTexture,int,int)
io.flutter.embedding.android.FlutterTextureView$1: void onSurfaceTextureSizeChanged(android.graphics.SurfaceTexture,int,int)
io.flutter.embedding.android.FlutterTextureView$1: void onSurfaceTextureUpdated(android.graphics.SurfaceTexture)
io.flutter.embedding.android.FlutterTextureView$1: boolean onSurfaceTextureDestroyed(android.graphics.SurfaceTexture)
io.flutter.embedding.android.FlutterView
io.flutter.embedding.android.FlutterView: java.lang.String TAG
io.flutter.embedding.android.FlutterView: io.flutter.embedding.android.FlutterView$RenderMode renderMode
io.flutter.embedding.android.FlutterView: io.flutter.embedding.android.FlutterView$TransparencyMode transparencyMode
io.flutter.embedding.android.FlutterView: io.flutter.embedding.engine.renderer.FlutterRenderer$RenderSurface renderSurface
io.flutter.embedding.android.FlutterView: io.flutter.embedding.engine.FlutterEngine flutterEngine
io.flutter.embedding.android.FlutterView: io.flutter.plugin.editing.TextInputPlugin textInputPlugin
io.flutter.embedding.android.FlutterView: io.flutter.embedding.android.AndroidKeyProcessor androidKeyProcessor
io.flutter.embedding.android.FlutterView: io.flutter.embedding.android.AndroidTouchProcessor androidTouchProcessor
io.flutter.embedding.android.FlutterView: io.flutter.view.AccessibilityBridge accessibilityBridge
io.flutter.embedding.android.FlutterView: io.flutter.embedding.engine.renderer.FlutterRenderer$ViewportMetrics viewportMetrics
io.flutter.embedding.android.FlutterView: io.flutter.view.AccessibilityBridge$OnAccessibilityChangeListener onAccessibilityChangeListener
io.flutter.embedding.android.FlutterView: FlutterView(android.content.Context)
io.flutter.embedding.android.FlutterView: FlutterView(android.content.Context,io.flutter.embedding.android.FlutterView$RenderMode)
io.flutter.embedding.android.FlutterView: FlutterView(android.content.Context,io.flutter.embedding.android.FlutterView$TransparencyMode)
io.flutter.embedding.android.FlutterView: FlutterView(android.content.Context,io.flutter.embedding.android.FlutterView$RenderMode,io.flutter.embedding.android.FlutterView$TransparencyMode)
io.flutter.embedding.android.FlutterView: FlutterView(android.content.Context,android.util.AttributeSet)
io.flutter.embedding.android.FlutterView: FlutterView(android.content.Context,android.util.AttributeSet,io.flutter.embedding.android.FlutterView$RenderMode,io.flutter.embedding.android.FlutterView$TransparencyMode)
io.flutter.embedding.android.FlutterView: void init()
io.flutter.embedding.android.FlutterView: void addOnFirstFrameRenderedListener(io.flutter.embedding.engine.renderer.OnFirstFrameRenderedListener)
io.flutter.embedding.android.FlutterView: void removeOnFirstFrameRenderedListener(io.flutter.embedding.engine.renderer.OnFirstFrameRenderedListener)
io.flutter.embedding.android.FlutterView: void onConfigurationChanged(android.content.res.Configuration)
io.flutter.embedding.android.FlutterView: void onSizeChanged(int,int,int,int)
io.flutter.embedding.android.FlutterView: android.view.WindowInsets onApplyWindowInsets(android.view.WindowInsets)
io.flutter.embedding.android.FlutterView: boolean fitSystemWindows(android.graphics.Rect)
io.flutter.embedding.android.FlutterView: android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo)
io.flutter.embedding.android.FlutterView: boolean onKeyUp(int,android.view.KeyEvent)
io.flutter.embedding.android.FlutterView: boolean onKeyDown(int,android.view.KeyEvent)
io.flutter.embedding.android.FlutterView: boolean onTouchEvent(android.view.MotionEvent)
io.flutter.embedding.android.FlutterView: boolean onGenericMotionEvent(android.view.MotionEvent)
io.flutter.embedding.android.FlutterView: boolean onHoverEvent(android.view.MotionEvent)
io.flutter.embedding.android.FlutterView: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider()
io.flutter.embedding.android.FlutterView: void resetWillNotDraw(boolean,boolean)
io.flutter.embedding.android.FlutterView: void attachToFlutterEngine(io.flutter.embedding.engine.FlutterEngine)
io.flutter.embedding.android.FlutterView: void detachFromFlutterEngine()
io.flutter.embedding.android.FlutterView: boolean isAttachedToFlutterEngine()
io.flutter.embedding.android.FlutterView: void sendLocalesToFlutter(android.content.res.Configuration)
io.flutter.embedding.android.FlutterView: void sendUserSettingsToFlutter()
io.flutter.embedding.android.FlutterView: void sendViewportMetricsToFlutter()
io.flutter.embedding.android.FlutterView: void access$000(io.flutter.embedding.android.FlutterView,boolean,boolean)
io.flutter.embedding.android.FlutterView$1
io.flutter.embedding.android.FlutterView$1: io.flutter.embedding.android.FlutterView this$0
io.flutter.embedding.android.FlutterView$1: FlutterView$1(io.flutter.embedding.android.FlutterView)
io.flutter.embedding.android.FlutterView$1: void onAccessibilityChanged(boolean,boolean)
io.flutter.embedding.android.FlutterView$2
io.flutter.embedding.android.FlutterView$2: int[] $SwitchMap$io$flutter$embedding$android$FlutterView$RenderMode
io.flutter.embedding.android.FlutterView$2: void <clinit>()
io.flutter.embedding.android.FlutterView$RenderMode
io.flutter.embedding.android.FlutterView$RenderMode: io.flutter.embedding.android.FlutterView$RenderMode surface
io.flutter.embedding.android.FlutterView$RenderMode: io.flutter.embedding.android.FlutterView$RenderMode texture
io.flutter.embedding.android.FlutterView$RenderMode: io.flutter.embedding.android.FlutterView$RenderMode[] $VALUES
io.flutter.embedding.android.FlutterView$RenderMode: io.flutter.embedding.android.FlutterView$RenderMode[] values()
io.flutter.embedding.android.FlutterView$RenderMode: io.flutter.embedding.android.FlutterView$RenderMode valueOf(java.lang.String)
io.flutter.embedding.android.FlutterView$RenderMode: FlutterView$RenderMode(java.lang.String,int)
io.flutter.embedding.android.FlutterView$RenderMode: void <clinit>()
io.flutter.embedding.android.FlutterView$TransparencyMode
io.flutter.embedding.android.FlutterView$TransparencyMode: io.flutter.embedding.android.FlutterView$TransparencyMode opaque
io.flutter.embedding.android.FlutterView$TransparencyMode: io.flutter.embedding.android.FlutterView$TransparencyMode transparent
io.flutter.embedding.android.FlutterView$TransparencyMode: io.flutter.embedding.android.FlutterView$TransparencyMode[] $VALUES
io.flutter.embedding.android.FlutterView$TransparencyMode: io.flutter.embedding.android.FlutterView$TransparencyMode[] values()
io.flutter.embedding.android.FlutterView$TransparencyMode: io.flutter.embedding.android.FlutterView$TransparencyMode valueOf(java.lang.String)
io.flutter.embedding.android.FlutterView$TransparencyMode: FlutterView$TransparencyMode(java.lang.String,int)
io.flutter.embedding.android.FlutterView$TransparencyMode: void <clinit>()
io.flutter.embedding.engine.FlutterEngine
io.flutter.embedding.engine.FlutterEngine: java.lang.String TAG
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.FlutterJNI flutterJNI
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.renderer.FlutterRenderer renderer
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.dart.DartExecutor dartExecutor
io.flutter.embedding.engine.FlutterEngine: io.flutter.app.FlutterPluginRegistry pluginRegistry
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.systemchannels.AccessibilityChannel accessibilityChannel
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.systemchannels.KeyEventChannel keyEventChannel
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.systemchannels.LifecycleChannel lifecycleChannel
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.systemchannels.LocalizationChannel localizationChannel
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.systemchannels.NavigationChannel navigationChannel
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.systemchannels.PlatformChannel platformChannel
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.systemchannels.SettingsChannel settingsChannel
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.systemchannels.SystemChannel systemChannel
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.systemchannels.TextInputChannel textInputChannel
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.FlutterEngine$EngineLifecycleListener engineLifecycleListener
io.flutter.embedding.engine.FlutterEngine: FlutterEngine(android.content.Context)
io.flutter.embedding.engine.FlutterEngine: void attachToJni()
io.flutter.embedding.engine.FlutterEngine: boolean isAttachedToJni()
io.flutter.embedding.engine.FlutterEngine: void detachFromJni()
io.flutter.embedding.engine.FlutterEngine: void destroy()
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.dart.DartExecutor getDartExecutor()
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.renderer.FlutterRenderer getRenderer()
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.systemchannels.AccessibilityChannel getAccessibilityChannel()
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.systemchannels.KeyEventChannel getKeyEventChannel()
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.systemchannels.LifecycleChannel getLifecycleChannel()
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.systemchannels.LocalizationChannel getLocalizationChannel()
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.systemchannels.NavigationChannel getNavigationChannel()
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.systemchannels.PlatformChannel getPlatformChannel()
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.systemchannels.SettingsChannel getSettingsChannel()
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.systemchannels.SystemChannel getSystemChannel()
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.systemchannels.TextInputChannel getTextInputChannel()
io.flutter.embedding.engine.FlutterEngine: io.flutter.app.FlutterPluginRegistry getPluginRegistry()
io.flutter.embedding.engine.FlutterEngine: io.flutter.app.FlutterPluginRegistry access$000(io.flutter.embedding.engine.FlutterEngine)
io.flutter.embedding.engine.FlutterEngine$1
io.flutter.embedding.engine.FlutterEngine$1: io.flutter.embedding.engine.FlutterEngine this$0
io.flutter.embedding.engine.FlutterEngine$1: FlutterEngine$1(io.flutter.embedding.engine.FlutterEngine)
io.flutter.embedding.engine.FlutterEngine$1: void onPreEngineRestart()
io.flutter.embedding.engine.FlutterEngine$EngineLifecycleListener
io.flutter.embedding.engine.FlutterEngine$EngineLifecycleListener: void onPreEngineRestart()
io.flutter.embedding.engine.FlutterJNI
io.flutter.embedding.engine.FlutterJNI: java.lang.String TAG
io.flutter.embedding.engine.FlutterJNI: java.lang.Long nativePlatformViewId
io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.renderer.FlutterRenderer$RenderSurface renderSurface
io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.FlutterJNI$AccessibilityDelegate accessibilityDelegate
io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.dart.PlatformMessageHandler platformMessageHandler
io.flutter.embedding.engine.FlutterJNI: java.util.Set engineLifecycleListeners
io.flutter.embedding.engine.FlutterJNI: java.util.Set firstFrameListeners
io.flutter.embedding.engine.FlutterJNI: FlutterJNI()
io.flutter.embedding.engine.FlutterJNI: boolean nativeGetIsSoftwareRenderingEnabled()
io.flutter.embedding.engine.FlutterJNI: java.lang.String nativeGetObservatoryUri()
io.flutter.embedding.engine.FlutterJNI: void setRenderSurface(io.flutter.embedding.engine.renderer.FlutterRenderer$RenderSurface)
io.flutter.embedding.engine.FlutterJNI: void setAccessibilityDelegate(io.flutter.embedding.engine.FlutterJNI$AccessibilityDelegate)
io.flutter.embedding.engine.FlutterJNI: void updateSemantics(java.nio.ByteBuffer,java.lang.String[])
io.flutter.embedding.engine.FlutterJNI: void updateCustomAccessibilityActions(java.nio.ByteBuffer,java.lang.String[])
io.flutter.embedding.engine.FlutterJNI: void onFirstFrame()
io.flutter.embedding.engine.FlutterJNI: void setPlatformMessageHandler(io.flutter.embedding.engine.dart.PlatformMessageHandler)
io.flutter.embedding.engine.FlutterJNI: void handlePlatformMessage(java.lang.String,byte[],int)
io.flutter.embedding.engine.FlutterJNI: void handlePlatformMessageResponse(int,byte[])
io.flutter.embedding.engine.FlutterJNI: void addEngineLifecycleListener(io.flutter.embedding.engine.FlutterEngine$EngineLifecycleListener)
io.flutter.embedding.engine.FlutterJNI: void removeEngineLifecycleListener(io.flutter.embedding.engine.FlutterEngine$EngineLifecycleListener)
io.flutter.embedding.engine.FlutterJNI: void addOnFirstFrameRenderedListener(io.flutter.embedding.engine.renderer.OnFirstFrameRenderedListener)
io.flutter.embedding.engine.FlutterJNI: void removeOnFirstFrameRenderedListener(io.flutter.embedding.engine.renderer.OnFirstFrameRenderedListener)
io.flutter.embedding.engine.FlutterJNI: void onSurfaceCreated(android.view.Surface)
io.flutter.embedding.engine.FlutterJNI: void nativeSurfaceCreated(long,android.view.Surface)
io.flutter.embedding.engine.FlutterJNI: void onSurfaceChanged(int,int)
io.flutter.embedding.engine.FlutterJNI: void nativeSurfaceChanged(long,int,int)
io.flutter.embedding.engine.FlutterJNI: void onSurfaceDestroyed()
io.flutter.embedding.engine.FlutterJNI: void nativeSurfaceDestroyed(long)
io.flutter.embedding.engine.FlutterJNI: void setViewportMetrics(float,int,int,int,int,int,int,int,int,int,int)
io.flutter.embedding.engine.FlutterJNI: void nativeSetViewportMetrics(long,float,int,int,int,int,int,int,int,int,int,int)
io.flutter.embedding.engine.FlutterJNI: android.graphics.Bitmap getBitmap()
io.flutter.embedding.engine.FlutterJNI: android.graphics.Bitmap nativeGetBitmap(long)
io.flutter.embedding.engine.FlutterJNI: void dispatchPointerDataPacket(java.nio.ByteBuffer,int)
io.flutter.embedding.engine.FlutterJNI: void nativeDispatchPointerDataPacket(long,java.nio.ByteBuffer,int)
io.flutter.embedding.engine.FlutterJNI: void dispatchSemanticsAction(int,io.flutter.view.AccessibilityBridge$Action)
io.flutter.embedding.engine.FlutterJNI: void dispatchSemanticsAction(int,io.flutter.view.AccessibilityBridge$Action,java.lang.Object)
io.flutter.embedding.engine.FlutterJNI: void dispatchSemanticsAction(int,int,java.nio.ByteBuffer,int)
io.flutter.embedding.engine.FlutterJNI: void nativeDispatchSemanticsAction(long,int,int,java.nio.ByteBuffer,int)
io.flutter.embedding.engine.FlutterJNI: void setSemanticsEnabled(boolean)
io.flutter.embedding.engine.FlutterJNI: void nativeSetSemanticsEnabled(long,boolean)
io.flutter.embedding.engine.FlutterJNI: void setAccessibilityFeatures(int)
io.flutter.embedding.engine.FlutterJNI: void nativeSetAccessibilityFeatures(long,int)
io.flutter.embedding.engine.FlutterJNI: void registerTexture(long,android.graphics.SurfaceTexture)
io.flutter.embedding.engine.FlutterJNI: void nativeRegisterTexture(long,long,android.graphics.SurfaceTexture)
io.flutter.embedding.engine.FlutterJNI: void markTextureFrameAvailable(long)
io.flutter.embedding.engine.FlutterJNI: void nativeMarkTextureFrameAvailable(long,long)
io.flutter.embedding.engine.FlutterJNI: void unregisterTexture(long)
io.flutter.embedding.engine.FlutterJNI: void nativeUnregisterTexture(long,long)
io.flutter.embedding.engine.FlutterJNI: boolean isAttached()
io.flutter.embedding.engine.FlutterJNI: void attachToNative(boolean)
io.flutter.embedding.engine.FlutterJNI: long nativeAttach(io.flutter.embedding.engine.FlutterJNI,boolean)
io.flutter.embedding.engine.FlutterJNI: void detachFromNativeAndReleaseResources()
io.flutter.embedding.engine.FlutterJNI: void nativeDestroy(long)
io.flutter.embedding.engine.FlutterJNI: void runBundleAndSnapshotFromLibrary(java.lang.String[],java.lang.String,java.lang.String,android.content.res.AssetManager)
io.flutter.embedding.engine.FlutterJNI: void nativeRunBundleAndSnapshotFromLibrary(long,java.lang.String[],java.lang.String,java.lang.String,android.content.res.AssetManager)
io.flutter.embedding.engine.FlutterJNI: void dispatchEmptyPlatformMessage(java.lang.String,int)
io.flutter.embedding.engine.FlutterJNI: void nativeDispatchEmptyPlatformMessage(long,java.lang.String,int)
io.flutter.embedding.engine.FlutterJNI: void dispatchPlatformMessage(java.lang.String,java.nio.ByteBuffer,int,int)
io.flutter.embedding.engine.FlutterJNI: void nativeDispatchPlatformMessage(long,java.lang.String,java.nio.ByteBuffer,int,int)
io.flutter.embedding.engine.FlutterJNI: void invokePlatformMessageEmptyResponseCallback(int)
io.flutter.embedding.engine.FlutterJNI: void nativeInvokePlatformMessageEmptyResponseCallback(long,int)
io.flutter.embedding.engine.FlutterJNI: void invokePlatformMessageResponseCallback(int,java.nio.ByteBuffer,int)
io.flutter.embedding.engine.FlutterJNI: void nativeInvokePlatformMessageResponseCallback(long,int,java.nio.ByteBuffer,int)
io.flutter.embedding.engine.FlutterJNI: void onPreEngineRestart()
io.flutter.embedding.engine.FlutterJNI: void ensureNotAttachedToNative()
io.flutter.embedding.engine.FlutterJNI: void ensureAttachedToNative()
io.flutter.embedding.engine.FlutterJNI$AccessibilityDelegate
io.flutter.embedding.engine.FlutterJNI$AccessibilityDelegate: void updateCustomAccessibilityActions(java.nio.ByteBuffer,java.lang.String[])
io.flutter.embedding.engine.FlutterJNI$AccessibilityDelegate: void updateSemantics(java.nio.ByteBuffer,java.lang.String[])
io.flutter.embedding.engine.FlutterShellArgs
io.flutter.embedding.engine.FlutterShellArgs: java.lang.String ARG_KEY_TRACE_STARTUP
io.flutter.embedding.engine.FlutterShellArgs: java.lang.String ARG_TRACE_STARTUP
io.flutter.embedding.engine.FlutterShellArgs: java.lang.String ARG_KEY_START_PAUSED
io.flutter.embedding.engine.FlutterShellArgs: java.lang.String ARG_START_PAUSED
io.flutter.embedding.engine.FlutterShellArgs: java.lang.String ARG_KEY_DISABLE_SERVICE_AUTH_CODES
io.flutter.embedding.engine.FlutterShellArgs: java.lang.String ARG_DISABLE_SERVICE_AUTH_CODES
io.flutter.embedding.engine.FlutterShellArgs: java.lang.String ARG_KEY_USE_TEST_FONTS
io.flutter.embedding.engine.FlutterShellArgs: java.lang.String ARG_USE_TEST_FONTS
io.flutter.embedding.engine.FlutterShellArgs: java.lang.String ARG_KEY_ENABLE_DART_PROFILING
io.flutter.embedding.engine.FlutterShellArgs: java.lang.String ARG_ENABLE_DART_PROFILING
io.flutter.embedding.engine.FlutterShellArgs: java.lang.String ARG_KEY_ENABLE_SOFTWARE_RENDERING
io.flutter.embedding.engine.FlutterShellArgs: java.lang.String ARG_ENABLE_SOFTWARE_RENDERING
io.flutter.embedding.engine.FlutterShellArgs: java.lang.String ARG_KEY_SKIA_DETERMINISTIC_RENDERING
io.flutter.embedding.engine.FlutterShellArgs: java.lang.String ARG_SKIA_DETERMINISTIC_RENDERING
io.flutter.embedding.engine.FlutterShellArgs: java.lang.String ARG_KEY_TRACE_SKIA
io.flutter.embedding.engine.FlutterShellArgs: java.lang.String ARG_TRACE_SKIA
io.flutter.embedding.engine.FlutterShellArgs: java.lang.String ARG_KEY_DUMP_SHADER_SKP_ON_SHADER_COMPILATION
io.flutter.embedding.engine.FlutterShellArgs: java.lang.String ARG_DUMP_SHADER_SKP_ON_SHADER_COMPILATION
io.flutter.embedding.engine.FlutterShellArgs: java.lang.String ARG_KEY_VERBOSE_LOGGING
io.flutter.embedding.engine.FlutterShellArgs: java.lang.String ARG_VERBOSE_LOGGING
io.flutter.embedding.engine.FlutterShellArgs: java.util.Set args
io.flutter.embedding.engine.FlutterShellArgs: io.flutter.embedding.engine.FlutterShellArgs fromIntent(android.content.Intent)
io.flutter.embedding.engine.FlutterShellArgs: FlutterShellArgs(java.lang.String[])
io.flutter.embedding.engine.FlutterShellArgs: FlutterShellArgs(java.util.List)
io.flutter.embedding.engine.FlutterShellArgs: FlutterShellArgs(java.util.Set)
io.flutter.embedding.engine.FlutterShellArgs: void add(java.lang.String)
io.flutter.embedding.engine.FlutterShellArgs: void remove(java.lang.String)
io.flutter.embedding.engine.FlutterShellArgs: java.lang.String[] toArray()
io.flutter.embedding.engine.dart.DartExecutor
io.flutter.embedding.engine.dart.DartExecutor: java.lang.String TAG
io.flutter.embedding.engine.dart.DartExecutor: io.flutter.embedding.engine.FlutterJNI flutterJNI
io.flutter.embedding.engine.dart.DartExecutor: io.flutter.embedding.engine.dart.DartMessenger messenger
io.flutter.embedding.engine.dart.DartExecutor: boolean isApplicationRunning
io.flutter.embedding.engine.dart.DartExecutor: DartExecutor(io.flutter.embedding.engine.FlutterJNI)
io.flutter.embedding.engine.dart.DartExecutor: void onAttachedToJNI()
io.flutter.embedding.engine.dart.DartExecutor: void onDetachedFromJNI()
io.flutter.embedding.engine.dart.DartExecutor: boolean isExecutingDart()
io.flutter.embedding.engine.dart.DartExecutor: void executeDartEntrypoint(io.flutter.embedding.engine.dart.DartExecutor$DartEntrypoint)
io.flutter.embedding.engine.dart.DartExecutor: void executeDartCallback(io.flutter.embedding.engine.dart.DartExecutor$DartCallback)
io.flutter.embedding.engine.dart.DartExecutor: void send(java.lang.String,java.nio.ByteBuffer)
io.flutter.embedding.engine.dart.DartExecutor: void send(java.lang.String,java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply)
io.flutter.embedding.engine.dart.DartExecutor: void setMessageHandler(java.lang.String,io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler)
io.flutter.embedding.engine.dart.DartExecutor$DartCallback
io.flutter.embedding.engine.dart.DartExecutor$DartCallback: android.content.res.AssetManager androidAssetManager
io.flutter.embedding.engine.dart.DartExecutor$DartCallback: java.lang.String pathToPrimaryBundle
io.flutter.embedding.engine.dart.DartExecutor$DartCallback: java.lang.String pathToFallbackBundle
io.flutter.embedding.engine.dart.DartExecutor$DartCallback: io.flutter.view.FlutterCallbackInformation callbackHandle
io.flutter.embedding.engine.dart.DartExecutor$DartCallback: DartExecutor$DartCallback(android.content.res.AssetManager,java.lang.String,io.flutter.view.FlutterCallbackInformation)
io.flutter.embedding.engine.dart.DartExecutor$DartCallback: DartExecutor$DartCallback(android.content.res.AssetManager,java.lang.String,java.lang.String,io.flutter.view.FlutterCallbackInformation)
io.flutter.embedding.engine.dart.DartExecutor$DartEntrypoint
io.flutter.embedding.engine.dart.DartExecutor$DartEntrypoint: android.content.res.AssetManager androidAssetManager
io.flutter.embedding.engine.dart.DartExecutor$DartEntrypoint: java.lang.String pathToPrimaryBundle
io.flutter.embedding.engine.dart.DartExecutor$DartEntrypoint: java.lang.String pathToFallbackBundle
io.flutter.embedding.engine.dart.DartExecutor$DartEntrypoint: java.lang.String dartEntrypointFunctionName
io.flutter.embedding.engine.dart.DartExecutor$DartEntrypoint: DartExecutor$DartEntrypoint(android.content.res.AssetManager,java.lang.String,java.lang.String)
io.flutter.embedding.engine.dart.DartExecutor$DartEntrypoint: DartExecutor$DartEntrypoint(android.content.res.AssetManager,java.lang.String,java.lang.String,java.lang.String)
io.flutter.embedding.engine.dart.DartMessenger
io.flutter.embedding.engine.dart.DartMessenger: java.lang.String TAG
io.flutter.embedding.engine.dart.DartMessenger: io.flutter.embedding.engine.FlutterJNI flutterJNI
io.flutter.embedding.engine.dart.DartMessenger: java.util.Map messageHandlers
io.flutter.embedding.engine.dart.DartMessenger: java.util.Map pendingReplies
io.flutter.embedding.engine.dart.DartMessenger: int nextReplyId
io.flutter.embedding.engine.dart.DartMessenger: DartMessenger(io.flutter.embedding.engine.FlutterJNI)
io.flutter.embedding.engine.dart.DartMessenger: void setMessageHandler(java.lang.String,io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler)
io.flutter.embedding.engine.dart.DartMessenger: void send(java.lang.String,java.nio.ByteBuffer)
io.flutter.embedding.engine.dart.DartMessenger: void send(java.lang.String,java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply)
io.flutter.embedding.engine.dart.DartMessenger: void handleMessageFromDart(java.lang.String,byte[],int)
io.flutter.embedding.engine.dart.DartMessenger: void handlePlatformMessageResponse(int,byte[])
io.flutter.embedding.engine.dart.DartMessenger$Reply
io.flutter.embedding.engine.dart.DartMessenger$Reply: io.flutter.embedding.engine.FlutterJNI flutterJNI
io.flutter.embedding.engine.dart.DartMessenger$Reply: int replyId
io.flutter.embedding.engine.dart.DartMessenger$Reply: java.util.concurrent.atomic.AtomicBoolean done
io.flutter.embedding.engine.dart.DartMessenger$Reply: DartMessenger$Reply(io.flutter.embedding.engine.FlutterJNI,int)
io.flutter.embedding.engine.dart.DartMessenger$Reply: void reply(java.nio.ByteBuffer)
io.flutter.embedding.engine.dart.PlatformMessageHandler
io.flutter.embedding.engine.dart.PlatformMessageHandler: void handleMessageFromDart(java.lang.String,byte[],int)
io.flutter.embedding.engine.dart.PlatformMessageHandler: void handlePlatformMessageResponse(int,byte[])
io.flutter.embedding.engine.renderer.FlutterRenderer
io.flutter.embedding.engine.renderer.FlutterRenderer: io.flutter.embedding.engine.FlutterJNI flutterJNI
io.flutter.embedding.engine.renderer.FlutterRenderer: java.util.concurrent.atomic.AtomicLong nextTextureId
io.flutter.embedding.engine.renderer.FlutterRenderer: io.flutter.embedding.engine.renderer.FlutterRenderer$RenderSurface renderSurface
io.flutter.embedding.engine.renderer.FlutterRenderer: FlutterRenderer(io.flutter.embedding.engine.FlutterJNI)
io.flutter.embedding.engine.renderer.FlutterRenderer: void attachToRenderSurface(io.flutter.embedding.engine.renderer.FlutterRenderer$RenderSurface)
io.flutter.embedding.engine.renderer.FlutterRenderer: void detachFromRenderSurface()
io.flutter.embedding.engine.renderer.FlutterRenderer: void addOnFirstFrameRenderedListener(io.flutter.embedding.engine.renderer.OnFirstFrameRenderedListener)
io.flutter.embedding.engine.renderer.FlutterRenderer: void removeOnFirstFrameRenderedListener(io.flutter.embedding.engine.renderer.OnFirstFrameRenderedListener)
io.flutter.embedding.engine.renderer.FlutterRenderer: io.flutter.view.TextureRegistry$SurfaceTextureEntry createSurfaceTexture()
io.flutter.embedding.engine.renderer.FlutterRenderer: void surfaceCreated(android.view.Surface)
io.flutter.embedding.engine.renderer.FlutterRenderer: void surfaceChanged(int,int)
io.flutter.embedding.engine.renderer.FlutterRenderer: void surfaceDestroyed()
io.flutter.embedding.engine.renderer.FlutterRenderer: void setViewportMetrics(io.flutter.embedding.engine.renderer.FlutterRenderer$ViewportMetrics)
io.flutter.embedding.engine.renderer.FlutterRenderer: android.graphics.Bitmap getBitmap()
io.flutter.embedding.engine.renderer.FlutterRenderer: void dispatchPointerDataPacket(java.nio.ByteBuffer,int)
io.flutter.embedding.engine.renderer.FlutterRenderer: void registerTexture(long,android.graphics.SurfaceTexture)
io.flutter.embedding.engine.renderer.FlutterRenderer: void markTextureFrameAvailable(long)
io.flutter.embedding.engine.renderer.FlutterRenderer: void unregisterTexture(long)
io.flutter.embedding.engine.renderer.FlutterRenderer: boolean isSoftwareRenderingEnabled()
io.flutter.embedding.engine.renderer.FlutterRenderer: void setAccessibilityFeatures(int)
io.flutter.embedding.engine.renderer.FlutterRenderer: void setSemanticsEnabled(boolean)
io.flutter.embedding.engine.renderer.FlutterRenderer: void dispatchSemanticsAction(int,int,java.nio.ByteBuffer,int)
io.flutter.embedding.engine.renderer.FlutterRenderer: void access$200(io.flutter.embedding.engine.renderer.FlutterRenderer,long)
io.flutter.embedding.engine.renderer.FlutterRenderer: void access$300(io.flutter.embedding.engine.renderer.FlutterRenderer,long)
io.flutter.embedding.engine.renderer.FlutterRenderer$RenderSurface
io.flutter.embedding.engine.renderer.FlutterRenderer$RenderSurface: void attachToRenderer(io.flutter.embedding.engine.renderer.FlutterRenderer)
io.flutter.embedding.engine.renderer.FlutterRenderer$RenderSurface: void detachFromRenderer()
io.flutter.embedding.engine.renderer.FlutterRenderer$RenderSurface: void onFirstFrameRendered()
io.flutter.embedding.engine.renderer.FlutterRenderer$RenderSurface: void addOnFirstFrameRenderedListener(io.flutter.embedding.engine.renderer.OnFirstFrameRenderedListener)
io.flutter.embedding.engine.renderer.FlutterRenderer$RenderSurface: void removeOnFirstFrameRenderedListener(io.flutter.embedding.engine.renderer.OnFirstFrameRenderedListener)
io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry
io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry: long id
io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry: android.graphics.SurfaceTexture surfaceTexture
io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry: boolean released
io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry: android.graphics.SurfaceTexture$OnFrameAvailableListener onFrameListener
io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry: io.flutter.embedding.engine.renderer.FlutterRenderer this$0
io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry: FlutterRenderer$SurfaceTextureRegistryEntry(io.flutter.embedding.engine.renderer.FlutterRenderer,long,android.graphics.SurfaceTexture)
io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry: android.graphics.SurfaceTexture surfaceTexture()
io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry: long id()
io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry: void release()
io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry: boolean access$000(io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry)
io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry: long access$100(io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry)
io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry$1
io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry$1: io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry this$1
io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry$1: FlutterRenderer$SurfaceTextureRegistryEntry$1(io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry)
io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry$1: void onFrameAvailable(android.graphics.SurfaceTexture)
io.flutter.embedding.engine.renderer.FlutterRenderer$ViewportMetrics
io.flutter.embedding.engine.renderer.FlutterRenderer$ViewportMetrics: float devicePixelRatio
io.flutter.embedding.engine.renderer.FlutterRenderer$ViewportMetrics: int width
io.flutter.embedding.engine.renderer.FlutterRenderer$ViewportMetrics: int height
io.flutter.embedding.engine.renderer.FlutterRenderer$ViewportMetrics: int paddingTop
io.flutter.embedding.engine.renderer.FlutterRenderer$ViewportMetrics: int paddingRight
io.flutter.embedding.engine.renderer.FlutterRenderer$ViewportMetrics: int paddingBottom
io.flutter.embedding.engine.renderer.FlutterRenderer$ViewportMetrics: int paddingLeft
io.flutter.embedding.engine.renderer.FlutterRenderer$ViewportMetrics: int viewInsetTop
io.flutter.embedding.engine.renderer.FlutterRenderer$ViewportMetrics: int viewInsetRight
io.flutter.embedding.engine.renderer.FlutterRenderer$ViewportMetrics: int viewInsetBottom
io.flutter.embedding.engine.renderer.FlutterRenderer$ViewportMetrics: int viewInsetLeft
io.flutter.embedding.engine.renderer.FlutterRenderer$ViewportMetrics: FlutterRenderer$ViewportMetrics()
io.flutter.embedding.engine.renderer.OnFirstFrameRenderedListener
io.flutter.embedding.engine.renderer.OnFirstFrameRenderedListener: void onFirstFrameRendered()
io.flutter.embedding.engine.systemchannels.AccessibilityChannel
io.flutter.embedding.engine.systemchannels.AccessibilityChannel: io.flutter.plugin.common.BasicMessageChannel channel
io.flutter.embedding.engine.systemchannels.AccessibilityChannel: io.flutter.embedding.engine.FlutterJNI flutterJNI
io.flutter.embedding.engine.systemchannels.AccessibilityChannel: io.flutter.embedding.engine.systemchannels.AccessibilityChannel$AccessibilityMessageHandler handler
io.flutter.embedding.engine.systemchannels.AccessibilityChannel: io.flutter.plugin.common.BasicMessageChannel$MessageHandler parsingMessageHandler
io.flutter.embedding.engine.systemchannels.AccessibilityChannel: AccessibilityChannel(io.flutter.embedding.engine.dart.DartExecutor,io.flutter.embedding.engine.FlutterJNI)
io.flutter.embedding.engine.systemchannels.AccessibilityChannel: void onAndroidAccessibilityEnabled()
io.flutter.embedding.engine.systemchannels.AccessibilityChannel: void onAndroidAccessibilityDisabled()
io.flutter.embedding.engine.systemchannels.AccessibilityChannel: void setAccessibilityFeatures(int)
io.flutter.embedding.engine.systemchannels.AccessibilityChannel: void dispatchSemanticsAction(int,io.flutter.view.AccessibilityBridge$Action)
io.flutter.embedding.engine.systemchannels.AccessibilityChannel: void dispatchSemanticsAction(int,io.flutter.view.AccessibilityBridge$Action,java.lang.Object)
io.flutter.embedding.engine.systemchannels.AccessibilityChannel: void setAccessibilityMessageHandler(io.flutter.embedding.engine.systemchannels.AccessibilityChannel$AccessibilityMessageHandler)
io.flutter.embedding.engine.systemchannels.AccessibilityChannel: io.flutter.embedding.engine.systemchannels.AccessibilityChannel$AccessibilityMessageHandler access$000(io.flutter.embedding.engine.systemchannels.AccessibilityChannel)
io.flutter.embedding.engine.systemchannels.AccessibilityChannel$1
io.flutter.embedding.engine.systemchannels.AccessibilityChannel$1: io.flutter.embedding.engine.systemchannels.AccessibilityChannel this$0
io.flutter.embedding.engine.systemchannels.AccessibilityChannel$1: AccessibilityChannel$1(io.flutter.embedding.engine.systemchannels.AccessibilityChannel)
io.flutter.embedding.engine.systemchannels.AccessibilityChannel$1: void onMessage(java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.embedding.engine.systemchannels.AccessibilityChannel$AccessibilityMessageHandler
io.flutter.embedding.engine.systemchannels.AccessibilityChannel$AccessibilityMessageHandler: void announce(java.lang.String)
io.flutter.embedding.engine.systemchannels.AccessibilityChannel$AccessibilityMessageHandler: void onTap(int)
io.flutter.embedding.engine.systemchannels.AccessibilityChannel$AccessibilityMessageHandler: void onLongPress(int)
io.flutter.embedding.engine.systemchannels.AccessibilityChannel$AccessibilityMessageHandler: void onTooltip(java.lang.String)
io.flutter.embedding.engine.systemchannels.KeyEventChannel
io.flutter.embedding.engine.systemchannels.KeyEventChannel: io.flutter.plugin.common.BasicMessageChannel channel
io.flutter.embedding.engine.systemchannels.KeyEventChannel: KeyEventChannel(io.flutter.embedding.engine.dart.DartExecutor)
io.flutter.embedding.engine.systemchannels.KeyEventChannel: void keyUp(io.flutter.embedding.engine.systemchannels.KeyEventChannel$FlutterKeyEvent)
io.flutter.embedding.engine.systemchannels.KeyEventChannel: void keyDown(io.flutter.embedding.engine.systemchannels.KeyEventChannel$FlutterKeyEvent)
io.flutter.embedding.engine.systemchannels.KeyEventChannel: void encodeKeyEvent(io.flutter.embedding.engine.systemchannels.KeyEventChannel$FlutterKeyEvent,java.util.Map)
io.flutter.embedding.engine.systemchannels.KeyEventChannel$FlutterKeyEvent
io.flutter.embedding.engine.systemchannels.KeyEventChannel$FlutterKeyEvent: int flags
io.flutter.embedding.engine.systemchannels.KeyEventChannel$FlutterKeyEvent: int plainCodePoint
io.flutter.embedding.engine.systemchannels.KeyEventChannel$FlutterKeyEvent: int codePoint
io.flutter.embedding.engine.systemchannels.KeyEventChannel$FlutterKeyEvent: int keyCode
io.flutter.embedding.engine.systemchannels.KeyEventChannel$FlutterKeyEvent: java.lang.Character complexCharacter
io.flutter.embedding.engine.systemchannels.KeyEventChannel$FlutterKeyEvent: int scanCode
io.flutter.embedding.engine.systemchannels.KeyEventChannel$FlutterKeyEvent: int metaState
io.flutter.embedding.engine.systemchannels.KeyEventChannel$FlutterKeyEvent: KeyEventChannel$FlutterKeyEvent(android.view.KeyEvent)
io.flutter.embedding.engine.systemchannels.KeyEventChannel$FlutterKeyEvent: KeyEventChannel$FlutterKeyEvent(android.view.KeyEvent,java.lang.Character)
io.flutter.embedding.engine.systemchannels.KeyEventChannel$FlutterKeyEvent: KeyEventChannel$FlutterKeyEvent(int,int,int,int,java.lang.Character,int,int)
io.flutter.embedding.engine.systemchannels.LifecycleChannel
io.flutter.embedding.engine.systemchannels.LifecycleChannel: io.flutter.plugin.common.BasicMessageChannel channel
io.flutter.embedding.engine.systemchannels.LifecycleChannel: LifecycleChannel(io.flutter.embedding.engine.dart.DartExecutor)
io.flutter.embedding.engine.systemchannels.LifecycleChannel: void appIsInactive()
io.flutter.embedding.engine.systemchannels.LifecycleChannel: void appIsResumed()
io.flutter.embedding.engine.systemchannels.LifecycleChannel: void appIsPaused()
io.flutter.embedding.engine.systemchannels.LocalizationChannel
io.flutter.embedding.engine.systemchannels.LocalizationChannel: io.flutter.plugin.common.MethodChannel channel
io.flutter.embedding.engine.systemchannels.LocalizationChannel: LocalizationChannel(io.flutter.embedding.engine.dart.DartExecutor)
io.flutter.embedding.engine.systemchannels.LocalizationChannel: void sendLocales(java.util.List)
io.flutter.embedding.engine.systemchannels.NavigationChannel
io.flutter.embedding.engine.systemchannels.NavigationChannel: io.flutter.plugin.common.MethodChannel channel
io.flutter.embedding.engine.systemchannels.NavigationChannel: NavigationChannel(io.flutter.embedding.engine.dart.DartExecutor)
io.flutter.embedding.engine.systemchannels.NavigationChannel: void setInitialRoute(java.lang.String)
io.flutter.embedding.engine.systemchannels.NavigationChannel: void pushRoute(java.lang.String)
io.flutter.embedding.engine.systemchannels.NavigationChannel: void popRoute()
io.flutter.embedding.engine.systemchannels.NavigationChannel: void setMethodCallHandler(io.flutter.plugin.common.MethodChannel$MethodCallHandler)
io.flutter.embedding.engine.systemchannels.PlatformChannel
io.flutter.embedding.engine.systemchannels.PlatformChannel: io.flutter.plugin.common.MethodChannel channel
io.flutter.embedding.engine.systemchannels.PlatformChannel: io.flutter.embedding.engine.systemchannels.PlatformChannel$PlatformMessageHandler platformMessageHandler
io.flutter.embedding.engine.systemchannels.PlatformChannel: io.flutter.plugin.common.MethodChannel$MethodCallHandler parsingMethodCallHandler
io.flutter.embedding.engine.systemchannels.PlatformChannel: PlatformChannel(io.flutter.embedding.engine.dart.DartExecutor)
io.flutter.embedding.engine.systemchannels.PlatformChannel: void setPlatformMessageHandler(io.flutter.embedding.engine.systemchannels.PlatformChannel$PlatformMessageHandler)
io.flutter.embedding.engine.systemchannels.PlatformChannel: int decodeOrientations(org.json.JSONArray)
io.flutter.embedding.engine.systemchannels.PlatformChannel: io.flutter.embedding.engine.systemchannels.PlatformChannel$AppSwitcherDescription decodeAppSwitcherDescription(org.json.JSONObject)
io.flutter.embedding.engine.systemchannels.PlatformChannel: java.util.List decodeSystemUiOverlays(org.json.JSONArray)
io.flutter.embedding.engine.systemchannels.PlatformChannel: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle decodeSystemChromeStyle(org.json.JSONObject)
io.flutter.embedding.engine.systemchannels.PlatformChannel: io.flutter.embedding.engine.systemchannels.PlatformChannel$PlatformMessageHandler access$000(io.flutter.embedding.engine.systemchannels.PlatformChannel)
io.flutter.embedding.engine.systemchannels.PlatformChannel: int access$100(io.flutter.embedding.engine.systemchannels.PlatformChannel,org.json.JSONArray)
io.flutter.embedding.engine.systemchannels.PlatformChannel: io.flutter.embedding.engine.systemchannels.PlatformChannel$AppSwitcherDescription access$200(io.flutter.embedding.engine.systemchannels.PlatformChannel,org.json.JSONObject)
io.flutter.embedding.engine.systemchannels.PlatformChannel: java.util.List access$300(io.flutter.embedding.engine.systemchannels.PlatformChannel,org.json.JSONArray)
io.flutter.embedding.engine.systemchannels.PlatformChannel: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle access$400(io.flutter.embedding.engine.systemchannels.PlatformChannel,org.json.JSONObject)
io.flutter.embedding.engine.systemchannels.PlatformChannel$1
io.flutter.embedding.engine.systemchannels.PlatformChannel$1: io.flutter.embedding.engine.systemchannels.PlatformChannel this$0
io.flutter.embedding.engine.systemchannels.PlatformChannel$1: PlatformChannel$1(io.flutter.embedding.engine.systemchannels.PlatformChannel)
io.flutter.embedding.engine.systemchannels.PlatformChannel$1: void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.embedding.engine.systemchannels.PlatformChannel$2
io.flutter.embedding.engine.systemchannels.PlatformChannel$2: int[] $SwitchMap$io$flutter$embedding$engine$systemchannels$PlatformChannel$DeviceOrientation
io.flutter.embedding.engine.systemchannels.PlatformChannel$2: int[] $SwitchMap$io$flutter$embedding$engine$systemchannels$PlatformChannel$SystemUiOverlay
io.flutter.embedding.engine.systemchannels.PlatformChannel$2: void <clinit>()
io.flutter.embedding.engine.systemchannels.PlatformChannel$AppSwitcherDescription
io.flutter.embedding.engine.systemchannels.PlatformChannel$AppSwitcherDescription: int color
io.flutter.embedding.engine.systemchannels.PlatformChannel$AppSwitcherDescription: java.lang.String label
io.flutter.embedding.engine.systemchannels.PlatformChannel$AppSwitcherDescription: PlatformChannel$AppSwitcherDescription(int,java.lang.String)
io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness
io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness: io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness LIGHT
io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness: io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness DARK
io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness: java.lang.String encodedName
io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness: io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness[] $VALUES
io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness: io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness[] values()
io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness: io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness valueOf(java.lang.String)
io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness: io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness fromValue(java.lang.String)
io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness: PlatformChannel$Brightness(java.lang.String,int,java.lang.String)
io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness: void <clinit>()
io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat
io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat: io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat PLAIN_TEXT
io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat: java.lang.String encodedName
io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat: io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat[] $VALUES
io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat: io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat[] values()
io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat: io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat valueOf(java.lang.String)
io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat: io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat fromValue(java.lang.String)
io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat: PlatformChannel$ClipboardContentFormat(java.lang.String,int,java.lang.String)
io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat: void <clinit>()
io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation
io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation: io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation PORTRAIT_UP
io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation: io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation PORTRAIT_DOWN
io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation: io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation LANDSCAPE_LEFT
io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation: io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation LANDSCAPE_RIGHT
io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation: java.lang.String encodedName
io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation: io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation[] $VALUES
io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation: io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation[] values()
io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation: io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation valueOf(java.lang.String)
io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation: io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation fromValue(java.lang.String)
io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation: PlatformChannel$DeviceOrientation(java.lang.String,int,java.lang.String)
io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation: void <clinit>()
io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType
io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType: io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType STANDARD
io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType: io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType LIGHT_IMPACT
io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType: io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType MEDIUM_IMPACT
io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType: io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType HEAVY_IMPACT
io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType: io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType SELECTION_CLICK
io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType: java.lang.String encodedName
io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType: io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType[] $VALUES
io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType: io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType[] values()
io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType: io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType valueOf(java.lang.String)
io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType: io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType fromValue(java.lang.String)
io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType: PlatformChannel$HapticFeedbackType(java.lang.String,int,java.lang.String)
io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType: void <clinit>()
io.flutter.embedding.engine.systemchannels.PlatformChannel$PlatformMessageHandler
io.flutter.embedding.engine.systemchannels.PlatformChannel$PlatformMessageHandler: void playSystemSound(io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType)
io.flutter.embedding.engine.systemchannels.PlatformChannel$PlatformMessageHandler: void vibrateHapticFeedback(io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType)
io.flutter.embedding.engine.systemchannels.PlatformChannel$PlatformMessageHandler: void setPreferredOrientations(int)
io.flutter.embedding.engine.systemchannels.PlatformChannel$PlatformMessageHandler: void setApplicationSwitcherDescription(io.flutter.embedding.engine.systemchannels.PlatformChannel$AppSwitcherDescription)
io.flutter.embedding.engine.systemchannels.PlatformChannel$PlatformMessageHandler: void showSystemOverlays(java.util.List)
io.flutter.embedding.engine.systemchannels.PlatformChannel$PlatformMessageHandler: void restoreSystemUiOverlays()
io.flutter.embedding.engine.systemchannels.PlatformChannel$PlatformMessageHandler: void setSystemUiOverlayStyle(io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle)
io.flutter.embedding.engine.systemchannels.PlatformChannel$PlatformMessageHandler: void popSystemNavigator()
io.flutter.embedding.engine.systemchannels.PlatformChannel$PlatformMessageHandler: java.lang.CharSequence getClipboardData(io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat)
io.flutter.embedding.engine.systemchannels.PlatformChannel$PlatformMessageHandler: void setClipboardData(java.lang.String)
io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType
io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType: io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType CLICK
io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType: java.lang.String encodedName
io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType: io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType[] $VALUES
io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType: io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType[] values()
io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType: io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType valueOf(java.lang.String)
io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType: io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType fromValue(java.lang.String)
io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType: PlatformChannel$SoundType(java.lang.String,int,java.lang.String)
io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType: void <clinit>()
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle: java.lang.Integer statusBarColor
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle: io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness statusBarIconBrightness
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle: java.lang.Integer systemNavigationBarColor
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle: io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness systemNavigationBarIconBrightness
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle: java.lang.Integer systemNavigationBarDividerColor
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle: PlatformChannel$SystemChromeStyle(java.lang.Integer,io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness,java.lang.Integer,io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness,java.lang.Integer)
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay TOP_OVERLAYS
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay BOTTOM_OVERLAYS
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay: java.lang.String encodedName
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay[] $VALUES
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay[] values()
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay valueOf(java.lang.String)
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay fromValue(java.lang.String)
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay: PlatformChannel$SystemUiOverlay(java.lang.String,int,java.lang.String)
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay: void <clinit>()
io.flutter.embedding.engine.systemchannels.SettingsChannel
io.flutter.embedding.engine.systemchannels.SettingsChannel: java.lang.String CHANNEL_NAME
io.flutter.embedding.engine.systemchannels.SettingsChannel: io.flutter.plugin.common.BasicMessageChannel channel
io.flutter.embedding.engine.systemchannels.SettingsChannel: SettingsChannel(io.flutter.embedding.engine.dart.DartExecutor)
io.flutter.embedding.engine.systemchannels.SettingsChannel: io.flutter.embedding.engine.systemchannels.SettingsChannel$MessageBuilder startMessage()
io.flutter.embedding.engine.systemchannels.SettingsChannel$MessageBuilder
io.flutter.embedding.engine.systemchannels.SettingsChannel$MessageBuilder: io.flutter.plugin.common.BasicMessageChannel channel
io.flutter.embedding.engine.systemchannels.SettingsChannel$MessageBuilder: java.util.Map message
io.flutter.embedding.engine.systemchannels.SettingsChannel$MessageBuilder: SettingsChannel$MessageBuilder(io.flutter.plugin.common.BasicMessageChannel)
io.flutter.embedding.engine.systemchannels.SettingsChannel$MessageBuilder: io.flutter.embedding.engine.systemchannels.SettingsChannel$MessageBuilder setTextScaleFactor(float)
io.flutter.embedding.engine.systemchannels.SettingsChannel$MessageBuilder: io.flutter.embedding.engine.systemchannels.SettingsChannel$MessageBuilder setUse24HourFormat(boolean)
io.flutter.embedding.engine.systemchannels.SettingsChannel$MessageBuilder: io.flutter.embedding.engine.systemchannels.SettingsChannel$MessageBuilder setPlatformBrightness(io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness)
io.flutter.embedding.engine.systemchannels.SettingsChannel$MessageBuilder: void send()
io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness
io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness: io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness light
io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness: io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness dark
io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness: java.lang.String name
io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness: io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness[] $VALUES
io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness: io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness[] values()
io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness: io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness valueOf(java.lang.String)
io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness: SettingsChannel$PlatformBrightness(java.lang.String,int,java.lang.String)
io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness: void <clinit>()
io.flutter.embedding.engine.systemchannels.SystemChannel
io.flutter.embedding.engine.systemchannels.SystemChannel: io.flutter.plugin.common.BasicMessageChannel channel
io.flutter.embedding.engine.systemchannels.SystemChannel: SystemChannel(io.flutter.embedding.engine.dart.DartExecutor)
io.flutter.embedding.engine.systemchannels.SystemChannel: void sendMemoryPressureWarning()
io.flutter.embedding.engine.systemchannels.TextInputChannel
io.flutter.embedding.engine.systemchannels.TextInputChannel: java.lang.String TAG
io.flutter.embedding.engine.systemchannels.TextInputChannel: io.flutter.plugin.common.MethodChannel channel
io.flutter.embedding.engine.systemchannels.TextInputChannel: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputMethodHandler textInputMethodHandler
io.flutter.embedding.engine.systemchannels.TextInputChannel: io.flutter.plugin.common.MethodChannel$MethodCallHandler parsingMethodHandler
io.flutter.embedding.engine.systemchannels.TextInputChannel: TextInputChannel(io.flutter.embedding.engine.dart.DartExecutor)
io.flutter.embedding.engine.systemchannels.TextInputChannel: void updateEditingState(int,java.lang.String,int,int,int,int)
io.flutter.embedding.engine.systemchannels.TextInputChannel: void newline(int)
io.flutter.embedding.engine.systemchannels.TextInputChannel: void go(int)
io.flutter.embedding.engine.systemchannels.TextInputChannel: void search(int)
io.flutter.embedding.engine.systemchannels.TextInputChannel: void send(int)
io.flutter.embedding.engine.systemchannels.TextInputChannel: void done(int)
io.flutter.embedding.engine.systemchannels.TextInputChannel: void next(int)
io.flutter.embedding.engine.systemchannels.TextInputChannel: void previous(int)
io.flutter.embedding.engine.systemchannels.TextInputChannel: void unspecifiedAction(int)
io.flutter.embedding.engine.systemchannels.TextInputChannel: void setTextInputMethodHandler(io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputMethodHandler)
io.flutter.embedding.engine.systemchannels.TextInputChannel: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputMethodHandler access$000(io.flutter.embedding.engine.systemchannels.TextInputChannel)
io.flutter.embedding.engine.systemchannels.TextInputChannel$1
io.flutter.embedding.engine.systemchannels.TextInputChannel$1: io.flutter.embedding.engine.systemchannels.TextInputChannel this$0
io.flutter.embedding.engine.systemchannels.TextInputChannel$1: TextInputChannel$1(io.flutter.embedding.engine.systemchannels.TextInputChannel)
io.flutter.embedding.engine.systemchannels.TextInputChannel$1: void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration
io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration: boolean obscureText
io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration: boolean autocorrect
io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization textCapitalization
io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration: io.flutter.embedding.engine.systemchannels.TextInputChannel$InputType inputType
io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration: java.lang.Integer inputAction
io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration: java.lang.String actionLabel
io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration: io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration fromJson(org.json.JSONObject)
io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration: java.lang.Integer inputActionFromTextInputAction(java.lang.String)
io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration: TextInputChannel$Configuration(boolean,boolean,io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization,io.flutter.embedding.engine.systemchannels.TextInputChannel$InputType,java.lang.Integer,java.lang.String)
io.flutter.embedding.engine.systemchannels.TextInputChannel$InputType
io.flutter.embedding.engine.systemchannels.TextInputChannel$InputType: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType type
io.flutter.embedding.engine.systemchannels.TextInputChannel$InputType: boolean isSigned
io.flutter.embedding.engine.systemchannels.TextInputChannel$InputType: boolean isDecimal
io.flutter.embedding.engine.systemchannels.TextInputChannel$InputType: io.flutter.embedding.engine.systemchannels.TextInputChannel$InputType fromJson(org.json.JSONObject)
io.flutter.embedding.engine.systemchannels.TextInputChannel$InputType: TextInputChannel$InputType(io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType,boolean,boolean)
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization CHARACTERS
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization WORDS
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization SENTENCES
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization NONE
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization: java.lang.String encodedName
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization[] $VALUES
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization[] values()
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization valueOf(java.lang.String)
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization fromValue(java.lang.String)
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization: TextInputChannel$TextCapitalization(java.lang.String,int,java.lang.String)
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization: void <clinit>()
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState: java.lang.String text
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState: int selectionStart
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState: int selectionEnd
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState fromJson(org.json.JSONObject)
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState: TextInputChannel$TextEditState(java.lang.String,int,int)
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputMethodHandler
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputMethodHandler: void show()
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputMethodHandler: void hide()
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputMethodHandler: void setClient(int,io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration)
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputMethodHandler: void setEditingState(io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState)
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputMethodHandler: void clearClient()
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType TEXT
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType DATETIME
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType NUMBER
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType PHONE
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType MULTILINE
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType EMAIL_ADDRESS
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType URL
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType: java.lang.String encodedName
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType[] $VALUES
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType[] values()
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType valueOf(java.lang.String)
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType fromValue(java.lang.String)
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType: TextInputChannel$TextInputType(java.lang.String,int,java.lang.String)
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType: void <clinit>()
io.flutter.plugin.common.ActivityLifecycleListener
io.flutter.plugin.common.ActivityLifecycleListener: void onPostResume()
io.flutter.plugin.common.BasicMessageChannel
io.flutter.plugin.common.BasicMessageChannel: java.lang.String TAG
io.flutter.plugin.common.BasicMessageChannel: io.flutter.plugin.common.BinaryMessenger messenger
io.flutter.plugin.common.BasicMessageChannel: java.lang.String name
io.flutter.plugin.common.BasicMessageChannel: io.flutter.plugin.common.MessageCodec codec
io.flutter.plugin.common.BasicMessageChannel: boolean $assertionsDisabled
io.flutter.plugin.common.BasicMessageChannel: BasicMessageChannel(io.flutter.plugin.common.BinaryMessenger,java.lang.String,io.flutter.plugin.common.MessageCodec)
io.flutter.plugin.common.BasicMessageChannel: void send(java.lang.Object)
io.flutter.plugin.common.BasicMessageChannel: void send(java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.plugin.common.BasicMessageChannel: void setMessageHandler(io.flutter.plugin.common.BasicMessageChannel$MessageHandler)
io.flutter.plugin.common.BasicMessageChannel: io.flutter.plugin.common.MessageCodec access$200(io.flutter.plugin.common.BasicMessageChannel)
io.flutter.plugin.common.BasicMessageChannel: java.lang.String access$300(io.flutter.plugin.common.BasicMessageChannel)
io.flutter.plugin.common.BasicMessageChannel: void <clinit>()
io.flutter.plugin.common.BasicMessageChannel$1
io.flutter.plugin.common.BasicMessageChannel$IncomingMessageHandler
io.flutter.plugin.common.BasicMessageChannel$IncomingMessageHandler: io.flutter.plugin.common.BasicMessageChannel$MessageHandler handler
io.flutter.plugin.common.BasicMessageChannel$IncomingMessageHandler: io.flutter.plugin.common.BasicMessageChannel this$0
io.flutter.plugin.common.BasicMessageChannel$IncomingMessageHandler: BasicMessageChannel$IncomingMessageHandler(io.flutter.plugin.common.BasicMessageChannel,io.flutter.plugin.common.BasicMessageChannel$MessageHandler)
io.flutter.plugin.common.BasicMessageChannel$IncomingMessageHandler: void onMessage(java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply)
io.flutter.plugin.common.BasicMessageChannel$IncomingMessageHandler: BasicMessageChannel$IncomingMessageHandler(io.flutter.plugin.common.BasicMessageChannel,io.flutter.plugin.common.BasicMessageChannel$MessageHandler,io.flutter.plugin.common.BasicMessageChannel$1)
io.flutter.plugin.common.BasicMessageChannel$IncomingMessageHandler$1
io.flutter.plugin.common.BasicMessageChannel$IncomingMessageHandler$1: io.flutter.plugin.common.BinaryMessenger$BinaryReply val$callback
io.flutter.plugin.common.BasicMessageChannel$IncomingMessageHandler$1: io.flutter.plugin.common.BasicMessageChannel$IncomingMessageHandler this$1
io.flutter.plugin.common.BasicMessageChannel$IncomingMessageHandler$1: BasicMessageChannel$IncomingMessageHandler$1(io.flutter.plugin.common.BasicMessageChannel$IncomingMessageHandler,io.flutter.plugin.common.BinaryMessenger$BinaryReply)
io.flutter.plugin.common.BasicMessageChannel$IncomingMessageHandler$1: void reply(java.lang.Object)
io.flutter.plugin.common.BasicMessageChannel$IncomingReplyHandler
io.flutter.plugin.common.BasicMessageChannel$IncomingReplyHandler: io.flutter.plugin.common.BasicMessageChannel$Reply callback
io.flutter.plugin.common.BasicMessageChannel$IncomingReplyHandler: io.flutter.plugin.common.BasicMessageChannel this$0
io.flutter.plugin.common.BasicMessageChannel$IncomingReplyHandler: BasicMessageChannel$IncomingReplyHandler(io.flutter.plugin.common.BasicMessageChannel,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.plugin.common.BasicMessageChannel$IncomingReplyHandler: void reply(java.nio.ByteBuffer)
io.flutter.plugin.common.BasicMessageChannel$IncomingReplyHandler: BasicMessageChannel$IncomingReplyHandler(io.flutter.plugin.common.BasicMessageChannel,io.flutter.plugin.common.BasicMessageChannel$Reply,io.flutter.plugin.common.BasicMessageChannel$1)
io.flutter.plugin.common.BasicMessageChannel$MessageHandler
io.flutter.plugin.common.BasicMessageChannel$MessageHandler: void onMessage(java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.plugin.common.BasicMessageChannel$Reply
io.flutter.plugin.common.BasicMessageChannel$Reply: void reply(java.lang.Object)
io.flutter.plugin.common.BinaryCodec
io.flutter.plugin.common.BinaryCodec: io.flutter.plugin.common.BinaryCodec INSTANCE
io.flutter.plugin.common.BinaryCodec: BinaryCodec()
io.flutter.plugin.common.BinaryCodec: java.nio.ByteBuffer encodeMessage(java.nio.ByteBuffer)
io.flutter.plugin.common.BinaryCodec: java.nio.ByteBuffer decodeMessage(java.nio.ByteBuffer)
io.flutter.plugin.common.BinaryCodec: java.lang.Object decodeMessage(java.nio.ByteBuffer)
io.flutter.plugin.common.BinaryCodec: java.nio.ByteBuffer encodeMessage(java.lang.Object)
io.flutter.plugin.common.BinaryCodec: void <clinit>()
io.flutter.plugin.common.BinaryMessenger
io.flutter.plugin.common.BinaryMessenger: void send(java.lang.String,java.nio.ByteBuffer)
io.flutter.plugin.common.BinaryMessenger: void send(java.lang.String,java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply)
io.flutter.plugin.common.BinaryMessenger: void setMessageHandler(java.lang.String,io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler)
io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler
io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler: void onMessage(java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply)
io.flutter.plugin.common.BinaryMessenger$BinaryReply
io.flutter.plugin.common.BinaryMessenger$BinaryReply: void reply(java.nio.ByteBuffer)
io.flutter.plugin.common.ErrorLogResult
io.flutter.plugin.common.ErrorLogResult: java.lang.String tag
io.flutter.plugin.common.ErrorLogResult: int level
io.flutter.plugin.common.ErrorLogResult: ErrorLogResult(java.lang.String)
io.flutter.plugin.common.ErrorLogResult: ErrorLogResult(java.lang.String,int)
io.flutter.plugin.common.ErrorLogResult: void success(java.lang.Object)
io.flutter.plugin.common.ErrorLogResult: void error(java.lang.String,java.lang.String,java.lang.Object)
io.flutter.plugin.common.ErrorLogResult: void notImplemented()
io.flutter.plugin.common.EventChannel
io.flutter.plugin.common.EventChannel: java.lang.String TAG
io.flutter.plugin.common.EventChannel: io.flutter.plugin.common.BinaryMessenger messenger
io.flutter.plugin.common.EventChannel: java.lang.String name
io.flutter.plugin.common.EventChannel: io.flutter.plugin.common.MethodCodec codec
io.flutter.plugin.common.EventChannel: boolean $assertionsDisabled
io.flutter.plugin.common.EventChannel: EventChannel(io.flutter.plugin.common.BinaryMessenger,java.lang.String)
io.flutter.plugin.common.EventChannel: EventChannel(io.flutter.plugin.common.BinaryMessenger,java.lang.String,io.flutter.plugin.common.MethodCodec)
io.flutter.plugin.common.EventChannel: void setStreamHandler(io.flutter.plugin.common.EventChannel$StreamHandler)
io.flutter.plugin.common.EventChannel: io.flutter.plugin.common.MethodCodec access$000(io.flutter.plugin.common.EventChannel)
io.flutter.plugin.common.EventChannel: java.lang.String access$200(io.flutter.plugin.common.EventChannel)
io.flutter.plugin.common.EventChannel: io.flutter.plugin.common.BinaryMessenger access$400(io.flutter.plugin.common.EventChannel)
io.flutter.plugin.common.EventChannel: void <clinit>()
io.flutter.plugin.common.EventChannel$1
io.flutter.plugin.common.EventChannel$EventSink
io.flutter.plugin.common.EventChannel$EventSink: void success(java.lang.Object)
io.flutter.plugin.common.EventChannel$EventSink: void error(java.lang.String,java.lang.String,java.lang.Object)
io.flutter.plugin.common.EventChannel$EventSink: void endOfStream()
io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler
io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler: io.flutter.plugin.common.EventChannel$StreamHandler handler
io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler: java.util.concurrent.atomic.AtomicReference activeSink
io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler: io.flutter.plugin.common.EventChannel this$0
io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler: EventChannel$IncomingStreamRequestHandler(io.flutter.plugin.common.EventChannel,io.flutter.plugin.common.EventChannel$StreamHandler)
io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler: void onMessage(java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply)
io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler: void onListen(java.lang.Object,io.flutter.plugin.common.BinaryMessenger$BinaryReply)
io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler: void onCancel(java.lang.Object,io.flutter.plugin.common.BinaryMessenger$BinaryReply)
io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler: java.util.concurrent.atomic.AtomicReference access$300(io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler)
io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler$EventSinkImplementation
io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler$EventSinkImplementation: java.util.concurrent.atomic.AtomicBoolean hasEnded
io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler$EventSinkImplementation: io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler this$1
io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler$EventSinkImplementation: EventChannel$IncomingStreamRequestHandler$EventSinkImplementation(io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler)
io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler$EventSinkImplementation: void success(java.lang.Object)
io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler$EventSinkImplementation: void error(java.lang.String,java.lang.String,java.lang.Object)
io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler$EventSinkImplementation: void endOfStream()
io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler$EventSinkImplementation: EventChannel$IncomingStreamRequestHandler$EventSinkImplementation(io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler,io.flutter.plugin.common.EventChannel$1)
io.flutter.plugin.common.EventChannel$StreamHandler
io.flutter.plugin.common.EventChannel$StreamHandler: void onListen(java.lang.Object,io.flutter.plugin.common.EventChannel$EventSink)
io.flutter.plugin.common.EventChannel$StreamHandler: void onCancel(java.lang.Object)
io.flutter.plugin.common.FlutterException
io.flutter.plugin.common.FlutterException: java.lang.String code
io.flutter.plugin.common.FlutterException: java.lang.Object details
io.flutter.plugin.common.FlutterException: boolean $assertionsDisabled
io.flutter.plugin.common.FlutterException: FlutterException(java.lang.String,java.lang.String,java.lang.Object)
io.flutter.plugin.common.FlutterException: void <clinit>()
io.flutter.plugin.common.JSONMessageCodec
io.flutter.plugin.common.JSONMessageCodec: io.flutter.plugin.common.JSONMessageCodec INSTANCE
io.flutter.plugin.common.JSONMessageCodec: JSONMessageCodec()
io.flutter.plugin.common.JSONMessageCodec: java.nio.ByteBuffer encodeMessage(java.lang.Object)
io.flutter.plugin.common.JSONMessageCodec: java.lang.Object decodeMessage(java.nio.ByteBuffer)
io.flutter.plugin.common.JSONMessageCodec: void <clinit>()
io.flutter.plugin.common.JSONMethodCodec
io.flutter.plugin.common.JSONMethodCodec: io.flutter.plugin.common.JSONMethodCodec INSTANCE
io.flutter.plugin.common.JSONMethodCodec: JSONMethodCodec()
io.flutter.plugin.common.JSONMethodCodec: java.nio.ByteBuffer encodeMethodCall(io.flutter.plugin.common.MethodCall)
io.flutter.plugin.common.JSONMethodCodec: io.flutter.plugin.common.MethodCall decodeMethodCall(java.nio.ByteBuffer)
io.flutter.plugin.common.JSONMethodCodec: java.nio.ByteBuffer encodeSuccessEnvelope(java.lang.Object)
io.flutter.plugin.common.JSONMethodCodec: java.nio.ByteBuffer encodeErrorEnvelope(java.lang.String,java.lang.String,java.lang.Object)
io.flutter.plugin.common.JSONMethodCodec: java.lang.Object decodeEnvelope(java.nio.ByteBuffer)
io.flutter.plugin.common.JSONMethodCodec: java.lang.Object unwrapNull(java.lang.Object)
io.flutter.plugin.common.JSONMethodCodec: void <clinit>()
io.flutter.plugin.common.JSONUtil
io.flutter.plugin.common.JSONUtil: JSONUtil()
io.flutter.plugin.common.JSONUtil: java.lang.Object unwrap(java.lang.Object)
io.flutter.plugin.common.JSONUtil: java.lang.Object wrap(java.lang.Object)
io.flutter.plugin.common.MessageCodec
io.flutter.plugin.common.MessageCodec: java.nio.ByteBuffer encodeMessage(java.lang.Object)
io.flutter.plugin.common.MessageCodec: java.lang.Object decodeMessage(java.nio.ByteBuffer)
io.flutter.plugin.common.MethodCall
io.flutter.plugin.common.MethodCall: java.lang.String method
io.flutter.plugin.common.MethodCall: java.lang.Object arguments
io.flutter.plugin.common.MethodCall: boolean $assertionsDisabled
io.flutter.plugin.common.MethodCall: MethodCall(java.lang.String,java.lang.Object)
io.flutter.plugin.common.MethodCall: java.lang.Object arguments()
io.flutter.plugin.common.MethodCall: java.lang.Object argument(java.lang.String)
io.flutter.plugin.common.MethodCall: boolean hasArgument(java.lang.String)
io.flutter.plugin.common.MethodCall: void <clinit>()
io.flutter.plugin.common.MethodChannel
io.flutter.plugin.common.MethodChannel: java.lang.String TAG
io.flutter.plugin.common.MethodChannel: io.flutter.plugin.common.BinaryMessenger messenger
io.flutter.plugin.common.MethodChannel: java.lang.String name
io.flutter.plugin.common.MethodChannel: io.flutter.plugin.common.MethodCodec codec
io.flutter.plugin.common.MethodChannel: boolean $assertionsDisabled
io.flutter.plugin.common.MethodChannel: MethodChannel(io.flutter.plugin.common.BinaryMessenger,java.lang.String)
io.flutter.plugin.common.MethodChannel: MethodChannel(io.flutter.plugin.common.BinaryMessenger,java.lang.String,io.flutter.plugin.common.MethodCodec)
io.flutter.plugin.common.MethodChannel: void invokeMethod(java.lang.String,java.lang.Object)
io.flutter.plugin.common.MethodChannel: void invokeMethod(java.lang.String,java.lang.Object,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.plugin.common.MethodChannel: void setMethodCallHandler(io.flutter.plugin.common.MethodChannel$MethodCallHandler)
io.flutter.plugin.common.MethodChannel: io.flutter.plugin.common.MethodCodec access$000(io.flutter.plugin.common.MethodChannel)
io.flutter.plugin.common.MethodChannel: java.lang.String access$100(io.flutter.plugin.common.MethodChannel)
io.flutter.plugin.common.MethodChannel: void <clinit>()
io.flutter.plugin.common.MethodChannel$IncomingMethodCallHandler
io.flutter.plugin.common.MethodChannel$IncomingMethodCallHandler: io.flutter.plugin.common.MethodChannel$MethodCallHandler handler
io.flutter.plugin.common.MethodChannel$IncomingMethodCallHandler: io.flutter.plugin.common.MethodChannel this$0
io.flutter.plugin.common.MethodChannel$IncomingMethodCallHandler: MethodChannel$IncomingMethodCallHandler(io.flutter.plugin.common.MethodChannel,io.flutter.plugin.common.MethodChannel$MethodCallHandler)
io.flutter.plugin.common.MethodChannel$IncomingMethodCallHandler: void onMessage(java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply)
io.flutter.plugin.common.MethodChannel$IncomingMethodCallHandler$1
io.flutter.plugin.common.MethodChannel$IncomingMethodCallHandler$1: io.flutter.plugin.common.BinaryMessenger$BinaryReply val$reply
io.flutter.plugin.common.MethodChannel$IncomingMethodCallHandler$1: io.flutter.plugin.common.MethodChannel$IncomingMethodCallHandler this$1
io.flutter.plugin.common.MethodChannel$IncomingMethodCallHandler$1: MethodChannel$IncomingMethodCallHandler$1(io.flutter.plugin.common.MethodChannel$IncomingMethodCallHandler,io.flutter.plugin.common.BinaryMessenger$BinaryReply)
io.flutter.plugin.common.MethodChannel$IncomingMethodCallHandler$1: void success(java.lang.Object)
io.flutter.plugin.common.MethodChannel$IncomingMethodCallHandler$1: void error(java.lang.String,java.lang.String,java.lang.Object)
io.flutter.plugin.common.MethodChannel$IncomingMethodCallHandler$1: void notImplemented()
io.flutter.plugin.common.MethodChannel$IncomingResultHandler
io.flutter.plugin.common.MethodChannel$IncomingResultHandler: io.flutter.plugin.common.MethodChannel$Result callback
io.flutter.plugin.common.MethodChannel$IncomingResultHandler: io.flutter.plugin.common.MethodChannel this$0
io.flutter.plugin.common.MethodChannel$IncomingResultHandler: MethodChannel$IncomingResultHandler(io.flutter.plugin.common.MethodChannel,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.plugin.common.MethodChannel$IncomingResultHandler: void reply(java.nio.ByteBuffer)
io.flutter.plugin.common.MethodChannel$MethodCallHandler
io.flutter.plugin.common.MethodChannel$MethodCallHandler: void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.plugin.common.MethodChannel$Result
io.flutter.plugin.common.MethodChannel$Result: void success(java.lang.Object)
io.flutter.plugin.common.MethodChannel$Result: void error(java.lang.String,java.lang.String,java.lang.Object)
io.flutter.plugin.common.MethodChannel$Result: void notImplemented()
io.flutter.plugin.common.MethodCodec
io.flutter.plugin.common.MethodCodec: java.nio.ByteBuffer encodeMethodCall(io.flutter.plugin.common.MethodCall)
io.flutter.plugin.common.MethodCodec: io.flutter.plugin.common.MethodCall decodeMethodCall(java.nio.ByteBuffer)
io.flutter.plugin.common.MethodCodec: java.nio.ByteBuffer encodeSuccessEnvelope(java.lang.Object)
io.flutter.plugin.common.MethodCodec: java.nio.ByteBuffer encodeErrorEnvelope(java.lang.String,java.lang.String,java.lang.Object)
io.flutter.plugin.common.MethodCodec: java.lang.Object decodeEnvelope(java.nio.ByteBuffer)
io.flutter.plugin.common.PluginRegistry
io.flutter.plugin.common.PluginRegistry: io.flutter.plugin.common.PluginRegistry$Registrar registrarFor(java.lang.String)
io.flutter.plugin.common.PluginRegistry: boolean hasPlugin(java.lang.String)
io.flutter.plugin.common.PluginRegistry: java.lang.Object valuePublishedByPlugin(java.lang.String)
io.flutter.plugin.common.PluginRegistry$ActivityResultListener
io.flutter.plugin.common.PluginRegistry$ActivityResultListener: boolean onActivityResult(int,int,android.content.Intent)
io.flutter.plugin.common.PluginRegistry$NewIntentListener
io.flutter.plugin.common.PluginRegistry$NewIntentListener: boolean onNewIntent(android.content.Intent)
io.flutter.plugin.common.PluginRegistry$PluginRegistrantCallback
io.flutter.plugin.common.PluginRegistry$PluginRegistrantCallback: void registerWith(io.flutter.plugin.common.PluginRegistry)
io.flutter.plugin.common.PluginRegistry$Registrar
io.flutter.plugin.common.PluginRegistry$Registrar: android.app.Activity activity()
io.flutter.plugin.common.PluginRegistry$Registrar: android.content.Context context()
io.flutter.plugin.common.PluginRegistry$Registrar: android.content.Context activeContext()
io.flutter.plugin.common.PluginRegistry$Registrar: io.flutter.plugin.common.BinaryMessenger messenger()
io.flutter.plugin.common.PluginRegistry$Registrar: io.flutter.view.TextureRegistry textures()
io.flutter.plugin.common.PluginRegistry$Registrar: io.flutter.plugin.platform.PlatformViewRegistry platformViewRegistry()
io.flutter.plugin.common.PluginRegistry$Registrar: io.flutter.view.FlutterView view()
io.flutter.plugin.common.PluginRegistry$Registrar: java.lang.String lookupKeyForAsset(java.lang.String)
io.flutter.plugin.common.PluginRegistry$Registrar: java.lang.String lookupKeyForAsset(java.lang.String,java.lang.String)
io.flutter.plugin.common.PluginRegistry$Registrar: io.flutter.plugin.common.PluginRegistry$Registrar publish(java.lang.Object)
io.flutter.plugin.common.PluginRegistry$Registrar: io.flutter.plugin.common.PluginRegistry$Registrar addRequestPermissionsResultListener(io.flutter.plugin.common.PluginRegistry$RequestPermissionsResultListener)
io.flutter.plugin.common.PluginRegistry$Registrar: io.flutter.plugin.common.PluginRegistry$Registrar addActivityResultListener(io.flutter.plugin.common.PluginRegistry$ActivityResultListener)
io.flutter.plugin.common.PluginRegistry$Registrar: io.flutter.plugin.common.PluginRegistry$Registrar addNewIntentListener(io.flutter.plugin.common.PluginRegistry$NewIntentListener)
io.flutter.plugin.common.PluginRegistry$Registrar: io.flutter.plugin.common.PluginRegistry$Registrar addUserLeaveHintListener(io.flutter.plugin.common.PluginRegistry$UserLeaveHintListener)
io.flutter.plugin.common.PluginRegistry$Registrar: io.flutter.plugin.common.PluginRegistry$Registrar addViewDestroyListener(io.flutter.plugin.common.PluginRegistry$ViewDestroyListener)
io.flutter.plugin.common.PluginRegistry$RequestPermissionsResultListener
io.flutter.plugin.common.PluginRegistry$RequestPermissionsResultListener: boolean onRequestPermissionsResult(int,java.lang.String[],int[])
io.flutter.plugin.common.PluginRegistry$UserLeaveHintListener
io.flutter.plugin.common.PluginRegistry$UserLeaveHintListener: void onUserLeaveHint()
io.flutter.plugin.common.PluginRegistry$ViewDestroyListener
io.flutter.plugin.common.PluginRegistry$ViewDestroyListener: boolean onViewDestroy(io.flutter.view.FlutterNativeView)
io.flutter.plugin.common.StandardMessageCodec
io.flutter.plugin.common.StandardMessageCodec: io.flutter.plugin.common.StandardMessageCodec INSTANCE
io.flutter.plugin.common.StandardMessageCodec: boolean LITTLE_ENDIAN
io.flutter.plugin.common.StandardMessageCodec: java.nio.charset.Charset UTF8
io.flutter.plugin.common.StandardMessageCodec: byte NULL
io.flutter.plugin.common.StandardMessageCodec: byte TRUE
io.flutter.plugin.common.StandardMessageCodec: byte FALSE
io.flutter.plugin.common.StandardMessageCodec: byte INT
io.flutter.plugin.common.StandardMessageCodec: byte LONG
io.flutter.plugin.common.StandardMessageCodec: byte BIGINT
io.flutter.plugin.common.StandardMessageCodec: byte DOUBLE
io.flutter.plugin.common.StandardMessageCodec: byte STRING
io.flutter.plugin.common.StandardMessageCodec: byte BYTE_ARRAY
io.flutter.plugin.common.StandardMessageCodec: byte INT_ARRAY
io.flutter.plugin.common.StandardMessageCodec: byte LONG_ARRAY
io.flutter.plugin.common.StandardMessageCodec: byte DOUBLE_ARRAY
io.flutter.plugin.common.StandardMessageCodec: byte LIST
io.flutter.plugin.common.StandardMessageCodec: byte MAP
io.flutter.plugin.common.StandardMessageCodec: boolean $assertionsDisabled
io.flutter.plugin.common.StandardMessageCodec: StandardMessageCodec()
io.flutter.plugin.common.StandardMessageCodec: java.nio.ByteBuffer encodeMessage(java.lang.Object)
io.flutter.plugin.common.StandardMessageCodec: java.lang.Object decodeMessage(java.nio.ByteBuffer)
io.flutter.plugin.common.StandardMessageCodec: void writeSize(java.io.ByteArrayOutputStream,int)
io.flutter.plugin.common.StandardMessageCodec: void writeChar(java.io.ByteArrayOutputStream,int)
io.flutter.plugin.common.StandardMessageCodec: void writeInt(java.io.ByteArrayOutputStream,int)
io.flutter.plugin.common.StandardMessageCodec: void writeLong(java.io.ByteArrayOutputStream,long)
io.flutter.plugin.common.StandardMessageCodec: void writeDouble(java.io.ByteArrayOutputStream,double)
io.flutter.plugin.common.StandardMessageCodec: void writeBytes(java.io.ByteArrayOutputStream,byte[])
io.flutter.plugin.common.StandardMessageCodec: void writeAlignment(java.io.ByteArrayOutputStream,int)
io.flutter.plugin.common.StandardMessageCodec: void writeValue(java.io.ByteArrayOutputStream,java.lang.Object)
io.flutter.plugin.common.StandardMessageCodec: int readSize(java.nio.ByteBuffer)
io.flutter.plugin.common.StandardMessageCodec: byte[] readBytes(java.nio.ByteBuffer)
io.flutter.plugin.common.StandardMessageCodec: void readAlignment(java.nio.ByteBuffer,int)
io.flutter.plugin.common.StandardMessageCodec: java.lang.Object readValue(java.nio.ByteBuffer)
io.flutter.plugin.common.StandardMessageCodec: java.lang.Object readValueOfType(byte,java.nio.ByteBuffer)
io.flutter.plugin.common.StandardMessageCodec: void <clinit>()
io.flutter.plugin.common.StandardMessageCodec$ExposedByteArrayOutputStream
io.flutter.plugin.common.StandardMessageCodec$ExposedByteArrayOutputStream: StandardMessageCodec$ExposedByteArrayOutputStream()
io.flutter.plugin.common.StandardMessageCodec$ExposedByteArrayOutputStream: byte[] buffer()
io.flutter.plugin.common.StandardMethodCodec
io.flutter.plugin.common.StandardMethodCodec: io.flutter.plugin.common.StandardMethodCodec INSTANCE
io.flutter.plugin.common.StandardMethodCodec: io.flutter.plugin.common.StandardMessageCodec messageCodec
io.flutter.plugin.common.StandardMethodCodec: StandardMethodCodec(io.flutter.plugin.common.StandardMessageCodec)
io.flutter.plugin.common.StandardMethodCodec: java.nio.ByteBuffer encodeMethodCall(io.flutter.plugin.common.MethodCall)
io.flutter.plugin.common.StandardMethodCodec: io.flutter.plugin.common.MethodCall decodeMethodCall(java.nio.ByteBuffer)
io.flutter.plugin.common.StandardMethodCodec: java.nio.ByteBuffer encodeSuccessEnvelope(java.lang.Object)
io.flutter.plugin.common.StandardMethodCodec: java.nio.ByteBuffer encodeErrorEnvelope(java.lang.String,java.lang.String,java.lang.Object)
io.flutter.plugin.common.StandardMethodCodec: java.lang.Object decodeEnvelope(java.nio.ByteBuffer)
io.flutter.plugin.common.StandardMethodCodec: void <clinit>()
io.flutter.plugin.common.StringCodec
io.flutter.plugin.common.StringCodec: java.nio.charset.Charset UTF8
io.flutter.plugin.common.StringCodec: io.flutter.plugin.common.StringCodec INSTANCE
io.flutter.plugin.common.StringCodec: StringCodec()
io.flutter.plugin.common.StringCodec: java.nio.ByteBuffer encodeMessage(java.lang.String)
io.flutter.plugin.common.StringCodec: java.lang.String decodeMessage(java.nio.ByteBuffer)
io.flutter.plugin.common.StringCodec: java.lang.Object decodeMessage(java.nio.ByteBuffer)
io.flutter.plugin.common.StringCodec: java.nio.ByteBuffer encodeMessage(java.lang.Object)
io.flutter.plugin.common.StringCodec: void <clinit>()
io.flutter.plugin.editing.InputConnectionAdaptor
io.flutter.plugin.editing.InputConnectionAdaptor: android.view.View mFlutterView
io.flutter.plugin.editing.InputConnectionAdaptor: int mClient
io.flutter.plugin.editing.InputConnectionAdaptor: io.flutter.embedding.engine.systemchannels.TextInputChannel textInputChannel
io.flutter.plugin.editing.InputConnectionAdaptor: android.text.Editable mEditable
io.flutter.plugin.editing.InputConnectionAdaptor: int mBatchCount
io.flutter.plugin.editing.InputConnectionAdaptor: android.view.inputmethod.InputMethodManager mImm
io.flutter.plugin.editing.InputConnectionAdaptor: io.flutter.plugin.common.MethodChannel$Result logger
io.flutter.plugin.editing.InputConnectionAdaptor: InputConnectionAdaptor(android.view.View,int,io.flutter.embedding.engine.systemchannels.TextInputChannel,android.text.Editable)
io.flutter.plugin.editing.InputConnectionAdaptor: void updateEditingState()
io.flutter.plugin.editing.InputConnectionAdaptor: android.text.Editable getEditable()
io.flutter.plugin.editing.InputConnectionAdaptor: boolean beginBatchEdit()
io.flutter.plugin.editing.InputConnectionAdaptor: boolean endBatchEdit()
io.flutter.plugin.editing.InputConnectionAdaptor: boolean commitText(java.lang.CharSequence,int)
io.flutter.plugin.editing.InputConnectionAdaptor: boolean deleteSurroundingText(int,int)
io.flutter.plugin.editing.InputConnectionAdaptor: boolean setComposingRegion(int,int)
io.flutter.plugin.editing.InputConnectionAdaptor: boolean setComposingText(java.lang.CharSequence,int)
io.flutter.plugin.editing.InputConnectionAdaptor: boolean setSelection(int,int)
io.flutter.plugin.editing.InputConnectionAdaptor: boolean sendKeyEvent(android.view.KeyEvent)
io.flutter.plugin.editing.InputConnectionAdaptor: boolean performEditorAction(int)
io.flutter.plugin.editing.InputConnectionAdaptor: void <clinit>()
io.flutter.plugin.editing.TextInputPlugin
io.flutter.plugin.editing.TextInputPlugin: android.view.View mView
io.flutter.plugin.editing.TextInputPlugin: android.view.inputmethod.InputMethodManager mImm
io.flutter.plugin.editing.TextInputPlugin: io.flutter.embedding.engine.systemchannels.TextInputChannel textInputChannel
io.flutter.plugin.editing.TextInputPlugin: int mClient
io.flutter.plugin.editing.TextInputPlugin: io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration configuration
io.flutter.plugin.editing.TextInputPlugin: android.text.Editable mEditable
io.flutter.plugin.editing.TextInputPlugin: boolean mRestartInputPending
io.flutter.plugin.editing.TextInputPlugin: android.view.inputmethod.InputConnection lastInputConnection
io.flutter.plugin.editing.TextInputPlugin: TextInputPlugin(android.view.View,io.flutter.embedding.engine.dart.DartExecutor)
io.flutter.plugin.editing.TextInputPlugin: android.view.inputmethod.InputMethodManager getInputMethodManager()
io.flutter.plugin.editing.TextInputPlugin: int inputTypeFromTextInputType(io.flutter.embedding.engine.systemchannels.TextInputChannel$InputType,boolean,boolean,io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization)
io.flutter.plugin.editing.TextInputPlugin: android.view.inputmethod.InputConnection createInputConnection(android.view.View,android.view.inputmethod.EditorInfo)
io.flutter.plugin.editing.TextInputPlugin: android.view.inputmethod.InputConnection getLastInputConnection()
io.flutter.plugin.editing.TextInputPlugin: void showTextInput(android.view.View)
io.flutter.plugin.editing.TextInputPlugin: void hideTextInput(android.view.View)
io.flutter.plugin.editing.TextInputPlugin: void setTextInputClient(int,io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration)
io.flutter.plugin.editing.TextInputPlugin: void applyStateToSelection(io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState)
io.flutter.plugin.editing.TextInputPlugin: void setTextInputEditingState(android.view.View,io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState)
io.flutter.plugin.editing.TextInputPlugin: void clearTextInputClient()
io.flutter.plugin.editing.TextInputPlugin: android.view.View access$000(io.flutter.plugin.editing.TextInputPlugin)
io.flutter.plugin.editing.TextInputPlugin: void access$100(io.flutter.plugin.editing.TextInputPlugin,android.view.View)
io.flutter.plugin.editing.TextInputPlugin: void access$200(io.flutter.plugin.editing.TextInputPlugin,android.view.View)
io.flutter.plugin.editing.TextInputPlugin: void access$300(io.flutter.plugin.editing.TextInputPlugin,int,io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration)
io.flutter.plugin.editing.TextInputPlugin: void access$400(io.flutter.plugin.editing.TextInputPlugin,android.view.View,io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState)
io.flutter.plugin.editing.TextInputPlugin: void access$500(io.flutter.plugin.editing.TextInputPlugin)
io.flutter.plugin.editing.TextInputPlugin$1
io.flutter.plugin.editing.TextInputPlugin$1: io.flutter.plugin.editing.TextInputPlugin this$0
io.flutter.plugin.editing.TextInputPlugin$1: TextInputPlugin$1(io.flutter.plugin.editing.TextInputPlugin)
io.flutter.plugin.editing.TextInputPlugin$1: void show()
io.flutter.plugin.editing.TextInputPlugin$1: void hide()
io.flutter.plugin.editing.TextInputPlugin$1: void setClient(int,io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration)
io.flutter.plugin.editing.TextInputPlugin$1: void setEditingState(io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState)
io.flutter.plugin.editing.TextInputPlugin$1: void clearClient()
io.flutter.plugin.platform.AccessibilityEventsDelegate
io.flutter.plugin.platform.AccessibilityEventsDelegate: io.flutter.view.AccessibilityBridge accessibilityBridge
io.flutter.plugin.platform.AccessibilityEventsDelegate: AccessibilityEventsDelegate()
io.flutter.plugin.platform.AccessibilityEventsDelegate: boolean requestSendAccessibilityEvent(android.view.View,android.view.View,android.view.accessibility.AccessibilityEvent)
io.flutter.plugin.platform.AccessibilityEventsDelegate: void setAccessibilityBridge(io.flutter.view.AccessibilityBridge)
io.flutter.plugin.platform.PlatformPlugin
io.flutter.plugin.platform.PlatformPlugin: int DEFAULT_SYSTEM_UI
io.flutter.plugin.platform.PlatformPlugin: android.app.Activity activity
io.flutter.plugin.platform.PlatformPlugin: io.flutter.embedding.engine.systemchannels.PlatformChannel platformChannel
io.flutter.plugin.platform.PlatformPlugin: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle currentTheme
io.flutter.plugin.platform.PlatformPlugin: int mEnabledOverlays
io.flutter.plugin.platform.PlatformPlugin: io.flutter.embedding.engine.systemchannels.PlatformChannel$PlatformMessageHandler mPlatformMessageHandler
io.flutter.plugin.platform.PlatformPlugin: PlatformPlugin(android.app.Activity,io.flutter.embedding.engine.systemchannels.PlatformChannel)
io.flutter.plugin.platform.PlatformPlugin: void playSystemSound(io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType)
io.flutter.plugin.platform.PlatformPlugin: void vibrateHapticFeedback(io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType)
io.flutter.plugin.platform.PlatformPlugin: void setSystemChromePreferredOrientations(int)
io.flutter.plugin.platform.PlatformPlugin: void setSystemChromeApplicationSwitcherDescription(io.flutter.embedding.engine.systemchannels.PlatformChannel$AppSwitcherDescription)
io.flutter.plugin.platform.PlatformPlugin: void setSystemChromeEnabledSystemUIOverlays(java.util.List)
io.flutter.plugin.platform.PlatformPlugin: void updateSystemUiOverlays()
io.flutter.plugin.platform.PlatformPlugin: void restoreSystemChromeSystemUIOverlays()
io.flutter.plugin.platform.PlatformPlugin: void setSystemChromeSystemUIOverlayStyle(io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle)
io.flutter.plugin.platform.PlatformPlugin: void popSystemNavigator()
io.flutter.plugin.platform.PlatformPlugin: java.lang.CharSequence getClipboardData(io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat)
io.flutter.plugin.platform.PlatformPlugin: void setClipboardData(java.lang.String)
io.flutter.plugin.platform.PlatformPlugin: void onPostResume()
io.flutter.plugin.platform.PlatformPlugin: void access$000(io.flutter.plugin.platform.PlatformPlugin,io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType)
io.flutter.plugin.platform.PlatformPlugin: void access$100(io.flutter.plugin.platform.PlatformPlugin,io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType)
io.flutter.plugin.platform.PlatformPlugin: void access$200(io.flutter.plugin.platform.PlatformPlugin,int)
io.flutter.plugin.platform.PlatformPlugin: void access$300(io.flutter.plugin.platform.PlatformPlugin,io.flutter.embedding.engine.systemchannels.PlatformChannel$AppSwitcherDescription)
io.flutter.plugin.platform.PlatformPlugin: void access$400(io.flutter.plugin.platform.PlatformPlugin,java.util.List)
io.flutter.plugin.platform.PlatformPlugin: void access$500(io.flutter.plugin.platform.PlatformPlugin)
io.flutter.plugin.platform.PlatformPlugin: void access$600(io.flutter.plugin.platform.PlatformPlugin,io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle)
io.flutter.plugin.platform.PlatformPlugin: void access$700(io.flutter.plugin.platform.PlatformPlugin)
io.flutter.plugin.platform.PlatformPlugin: java.lang.CharSequence access$800(io.flutter.plugin.platform.PlatformPlugin,io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat)
io.flutter.plugin.platform.PlatformPlugin: void access$900(io.flutter.plugin.platform.PlatformPlugin,java.lang.String)
io.flutter.plugin.platform.PlatformPlugin$1
io.flutter.plugin.platform.PlatformPlugin$1: io.flutter.plugin.platform.PlatformPlugin this$0
io.flutter.plugin.platform.PlatformPlugin$1: PlatformPlugin$1(io.flutter.plugin.platform.PlatformPlugin)
io.flutter.plugin.platform.PlatformPlugin$1: void playSystemSound(io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType)
io.flutter.plugin.platform.PlatformPlugin$1: void vibrateHapticFeedback(io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType)
io.flutter.plugin.platform.PlatformPlugin$1: void setPreferredOrientations(int)
io.flutter.plugin.platform.PlatformPlugin$1: void setApplicationSwitcherDescription(io.flutter.embedding.engine.systemchannels.PlatformChannel$AppSwitcherDescription)
io.flutter.plugin.platform.PlatformPlugin$1: void showSystemOverlays(java.util.List)
io.flutter.plugin.platform.PlatformPlugin$1: void restoreSystemUiOverlays()
io.flutter.plugin.platform.PlatformPlugin$1: void setSystemUiOverlayStyle(io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle)
io.flutter.plugin.platform.PlatformPlugin$1: void popSystemNavigator()
io.flutter.plugin.platform.PlatformPlugin$1: java.lang.CharSequence getClipboardData(io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat)
io.flutter.plugin.platform.PlatformPlugin$1: void setClipboardData(java.lang.String)
io.flutter.plugin.platform.PlatformPlugin$2
io.flutter.plugin.platform.PlatformPlugin$2: int[] $SwitchMap$io$flutter$embedding$engine$systemchannels$PlatformChannel$HapticFeedbackType
io.flutter.plugin.platform.PlatformPlugin$2: int[] $SwitchMap$io$flutter$embedding$engine$systemchannels$PlatformChannel$SystemUiOverlay
io.flutter.plugin.platform.PlatformPlugin$2: int[] $SwitchMap$io$flutter$embedding$engine$systemchannels$PlatformChannel$Brightness
io.flutter.plugin.platform.PlatformPlugin$2: void <clinit>()
io.flutter.plugin.platform.PlatformView
io.flutter.plugin.platform.PlatformView: android.view.View getView()
io.flutter.plugin.platform.PlatformView: void dispose()
io.flutter.plugin.platform.PlatformViewFactory
io.flutter.plugin.platform.PlatformViewFactory: io.flutter.plugin.common.MessageCodec mCreateArgsCodec
io.flutter.plugin.platform.PlatformViewFactory: PlatformViewFactory(io.flutter.plugin.common.MessageCodec)
io.flutter.plugin.platform.PlatformViewFactory: io.flutter.plugin.platform.PlatformView create(android.content.Context,int,java.lang.Object)
io.flutter.plugin.platform.PlatformViewFactory: io.flutter.plugin.common.MessageCodec getCreateArgsCodec()
io.flutter.plugin.platform.PlatformViewRegistry
io.flutter.plugin.platform.PlatformViewRegistry: boolean registerViewFactory(java.lang.String,io.flutter.plugin.platform.PlatformViewFactory)
io.flutter.plugin.platform.PlatformViewRegistryImpl
io.flutter.plugin.platform.PlatformViewRegistryImpl: java.util.Map viewFactories
io.flutter.plugin.platform.PlatformViewRegistryImpl: PlatformViewRegistryImpl()
io.flutter.plugin.platform.PlatformViewRegistryImpl: boolean registerViewFactory(java.lang.String,io.flutter.plugin.platform.PlatformViewFactory)
io.flutter.plugin.platform.PlatformViewRegistryImpl: io.flutter.plugin.platform.PlatformViewFactory getFactory(java.lang.String)
io.flutter.plugin.platform.PlatformViewsAccessibilityDelegate
io.flutter.plugin.platform.PlatformViewsAccessibilityDelegate: android.view.View getPlatformViewById(java.lang.Integer)
io.flutter.plugin.platform.PlatformViewsAccessibilityDelegate: void attachAccessibilityBridge(io.flutter.view.AccessibilityBridge)
io.flutter.plugin.platform.PlatformViewsAccessibilityDelegate: void detachAccessibiltyBridge()
io.flutter.plugin.platform.PlatformViewsController
io.flutter.plugin.platform.PlatformViewsController: java.lang.String TAG
io.flutter.plugin.platform.PlatformViewsController: java.lang.String CHANNEL_NAME
io.flutter.plugin.platform.PlatformViewsController: int MINIMAL_SDK
io.flutter.plugin.platform.PlatformViewsController: io.flutter.plugin.platform.PlatformViewRegistryImpl mRegistry
io.flutter.plugin.platform.PlatformViewsController: android.content.Context mContext
io.flutter.plugin.platform.PlatformViewsController: io.flutter.view.TextureRegistry mTextureRegistry
io.flutter.plugin.platform.PlatformViewsController: io.flutter.plugin.common.BinaryMessenger mMessenger
io.flutter.plugin.platform.PlatformViewsController: io.flutter.plugin.platform.AccessibilityEventsDelegate mAccessibilityEventsDelegate
io.flutter.plugin.platform.PlatformViewsController: java.util.HashMap vdControllers
io.flutter.plugin.platform.PlatformViewsController: PlatformViewsController()
io.flutter.plugin.platform.PlatformViewsController: void attach(android.content.Context,io.flutter.view.TextureRegistry,io.flutter.plugin.common.BinaryMessenger)
io.flutter.plugin.platform.PlatformViewsController: void detach()
io.flutter.plugin.platform.PlatformViewsController: void attachAccessibilityBridge(io.flutter.view.AccessibilityBridge)
io.flutter.plugin.platform.PlatformViewsController: void detachAccessibiltyBridge()
io.flutter.plugin.platform.PlatformViewsController: io.flutter.plugin.platform.PlatformViewRegistry getRegistry()
io.flutter.plugin.platform.PlatformViewsController: void onFlutterViewDestroyed()
io.flutter.plugin.platform.PlatformViewsController: void onPreEngineRestart()
io.flutter.plugin.platform.PlatformViewsController: android.view.View getPlatformViewById(java.lang.Integer)
io.flutter.plugin.platform.PlatformViewsController: void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.plugin.platform.PlatformViewsController: void createPlatformView(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.plugin.platform.PlatformViewsController: void disposePlatformView(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.plugin.platform.PlatformViewsController: void resizePlatformView(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.plugin.platform.PlatformViewsController: void onTouch(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.plugin.platform.PlatformViewsController: void setDirection(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.plugin.platform.PlatformViewsController: boolean validateDirection(int)
io.flutter.plugin.platform.PlatformViewsController: java.util.List parsePointerPropertiesList(java.lang.Object)
io.flutter.plugin.platform.PlatformViewsController: android.view.MotionEvent$PointerProperties parsePointerProperties(java.lang.Object)
io.flutter.plugin.platform.PlatformViewsController: java.util.List parsePointerCoordsList(java.lang.Object,float)
io.flutter.plugin.platform.PlatformViewsController: android.view.MotionEvent$PointerCoords parsePointerCoords(java.lang.Object,float)
io.flutter.plugin.platform.PlatformViewsController: int toPhysicalPixels(double)
io.flutter.plugin.platform.PlatformViewsController: void flushAllViews()
io.flutter.plugin.platform.PlatformViewsController$1
io.flutter.plugin.platform.PlatformViewsController$1: io.flutter.plugin.common.MethodChannel$Result val$result
io.flutter.plugin.platform.PlatformViewsController$1: io.flutter.plugin.platform.PlatformViewsController this$0
io.flutter.plugin.platform.PlatformViewsController$1: PlatformViewsController$1(io.flutter.plugin.platform.PlatformViewsController,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.plugin.platform.PlatformViewsController$1: void run()
io.flutter.plugin.platform.SingleViewPresentation
io.flutter.plugin.platform.SingleViewPresentation: io.flutter.plugin.platform.PlatformViewFactory mViewFactory
io.flutter.plugin.platform.SingleViewPresentation: io.flutter.plugin.platform.AccessibilityEventsDelegate mAccessibilityEventsDelegate
io.flutter.plugin.platform.SingleViewPresentation: int mViewId
io.flutter.plugin.platform.SingleViewPresentation: java.lang.Object mCreateParams
io.flutter.plugin.platform.SingleViewPresentation: io.flutter.plugin.platform.SingleViewPresentation$AccessibilityDelegatingFrameLayout mRootView
io.flutter.plugin.platform.SingleViewPresentation: android.widget.FrameLayout mContainer
io.flutter.plugin.platform.SingleViewPresentation: io.flutter.plugin.platform.SingleViewPresentation$PresentationState mState
io.flutter.plugin.platform.SingleViewPresentation: SingleViewPresentation(android.content.Context,android.view.Display,io.flutter.plugin.platform.PlatformViewFactory,io.flutter.plugin.platform.AccessibilityEventsDelegate,int,java.lang.Object)
io.flutter.plugin.platform.SingleViewPresentation: SingleViewPresentation(android.content.Context,android.view.Display,io.flutter.plugin.platform.AccessibilityEventsDelegate,io.flutter.plugin.platform.SingleViewPresentation$PresentationState)
io.flutter.plugin.platform.SingleViewPresentation: void onCreate(android.os.Bundle)
io.flutter.plugin.platform.SingleViewPresentation: io.flutter.plugin.platform.SingleViewPresentation$PresentationState detachState()
io.flutter.plugin.platform.SingleViewPresentation: io.flutter.plugin.platform.PlatformView getView()
io.flutter.plugin.platform.SingleViewPresentation$AccessibilityDelegatingFrameLayout
io.flutter.plugin.platform.SingleViewPresentation$AccessibilityDelegatingFrameLayout: io.flutter.plugin.platform.AccessibilityEventsDelegate mAccessibilityEventsDelegate
io.flutter.plugin.platform.SingleViewPresentation$AccessibilityDelegatingFrameLayout: android.view.View mEmbeddedView
io.flutter.plugin.platform.SingleViewPresentation$AccessibilityDelegatingFrameLayout: SingleViewPresentation$AccessibilityDelegatingFrameLayout(android.content.Context,io.flutter.plugin.platform.AccessibilityEventsDelegate,android.view.View)
io.flutter.plugin.platform.SingleViewPresentation$AccessibilityDelegatingFrameLayout: boolean requestSendAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)
io.flutter.plugin.platform.SingleViewPresentation$FakeWindowViewGroup
io.flutter.plugin.platform.SingleViewPresentation$FakeWindowViewGroup: android.graphics.Rect mViewBounds
io.flutter.plugin.platform.SingleViewPresentation$FakeWindowViewGroup: android.graphics.Rect mChildRect
io.flutter.plugin.platform.SingleViewPresentation$FakeWindowViewGroup: SingleViewPresentation$FakeWindowViewGroup(android.content.Context)
io.flutter.plugin.platform.SingleViewPresentation$FakeWindowViewGroup: void onLayout(boolean,int,int,int,int)
io.flutter.plugin.platform.SingleViewPresentation$FakeWindowViewGroup: void onMeasure(int,int)
io.flutter.plugin.platform.SingleViewPresentation$FakeWindowViewGroup: int atMost(int)
io.flutter.plugin.platform.SingleViewPresentation$PresentationContext
io.flutter.plugin.platform.SingleViewPresentation$PresentationContext: android.view.WindowManager mWindowManager
io.flutter.plugin.platform.SingleViewPresentation$PresentationContext: io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler mWindowManagerHandler
io.flutter.plugin.platform.SingleViewPresentation$PresentationContext: SingleViewPresentation$PresentationContext(android.content.Context,io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler)
io.flutter.plugin.platform.SingleViewPresentation$PresentationContext: java.lang.Object getSystemService(java.lang.String)
io.flutter.plugin.platform.SingleViewPresentation$PresentationContext: android.view.WindowManager getWindowManager()
io.flutter.plugin.platform.SingleViewPresentation$PresentationState
io.flutter.plugin.platform.SingleViewPresentation$PresentationState: io.flutter.plugin.platform.PlatformView mView
io.flutter.plugin.platform.SingleViewPresentation$PresentationState: io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler mWindowManagerHandler
io.flutter.plugin.platform.SingleViewPresentation$PresentationState: io.flutter.plugin.platform.SingleViewPresentation$FakeWindowViewGroup mFakeWindowRootView
io.flutter.plugin.platform.SingleViewPresentation$PresentationState: SingleViewPresentation$PresentationState()
io.flutter.plugin.platform.SingleViewPresentation$PresentationState: io.flutter.plugin.platform.SingleViewPresentation$FakeWindowViewGroup access$000(io.flutter.plugin.platform.SingleViewPresentation$PresentationState)
io.flutter.plugin.platform.SingleViewPresentation$PresentationState: io.flutter.plugin.platform.SingleViewPresentation$FakeWindowViewGroup access$002(io.flutter.plugin.platform.SingleViewPresentation$PresentationState,io.flutter.plugin.platform.SingleViewPresentation$FakeWindowViewGroup)
io.flutter.plugin.platform.SingleViewPresentation$PresentationState: io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler access$100(io.flutter.plugin.platform.SingleViewPresentation$PresentationState)
io.flutter.plugin.platform.SingleViewPresentation$PresentationState: io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler access$102(io.flutter.plugin.platform.SingleViewPresentation$PresentationState,io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler)
io.flutter.plugin.platform.SingleViewPresentation$PresentationState: io.flutter.plugin.platform.PlatformView access$200(io.flutter.plugin.platform.SingleViewPresentation$PresentationState)
io.flutter.plugin.platform.SingleViewPresentation$PresentationState: io.flutter.plugin.platform.PlatformView access$202(io.flutter.plugin.platform.SingleViewPresentation$PresentationState,io.flutter.plugin.platform.PlatformView)
io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler
io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler: java.lang.String TAG
io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler: android.view.WindowManager mDelegate
io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler: io.flutter.plugin.platform.SingleViewPresentation$FakeWindowViewGroup mFakeWindowRootView
io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler: SingleViewPresentation$WindowManagerHandler(android.view.WindowManager,io.flutter.plugin.platform.SingleViewPresentation$FakeWindowViewGroup)
io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler: android.view.WindowManager getWindowManager()
io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler: java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])
io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler: void addView(java.lang.Object[])
io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler: void removeView(java.lang.Object[])
io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler: void removeViewImmediate(java.lang.Object[])
io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler: void updateViewLayout(java.lang.Object[])
io.flutter.plugin.platform.VirtualDisplayController
io.flutter.plugin.platform.VirtualDisplayController: android.content.Context mContext
io.flutter.plugin.platform.VirtualDisplayController: io.flutter.plugin.platform.AccessibilityEventsDelegate mAccessibilityEventsDelegate
io.flutter.plugin.platform.VirtualDisplayController: int mDensityDpi
io.flutter.plugin.platform.VirtualDisplayController: io.flutter.view.TextureRegistry$SurfaceTextureEntry mTextureEntry
io.flutter.plugin.platform.VirtualDisplayController: android.hardware.display.VirtualDisplay mVirtualDisplay
io.flutter.plugin.platform.VirtualDisplayController: io.flutter.plugin.platform.SingleViewPresentation mPresentation
io.flutter.plugin.platform.VirtualDisplayController: android.view.Surface mSurface
io.flutter.plugin.platform.VirtualDisplayController: io.flutter.plugin.platform.VirtualDisplayController create(android.content.Context,io.flutter.plugin.platform.AccessibilityEventsDelegate,io.flutter.plugin.platform.PlatformViewFactory,io.flutter.view.TextureRegistry$SurfaceTextureEntry,int,int,int,java.lang.Object)
io.flutter.plugin.platform.VirtualDisplayController: VirtualDisplayController(android.content.Context,io.flutter.plugin.platform.AccessibilityEventsDelegate,android.hardware.display.VirtualDisplay,io.flutter.plugin.platform.PlatformViewFactory,android.view.Surface,io.flutter.view.TextureRegistry$SurfaceTextureEntry,int,java.lang.Object)
io.flutter.plugin.platform.VirtualDisplayController: void resize(int,int,java.lang.Runnable)
io.flutter.plugin.platform.VirtualDisplayController: void dispose()
io.flutter.plugin.platform.VirtualDisplayController: android.view.View getView()
io.flutter.plugin.platform.VirtualDisplayController$1
io.flutter.plugin.platform.VirtualDisplayController$1: android.view.View val$embeddedView
io.flutter.plugin.platform.VirtualDisplayController$1: java.lang.Runnable val$onNewSizeFrameAvailable
io.flutter.plugin.platform.VirtualDisplayController$1: io.flutter.plugin.platform.VirtualDisplayController this$0
io.flutter.plugin.platform.VirtualDisplayController$1: VirtualDisplayController$1(io.flutter.plugin.platform.VirtualDisplayController,android.view.View,java.lang.Runnable)
io.flutter.plugin.platform.VirtualDisplayController$1: void onViewAttachedToWindow(android.view.View)
io.flutter.plugin.platform.VirtualDisplayController$1: void onViewDetachedFromWindow(android.view.View)
io.flutter.plugin.platform.VirtualDisplayController$1$1
io.flutter.plugin.platform.VirtualDisplayController$1$1: io.flutter.plugin.platform.VirtualDisplayController$1 this$1
io.flutter.plugin.platform.VirtualDisplayController$1$1: VirtualDisplayController$1$1(io.flutter.plugin.platform.VirtualDisplayController$1)
io.flutter.plugin.platform.VirtualDisplayController$1$1: void run()
io.flutter.plugin.platform.VirtualDisplayController$OneTimeOnDrawListener
io.flutter.plugin.platform.VirtualDisplayController$OneTimeOnDrawListener: android.view.View mView
io.flutter.plugin.platform.VirtualDisplayController$OneTimeOnDrawListener: java.lang.Runnable mOnDrawRunnable
io.flutter.plugin.platform.VirtualDisplayController$OneTimeOnDrawListener: void schedule(android.view.View,java.lang.Runnable)
io.flutter.plugin.platform.VirtualDisplayController$OneTimeOnDrawListener: VirtualDisplayController$OneTimeOnDrawListener(android.view.View,java.lang.Runnable)
io.flutter.plugin.platform.VirtualDisplayController$OneTimeOnDrawListener: void onDraw()
io.flutter.plugin.platform.VirtualDisplayController$OneTimeOnDrawListener$1
io.flutter.plugin.platform.VirtualDisplayController$OneTimeOnDrawListener$1: io.flutter.plugin.platform.VirtualDisplayController$OneTimeOnDrawListener this$0
io.flutter.plugin.platform.VirtualDisplayController$OneTimeOnDrawListener$1: VirtualDisplayController$OneTimeOnDrawListener$1(io.flutter.plugin.platform.VirtualDisplayController$OneTimeOnDrawListener)
io.flutter.plugin.platform.VirtualDisplayController$OneTimeOnDrawListener$1: void run()
io.flutter.plugins.GeneratedPluginRegistrant
io.flutter.plugins.GeneratedPluginRegistrant: GeneratedPluginRegistrant()
io.flutter.plugins.GeneratedPluginRegistrant: void registerWith(io.flutter.plugin.common.PluginRegistry)
io.flutter.plugins.GeneratedPluginRegistrant: boolean alreadyRegisteredWith(io.flutter.plugin.common.PluginRegistry)
io.flutter.util.BSDiff
io.flutter.util.BSDiff: BSDiff()
io.flutter.util.BSDiff: byte[] bspatch(byte[],byte[])
io.flutter.util.BSDiff: void read(java.io.InputStream,byte[],int,int)
io.flutter.util.PathUtils
io.flutter.util.PathUtils: PathUtils()
io.flutter.util.PathUtils: java.lang.String getFilesDir(android.content.Context)
io.flutter.util.PathUtils: java.lang.String getDataDirectory(android.content.Context)
io.flutter.util.PathUtils: java.lang.String getCacheDirectory(android.content.Context)
io.flutter.util.Preconditions
io.flutter.util.Preconditions: Preconditions()
io.flutter.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)
io.flutter.util.Predicate
io.flutter.util.Predicate: boolean test(java.lang.Object)
io.flutter.view.AccessibilityBridge
io.flutter.view.AccessibilityBridge: java.lang.String TAG
io.flutter.view.AccessibilityBridge: int ACTION_SHOW_ON_SCREEN
io.flutter.view.AccessibilityBridge: float SCROLL_EXTENT_FOR_INFINITY
io.flutter.view.AccessibilityBridge: float SCROLL_POSITION_CAP_FOR_INFINITY
io.flutter.view.AccessibilityBridge: int ROOT_NODE_ID
io.flutter.view.AccessibilityBridge: int MIN_ENGINE_GENERATED_NODE_ID
io.flutter.view.AccessibilityBridge: int FIRST_RESOURCE_ID
io.flutter.view.AccessibilityBridge: android.view.View rootAccessibilityView
io.flutter.view.AccessibilityBridge: io.flutter.embedding.engine.systemchannels.AccessibilityChannel accessibilityChannel
io.flutter.view.AccessibilityBridge: android.view.accessibility.AccessibilityManager accessibilityManager
io.flutter.view.AccessibilityBridge: io.flutter.view.AccessibilityViewEmbedder accessibilityViewEmbedder
io.flutter.view.AccessibilityBridge: io.flutter.plugin.platform.PlatformViewsAccessibilityDelegate platformViewsAccessibilityDelegate
io.flutter.view.AccessibilityBridge: android.content.ContentResolver contentResolver
io.flutter.view.AccessibilityBridge: java.util.Map flutterSemanticsTree
io.flutter.view.AccessibilityBridge: java.util.Map customAccessibilityActions
io.flutter.view.AccessibilityBridge: io.flutter.view.AccessibilityBridge$SemanticsNode accessibilityFocusedSemanticsNode
io.flutter.view.AccessibilityBridge: java.lang.Integer embeddedAccessibilityFocusedNodeId
io.flutter.view.AccessibilityBridge: java.lang.Integer embeddedInputFocusedNodeId
io.flutter.view.AccessibilityBridge: int accessibilityFeatureFlags
io.flutter.view.AccessibilityBridge: io.flutter.view.AccessibilityBridge$SemanticsNode inputFocusedSemanticsNode
io.flutter.view.AccessibilityBridge: io.flutter.view.AccessibilityBridge$SemanticsNode hoveredObject
io.flutter.view.AccessibilityBridge: java.util.List flutterNavigationStack
io.flutter.view.AccessibilityBridge: int previousRouteId
io.flutter.view.AccessibilityBridge: java.lang.Integer lastLeftFrameInset
io.flutter.view.AccessibilityBridge: io.flutter.view.AccessibilityBridge$OnAccessibilityChangeListener onAccessibilityChangeListener
io.flutter.view.AccessibilityBridge: io.flutter.embedding.engine.systemchannels.AccessibilityChannel$AccessibilityMessageHandler accessibilityMessageHandler
io.flutter.view.AccessibilityBridge: android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener accessibilityStateChangeListener
io.flutter.view.AccessibilityBridge: android.view.accessibility.AccessibilityManager$TouchExplorationStateChangeListener touchExplorationStateChangeListener
io.flutter.view.AccessibilityBridge: android.database.ContentObserver animationScaleObserver
io.flutter.view.AccessibilityBridge: boolean $assertionsDisabled
io.flutter.view.AccessibilityBridge: AccessibilityBridge(android.view.View,io.flutter.embedding.engine.systemchannels.AccessibilityChannel,android.view.accessibility.AccessibilityManager,android.content.ContentResolver,io.flutter.plugin.platform.PlatformViewsAccessibilityDelegate)
io.flutter.view.AccessibilityBridge: void release()
io.flutter.view.AccessibilityBridge: boolean isAccessibilityEnabled()
io.flutter.view.AccessibilityBridge: boolean isTouchExplorationEnabled()
io.flutter.view.AccessibilityBridge: void setOnAccessibilityChangeListener(io.flutter.view.AccessibilityBridge$OnAccessibilityChangeListener)
io.flutter.view.AccessibilityBridge: void sendLatestAccessibilityFlagsToFlutter()
io.flutter.view.AccessibilityBridge: boolean shouldSetCollectionInfo(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.flutter.view.AccessibilityBridge: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int)
io.flutter.view.AccessibilityBridge: boolean performAction(int,int,android.os.Bundle)
io.flutter.view.AccessibilityBridge: boolean performCursorMoveAction(io.flutter.view.AccessibilityBridge$SemanticsNode,int,android.os.Bundle,boolean)
io.flutter.view.AccessibilityBridge: android.view.accessibility.AccessibilityNodeInfo findFocus(int)
io.flutter.view.AccessibilityBridge: io.flutter.view.AccessibilityBridge$SemanticsNode getRootSemanticsNode()
io.flutter.view.AccessibilityBridge: io.flutter.view.AccessibilityBridge$SemanticsNode getOrCreateSemanticsNode(int)
io.flutter.view.AccessibilityBridge: io.flutter.view.AccessibilityBridge$CustomAccessibilityAction getOrCreateAccessibilityAction(int)
io.flutter.view.AccessibilityBridge: boolean onAccessibilityHoverEvent(android.view.MotionEvent)
io.flutter.view.AccessibilityBridge: void onTouchExplorationExit()
io.flutter.view.AccessibilityBridge: void handleTouchExploration(float,float)
io.flutter.view.AccessibilityBridge: void updateCustomAccessibilityActions(java.nio.ByteBuffer,java.lang.String[])
io.flutter.view.AccessibilityBridge: void updateSemantics(java.nio.ByteBuffer,java.lang.String[])
io.flutter.view.AccessibilityBridge: android.view.accessibility.AccessibilityEvent createTextChangedEvent(int,java.lang.String,java.lang.String)
io.flutter.view.AccessibilityBridge: void sendAccessibilityEvent(int,int)
io.flutter.view.AccessibilityBridge: void sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent)
io.flutter.view.AccessibilityBridge: void createAndSendWindowChangeEvent(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.flutter.view.AccessibilityBridge: android.view.accessibility.AccessibilityEvent obtainAccessibilityEvent(int,int)
io.flutter.view.AccessibilityBridge: void willRemoveSemanticsNode(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.flutter.view.AccessibilityBridge: void reset()
io.flutter.view.AccessibilityBridge: boolean externalViewRequestSendAccessibilityEvent(android.view.View,android.view.View,android.view.accessibility.AccessibilityEvent)
io.flutter.view.AccessibilityBridge: boolean lambda$shouldSetCollectionInfo$1(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.flutter.view.AccessibilityBridge: boolean lambda$shouldSetCollectionInfo$0(io.flutter.view.AccessibilityBridge$SemanticsNode,io.flutter.view.AccessibilityBridge$SemanticsNode)
io.flutter.view.AccessibilityBridge: android.view.View access$000(io.flutter.view.AccessibilityBridge)
io.flutter.view.AccessibilityBridge: void access$100(io.flutter.view.AccessibilityBridge,int,int)
io.flutter.view.AccessibilityBridge: android.view.accessibility.AccessibilityEvent access$200(io.flutter.view.AccessibilityBridge,int,int)
io.flutter.view.AccessibilityBridge: void access$300(io.flutter.view.AccessibilityBridge,android.view.accessibility.AccessibilityEvent)
io.flutter.view.AccessibilityBridge: io.flutter.embedding.engine.systemchannels.AccessibilityChannel$AccessibilityMessageHandler access$400(io.flutter.view.AccessibilityBridge)
io.flutter.view.AccessibilityBridge: io.flutter.embedding.engine.systemchannels.AccessibilityChannel access$500(io.flutter.view.AccessibilityBridge)
io.flutter.view.AccessibilityBridge: io.flutter.view.AccessibilityBridge$OnAccessibilityChangeListener access$600(io.flutter.view.AccessibilityBridge)
io.flutter.view.AccessibilityBridge: android.view.accessibility.AccessibilityManager access$700(io.flutter.view.AccessibilityBridge)
io.flutter.view.AccessibilityBridge: android.content.ContentResolver access$800(io.flutter.view.AccessibilityBridge)
io.flutter.view.AccessibilityBridge: int access$900(io.flutter.view.AccessibilityBridge)
io.flutter.view.AccessibilityBridge: int access$902(io.flutter.view.AccessibilityBridge,int)
io.flutter.view.AccessibilityBridge: void access$1000(io.flutter.view.AccessibilityBridge)
io.flutter.view.AccessibilityBridge: void access$1100(io.flutter.view.AccessibilityBridge)
io.flutter.view.AccessibilityBridge: io.flutter.view.AccessibilityBridge$SemanticsNode access$5800(io.flutter.view.AccessibilityBridge,int)
io.flutter.view.AccessibilityBridge: io.flutter.view.AccessibilityBridge$CustomAccessibilityAction access$5900(io.flutter.view.AccessibilityBridge,int)
io.flutter.view.AccessibilityBridge: void <clinit>()
io.flutter.view.AccessibilityBridge$1
io.flutter.view.AccessibilityBridge$1: io.flutter.view.AccessibilityBridge this$0
io.flutter.view.AccessibilityBridge$1: AccessibilityBridge$1(io.flutter.view.AccessibilityBridge)
io.flutter.view.AccessibilityBridge$1: void announce(java.lang.String)
io.flutter.view.AccessibilityBridge$1: void onTap(int)
io.flutter.view.AccessibilityBridge$1: void onLongPress(int)
io.flutter.view.AccessibilityBridge$1: void onTooltip(java.lang.String)
io.flutter.view.AccessibilityBridge$1: void updateCustomAccessibilityActions(java.nio.ByteBuffer,java.lang.String[])
io.flutter.view.AccessibilityBridge$1: void updateSemantics(java.nio.ByteBuffer,java.lang.String[])
io.flutter.view.AccessibilityBridge$2
io.flutter.view.AccessibilityBridge$2: io.flutter.view.AccessibilityBridge this$0
io.flutter.view.AccessibilityBridge$2: AccessibilityBridge$2(io.flutter.view.AccessibilityBridge)
io.flutter.view.AccessibilityBridge$2: void onAccessibilityStateChanged(boolean)
io.flutter.view.AccessibilityBridge$3
io.flutter.view.AccessibilityBridge$3: io.flutter.view.AccessibilityBridge this$0
io.flutter.view.AccessibilityBridge$3: AccessibilityBridge$3(io.flutter.view.AccessibilityBridge,android.os.Handler)
io.flutter.view.AccessibilityBridge$3: void onChange(boolean)
io.flutter.view.AccessibilityBridge$3: void onChange(boolean,android.net.Uri)
io.flutter.view.AccessibilityBridge$4
io.flutter.view.AccessibilityBridge$4: android.view.accessibility.AccessibilityManager val$accessibilityManager
io.flutter.view.AccessibilityBridge$4: io.flutter.view.AccessibilityBridge this$0
io.flutter.view.AccessibilityBridge$4: AccessibilityBridge$4(io.flutter.view.AccessibilityBridge,android.view.accessibility.AccessibilityManager)
io.flutter.view.AccessibilityBridge$4: void onTouchExplorationStateChanged(boolean)
io.flutter.view.AccessibilityBridge$AccessibilityFeature
io.flutter.view.AccessibilityBridge$AccessibilityFeature: io.flutter.view.AccessibilityBridge$AccessibilityFeature ACCESSIBLE_NAVIGATION
io.flutter.view.AccessibilityBridge$AccessibilityFeature: io.flutter.view.AccessibilityBridge$AccessibilityFeature INVERT_COLORS
io.flutter.view.AccessibilityBridge$AccessibilityFeature: io.flutter.view.AccessibilityBridge$AccessibilityFeature DISABLE_ANIMATIONS
io.flutter.view.AccessibilityBridge$AccessibilityFeature: int value
io.flutter.view.AccessibilityBridge$AccessibilityFeature: io.flutter.view.AccessibilityBridge$AccessibilityFeature[] $VALUES
io.flutter.view.AccessibilityBridge$AccessibilityFeature: io.flutter.view.AccessibilityBridge$AccessibilityFeature[] values()
io.flutter.view.AccessibilityBridge$AccessibilityFeature: io.flutter.view.AccessibilityBridge$AccessibilityFeature valueOf(java.lang.String)
io.flutter.view.AccessibilityBridge$AccessibilityFeature: AccessibilityBridge$AccessibilityFeature(java.lang.String,int,int)
io.flutter.view.AccessibilityBridge$AccessibilityFeature: void <clinit>()
io.flutter.view.AccessibilityBridge$Action
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action TAP
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action LONG_PRESS
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action SCROLL_LEFT
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action SCROLL_RIGHT
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action SCROLL_UP
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action SCROLL_DOWN
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action INCREASE
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action DECREASE
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action SHOW_ON_SCREEN
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action MOVE_CURSOR_FORWARD_BY_CHARACTER
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action MOVE_CURSOR_BACKWARD_BY_CHARACTER
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action SET_SELECTION
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action COPY
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action CUT
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action PASTE
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action DID_GAIN_ACCESSIBILITY_FOCUS
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action DID_LOSE_ACCESSIBILITY_FOCUS
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action CUSTOM_ACTION
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action DISMISS
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action MOVE_CURSOR_FORWARD_BY_WORD
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action MOVE_CURSOR_BACKWARD_BY_WORD
io.flutter.view.AccessibilityBridge$Action: int value
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action[] $VALUES
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action[] values()
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action valueOf(java.lang.String)
io.flutter.view.AccessibilityBridge$Action: AccessibilityBridge$Action(java.lang.String,int,int)
io.flutter.view.AccessibilityBridge$Action: void <clinit>()
io.flutter.view.AccessibilityBridge$CustomAccessibilityAction
io.flutter.view.AccessibilityBridge$CustomAccessibilityAction: int resourceId
io.flutter.view.AccessibilityBridge$CustomAccessibilityAction: int id
io.flutter.view.AccessibilityBridge$CustomAccessibilityAction: int overrideId
io.flutter.view.AccessibilityBridge$CustomAccessibilityAction: java.lang.String label
io.flutter.view.AccessibilityBridge$CustomAccessibilityAction: java.lang.String hint
io.flutter.view.AccessibilityBridge$CustomAccessibilityAction: AccessibilityBridge$CustomAccessibilityAction()
io.flutter.view.AccessibilityBridge$CustomAccessibilityAction: java.lang.String access$2400(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction)
io.flutter.view.AccessibilityBridge$CustomAccessibilityAction: int access$2800(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction)
io.flutter.view.AccessibilityBridge$CustomAccessibilityAction: java.lang.String access$2900(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction)
io.flutter.view.AccessibilityBridge$CustomAccessibilityAction: int access$3400(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction)
io.flutter.view.AccessibilityBridge$CustomAccessibilityAction: int access$3402(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction,int)
io.flutter.view.AccessibilityBridge$CustomAccessibilityAction: int access$2802(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction,int)
io.flutter.view.AccessibilityBridge$CustomAccessibilityAction: int access$3602(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction,int)
io.flutter.view.AccessibilityBridge$CustomAccessibilityAction: java.lang.String access$2902(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction,java.lang.String)
io.flutter.view.AccessibilityBridge$CustomAccessibilityAction: java.lang.String access$2402(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction,java.lang.String)
io.flutter.view.AccessibilityBridge$CustomAccessibilityAction: int access$3600(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction)
io.flutter.view.AccessibilityBridge$Flag
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag HAS_CHECKED_STATE
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag IS_CHECKED
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag IS_SELECTED
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag IS_BUTTON
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag IS_TEXT_FIELD
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag IS_FOCUSED
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag HAS_ENABLED_STATE
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag IS_ENABLED
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag IS_IN_MUTUALLY_EXCLUSIVE_GROUP
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag IS_HEADER
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag IS_OBSCURED
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag SCOPES_ROUTE
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag NAMES_ROUTE
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag IS_HIDDEN
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag IS_IMAGE
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag IS_LIVE_REGION
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag HAS_TOGGLED_STATE
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag IS_TOGGLED
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag HAS_IMPLICIT_SCROLLING
io.flutter.view.AccessibilityBridge$Flag: int value
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag[] $VALUES
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag[] values()
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag valueOf(java.lang.String)
io.flutter.view.AccessibilityBridge$Flag: AccessibilityBridge$Flag(java.lang.String,int,int)
io.flutter.view.AccessibilityBridge$Flag: void <clinit>()
io.flutter.view.AccessibilityBridge$OnAccessibilityChangeListener
io.flutter.view.AccessibilityBridge$OnAccessibilityChangeListener: void onAccessibilityChanged(boolean,boolean)
io.flutter.view.AccessibilityBridge$SemanticsNode
io.flutter.view.AccessibilityBridge$SemanticsNode: io.flutter.view.AccessibilityBridge accessibilityBridge
io.flutter.view.AccessibilityBridge$SemanticsNode: int id
io.flutter.view.AccessibilityBridge$SemanticsNode: int flags
io.flutter.view.AccessibilityBridge$SemanticsNode: int actions
io.flutter.view.AccessibilityBridge$SemanticsNode: int textSelectionBase
io.flutter.view.AccessibilityBridge$SemanticsNode: int textSelectionExtent
io.flutter.view.AccessibilityBridge$SemanticsNode: int platformViewId
io.flutter.view.AccessibilityBridge$SemanticsNode: int scrollChildren
io.flutter.view.AccessibilityBridge$SemanticsNode: int scrollIndex
io.flutter.view.AccessibilityBridge$SemanticsNode: float scrollPosition
io.flutter.view.AccessibilityBridge$SemanticsNode: float scrollExtentMax
io.flutter.view.AccessibilityBridge$SemanticsNode: float scrollExtentMin
io.flutter.view.AccessibilityBridge$SemanticsNode: java.lang.String label
io.flutter.view.AccessibilityBridge$SemanticsNode: java.lang.String value
io.flutter.view.AccessibilityBridge$SemanticsNode: java.lang.String increasedValue
io.flutter.view.AccessibilityBridge$SemanticsNode: java.lang.String decreasedValue
io.flutter.view.AccessibilityBridge$SemanticsNode: java.lang.String hint
io.flutter.view.AccessibilityBridge$SemanticsNode: io.flutter.view.AccessibilityBridge$TextDirection textDirection
io.flutter.view.AccessibilityBridge$SemanticsNode: boolean hadPreviousConfig
io.flutter.view.AccessibilityBridge$SemanticsNode: int previousFlags
io.flutter.view.AccessibilityBridge$SemanticsNode: int previousActions
io.flutter.view.AccessibilityBridge$SemanticsNode: int previousTextSelectionBase
io.flutter.view.AccessibilityBridge$SemanticsNode: int previousTextSelectionExtent
io.flutter.view.AccessibilityBridge$SemanticsNode: float previousScrollPosition
io.flutter.view.AccessibilityBridge$SemanticsNode: float previousScrollExtentMax
io.flutter.view.AccessibilityBridge$SemanticsNode: float previousScrollExtentMin
io.flutter.view.AccessibilityBridge$SemanticsNode: java.lang.String previousValue
io.flutter.view.AccessibilityBridge$SemanticsNode: java.lang.String previousLabel
io.flutter.view.AccessibilityBridge$SemanticsNode: float left
io.flutter.view.AccessibilityBridge$SemanticsNode: float top
io.flutter.view.AccessibilityBridge$SemanticsNode: float right
io.flutter.view.AccessibilityBridge$SemanticsNode: float bottom
io.flutter.view.AccessibilityBridge$SemanticsNode: float[] transform
io.flutter.view.AccessibilityBridge$SemanticsNode: io.flutter.view.AccessibilityBridge$SemanticsNode parent
io.flutter.view.AccessibilityBridge$SemanticsNode: java.util.List childrenInTraversalOrder
io.flutter.view.AccessibilityBridge$SemanticsNode: java.util.List childrenInHitTestOrder
io.flutter.view.AccessibilityBridge$SemanticsNode: java.util.List customAccessibilityActions
io.flutter.view.AccessibilityBridge$SemanticsNode: io.flutter.view.AccessibilityBridge$CustomAccessibilityAction onTapOverride
io.flutter.view.AccessibilityBridge$SemanticsNode: io.flutter.view.AccessibilityBridge$CustomAccessibilityAction onLongPressOverride
io.flutter.view.AccessibilityBridge$SemanticsNode: boolean inverseTransformDirty
io.flutter.view.AccessibilityBridge$SemanticsNode: float[] inverseTransform
io.flutter.view.AccessibilityBridge$SemanticsNode: boolean globalGeometryDirty
io.flutter.view.AccessibilityBridge$SemanticsNode: float[] globalTransform
io.flutter.view.AccessibilityBridge$SemanticsNode: android.graphics.Rect globalRect
io.flutter.view.AccessibilityBridge$SemanticsNode: boolean $assertionsDisabled
io.flutter.view.AccessibilityBridge$SemanticsNode: boolean nullableHasAncestor(io.flutter.view.AccessibilityBridge$SemanticsNode,io.flutter.util.Predicate)
io.flutter.view.AccessibilityBridge$SemanticsNode: AccessibilityBridge$SemanticsNode(io.flutter.view.AccessibilityBridge)
io.flutter.view.AccessibilityBridge$SemanticsNode: io.flutter.view.AccessibilityBridge$SemanticsNode getAncestor(io.flutter.util.Predicate)
io.flutter.view.AccessibilityBridge$SemanticsNode: boolean hasAction(io.flutter.view.AccessibilityBridge$Action)
io.flutter.view.AccessibilityBridge$SemanticsNode: boolean hadAction(io.flutter.view.AccessibilityBridge$Action)
io.flutter.view.AccessibilityBridge$SemanticsNode: boolean hasFlag(io.flutter.view.AccessibilityBridge$Flag)
io.flutter.view.AccessibilityBridge$SemanticsNode: boolean hadFlag(io.flutter.view.AccessibilityBridge$Flag)
io.flutter.view.AccessibilityBridge$SemanticsNode: boolean didScroll()
io.flutter.view.AccessibilityBridge$SemanticsNode: boolean didChangeLabel()
io.flutter.view.AccessibilityBridge$SemanticsNode: void log(java.lang.String,boolean)
io.flutter.view.AccessibilityBridge$SemanticsNode: void updateWith(java.nio.ByteBuffer,java.lang.String[])
io.flutter.view.AccessibilityBridge$SemanticsNode: void ensureInverseTransform()
io.flutter.view.AccessibilityBridge$SemanticsNode: android.graphics.Rect getGlobalRect()
io.flutter.view.AccessibilityBridge$SemanticsNode: io.flutter.view.AccessibilityBridge$SemanticsNode hitTest(float[])
io.flutter.view.AccessibilityBridge$SemanticsNode: boolean isFocusable()
io.flutter.view.AccessibilityBridge$SemanticsNode: void collectRoutes(java.util.List)
io.flutter.view.AccessibilityBridge$SemanticsNode: java.lang.String getRouteName()
io.flutter.view.AccessibilityBridge$SemanticsNode: void updateRecursively(float[],java.util.Set,boolean)
io.flutter.view.AccessibilityBridge$SemanticsNode: void transformPoint(float[],float[],float[])
io.flutter.view.AccessibilityBridge$SemanticsNode: float min(float,float,float,float)
io.flutter.view.AccessibilityBridge$SemanticsNode: float max(float,float,float,float)
io.flutter.view.AccessibilityBridge$SemanticsNode: java.lang.String getValueLabelHint()
io.flutter.view.AccessibilityBridge$SemanticsNode: int access$1200(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.flutter.view.AccessibilityBridge$SemanticsNode: boolean access$1300(io.flutter.view.AccessibilityBridge$SemanticsNode,io.flutter.util.Predicate)
io.flutter.view.AccessibilityBridge$SemanticsNode: int access$1400(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.flutter.view.AccessibilityBridge$SemanticsNode: android.graphics.Rect access$1500(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.flutter.view.AccessibilityBridge$SemanticsNode: int access$1600(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.flutter.view.AccessibilityBridge$SemanticsNode: boolean access$1700(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.flutter.view.AccessibilityBridge$SemanticsNode: boolean access$1800(io.flutter.view.AccessibilityBridge$SemanticsNode,io.flutter.view.AccessibilityBridge$Flag)
io.flutter.view.AccessibilityBridge$SemanticsNode: int access$1900(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.flutter.view.AccessibilityBridge$SemanticsNode: int access$2000(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.flutter.view.AccessibilityBridge$SemanticsNode: boolean access$2100(io.flutter.view.AccessibilityBridge$SemanticsNode,io.flutter.view.AccessibilityBridge$Action)
io.flutter.view.AccessibilityBridge$SemanticsNode: io.flutter.view.AccessibilityBridge$SemanticsNode access$2200(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.flutter.view.AccessibilityBridge$SemanticsNode: io.flutter.view.AccessibilityBridge$CustomAccessibilityAction access$2300(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.flutter.view.AccessibilityBridge$SemanticsNode: io.flutter.view.AccessibilityBridge$CustomAccessibilityAction access$2500(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.flutter.view.AccessibilityBridge$SemanticsNode: java.lang.String access$2600(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.flutter.view.AccessibilityBridge$SemanticsNode: java.util.List access$2700(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.flutter.view.AccessibilityBridge$SemanticsNode: java.util.List access$3000(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.flutter.view.AccessibilityBridge$SemanticsNode: java.lang.String access$3102(io.flutter.view.AccessibilityBridge$SemanticsNode,java.lang.String)
io.flutter.view.AccessibilityBridge$SemanticsNode: java.lang.String access$3200(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.flutter.view.AccessibilityBridge$SemanticsNode: java.lang.String access$3300(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.flutter.view.AccessibilityBridge$SemanticsNode: int access$1602(io.flutter.view.AccessibilityBridge$SemanticsNode,int)
io.flutter.view.AccessibilityBridge$SemanticsNode: io.flutter.view.AccessibilityBridge$SemanticsNode access$3500(io.flutter.view.AccessibilityBridge$SemanticsNode,float[])
io.flutter.view.AccessibilityBridge$SemanticsNode: void access$3700(io.flutter.view.AccessibilityBridge$SemanticsNode,java.nio.ByteBuffer,java.lang.String[])
io.flutter.view.AccessibilityBridge$SemanticsNode: boolean access$3800(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.flutter.view.AccessibilityBridge$SemanticsNode: boolean access$3902(io.flutter.view.AccessibilityBridge$SemanticsNode,boolean)
io.flutter.view.AccessibilityBridge$SemanticsNode: boolean access$4002(io.flutter.view.AccessibilityBridge$SemanticsNode,boolean)
io.flutter.view.AccessibilityBridge$SemanticsNode: void access$4100(io.flutter.view.AccessibilityBridge$SemanticsNode,float[],java.util.Set,boolean)
io.flutter.view.AccessibilityBridge$SemanticsNode: void access$4200(io.flutter.view.AccessibilityBridge$SemanticsNode,java.util.List)
io.flutter.view.AccessibilityBridge$SemanticsNode: boolean access$4300(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.flutter.view.AccessibilityBridge$SemanticsNode: float access$4400(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.flutter.view.AccessibilityBridge$SemanticsNode: float access$4500(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.flutter.view.AccessibilityBridge$SemanticsNode: float access$4600(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.flutter.view.AccessibilityBridge$SemanticsNode: boolean access$4700(io.flutter.view.AccessibilityBridge$SemanticsNode,io.flutter.view.AccessibilityBridge$Action)
io.flutter.view.AccessibilityBridge$SemanticsNode: int access$4800(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.flutter.view.AccessibilityBridge$SemanticsNode: java.util.List access$4900(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.flutter.view.AccessibilityBridge$SemanticsNode: java.lang.String access$5000(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.flutter.view.AccessibilityBridge$SemanticsNode: java.lang.String access$5100(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.flutter.view.AccessibilityBridge$SemanticsNode: boolean access$5200(io.flutter.view.AccessibilityBridge$SemanticsNode,io.flutter.view.AccessibilityBridge$Flag)
io.flutter.view.AccessibilityBridge$SemanticsNode: boolean access$5300(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.flutter.view.AccessibilityBridge$SemanticsNode: java.lang.String access$5400(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.flutter.view.AccessibilityBridge$SemanticsNode: java.lang.String access$3100(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.flutter.view.AccessibilityBridge$SemanticsNode: int access$5500(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.flutter.view.AccessibilityBridge$SemanticsNode: int access$5600(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.flutter.view.AccessibilityBridge$SemanticsNode: java.lang.String access$5700(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.flutter.view.AccessibilityBridge$SemanticsNode: io.flutter.view.AccessibilityBridge$SemanticsNode access$2202(io.flutter.view.AccessibilityBridge$SemanticsNode,io.flutter.view.AccessibilityBridge$SemanticsNode)
io.flutter.view.AccessibilityBridge$SemanticsNode: void <clinit>()
io.flutter.view.AccessibilityBridge$TextDirection
io.flutter.view.AccessibilityBridge$TextDirection: io.flutter.view.AccessibilityBridge$TextDirection UNKNOWN
io.flutter.view.AccessibilityBridge$TextDirection: io.flutter.view.AccessibilityBridge$TextDirection LTR
io.flutter.view.AccessibilityBridge$TextDirection: io.flutter.view.AccessibilityBridge$TextDirection RTL
io.flutter.view.AccessibilityBridge$TextDirection: io.flutter.view.AccessibilityBridge$TextDirection[] $VALUES
io.flutter.view.AccessibilityBridge$TextDirection: io.flutter.view.AccessibilityBridge$TextDirection[] values()
io.flutter.view.AccessibilityBridge$TextDirection: io.flutter.view.AccessibilityBridge$TextDirection valueOf(java.lang.String)
io.flutter.view.AccessibilityBridge$TextDirection: AccessibilityBridge$TextDirection(java.lang.String,int)
io.flutter.view.AccessibilityBridge$TextDirection: io.flutter.view.AccessibilityBridge$TextDirection fromInt(int)
io.flutter.view.AccessibilityBridge$TextDirection: void <clinit>()
io.flutter.view.AccessibilityViewEmbedder
io.flutter.view.AccessibilityViewEmbedder: java.lang.String TAG
io.flutter.view.AccessibilityViewEmbedder: io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors reflectionAccessors
io.flutter.view.AccessibilityViewEmbedder: android.view.View rootAccessibilityView
io.flutter.view.AccessibilityViewEmbedder: android.util.SparseArray flutterIdToOrigin
io.flutter.view.AccessibilityViewEmbedder: java.util.Map originToFlutterId
io.flutter.view.AccessibilityViewEmbedder: java.util.Map embeddedViewToDisplayBounds
io.flutter.view.AccessibilityViewEmbedder: int nextFlutterId
io.flutter.view.AccessibilityViewEmbedder: AccessibilityViewEmbedder(android.view.View,int)
io.flutter.view.AccessibilityViewEmbedder: android.view.accessibility.AccessibilityNodeInfo getRootNode(android.view.View,int,android.graphics.Rect)
io.flutter.view.AccessibilityViewEmbedder: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int)
io.flutter.view.AccessibilityViewEmbedder: android.view.accessibility.AccessibilityNodeInfo convertToFlutterNode(android.view.accessibility.AccessibilityNodeInfo,int,android.view.View)
io.flutter.view.AccessibilityViewEmbedder: void setFlutterNodeParent(android.view.accessibility.AccessibilityNodeInfo,android.view.View,android.view.accessibility.AccessibilityNodeInfo)
io.flutter.view.AccessibilityViewEmbedder: void addChildrenToFlutterNode(android.view.accessibility.AccessibilityNodeInfo,android.view.View,android.view.accessibility.AccessibilityNodeInfo)
io.flutter.view.AccessibilityViewEmbedder: void cacheVirtualIdMappings(android.view.View,int,int)
io.flutter.view.AccessibilityViewEmbedder: void setFlutterNodesTranslateBounds(android.view.accessibility.AccessibilityNodeInfo,android.graphics.Rect,android.view.accessibility.AccessibilityNodeInfo)
io.flutter.view.AccessibilityViewEmbedder: void copyAccessibilityFields(android.view.accessibility.AccessibilityNodeInfo,android.view.accessibility.AccessibilityNodeInfo)
io.flutter.view.AccessibilityViewEmbedder: boolean requestSendAccessibilityEvent(android.view.View,android.view.View,android.view.accessibility.AccessibilityEvent)
io.flutter.view.AccessibilityViewEmbedder: boolean performAction(int,int,android.os.Bundle)
io.flutter.view.AccessibilityViewEmbedder: java.lang.Integer getRecordFlutterId(android.view.View,android.view.accessibility.AccessibilityRecord)
io.flutter.view.AccessibilityViewEmbedder: boolean onAccessibilityHoverEvent(int,android.view.MotionEvent)
io.flutter.view.AccessibilityViewEmbedder$1
io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors
io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors: java.lang.reflect.Method getSourceNodeId
io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors: java.lang.reflect.Method getParentNodeId
io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors: java.lang.reflect.Method getRecordSourceNodeId
io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors: java.lang.reflect.Method getChildId
io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors: AccessibilityViewEmbedder$ReflectionAccessors()
io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors: int getVirtualNodeId(long)
io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors: java.lang.Long getSourceNodeId(android.view.accessibility.AccessibilityNodeInfo)
io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors: java.lang.Long getChildId(android.view.accessibility.AccessibilityNodeInfo,int)
io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors: java.lang.Long getParentNodeId(android.view.accessibility.AccessibilityNodeInfo)
io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors: java.lang.Long getRecordSourceNodeId(android.view.accessibility.AccessibilityRecord)
io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors: AccessibilityViewEmbedder$ReflectionAccessors(io.flutter.view.AccessibilityViewEmbedder$1)
io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors: java.lang.Long access$100(io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors,android.view.accessibility.AccessibilityNodeInfo)
io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors: int access$200(long)
io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors: java.lang.Long access$300(io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors,android.view.accessibility.AccessibilityNodeInfo)
io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors: java.lang.Long access$500(io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors,android.view.accessibility.AccessibilityNodeInfo,int)
io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors: java.lang.Long access$600(io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors,android.view.accessibility.AccessibilityRecord)
io.flutter.view.AccessibilityViewEmbedder$ViewAndId
io.flutter.view.AccessibilityViewEmbedder$ViewAndId: android.view.View view
io.flutter.view.AccessibilityViewEmbedder$ViewAndId: int id
io.flutter.view.AccessibilityViewEmbedder$ViewAndId: AccessibilityViewEmbedder$ViewAndId(android.view.View,int)
io.flutter.view.AccessibilityViewEmbedder$ViewAndId: boolean equals(java.lang.Object)
io.flutter.view.AccessibilityViewEmbedder$ViewAndId: int hashCode()
io.flutter.view.AccessibilityViewEmbedder$ViewAndId: AccessibilityViewEmbedder$ViewAndId(android.view.View,int,io.flutter.view.AccessibilityViewEmbedder$1)
io.flutter.view.FlutterCallbackInformation
io.flutter.view.FlutterCallbackInformation: java.lang.String callbackName
io.flutter.view.FlutterCallbackInformation: java.lang.String callbackClassName
io.flutter.view.FlutterCallbackInformation: java.lang.String callbackLibraryPath
io.flutter.view.FlutterCallbackInformation: io.flutter.view.FlutterCallbackInformation lookupCallbackInformation(long)
io.flutter.view.FlutterCallbackInformation: FlutterCallbackInformation(java.lang.String,java.lang.String,java.lang.String)
io.flutter.view.FlutterCallbackInformation: io.flutter.view.FlutterCallbackInformation nativeLookupCallbackInformation(long)
io.flutter.view.FlutterMain
io.flutter.view.FlutterMain: java.lang.String TAG
io.flutter.view.FlutterMain: java.lang.String AOT_SHARED_LIBRARY_PATH
io.flutter.view.FlutterMain: java.lang.String AOT_SNAPSHOT_PATH_KEY
io.flutter.view.FlutterMain: java.lang.String AOT_VM_SNAPSHOT_DATA_KEY
io.flutter.view.FlutterMain: java.lang.String AOT_VM_SNAPSHOT_INSTR_KEY
io.flutter.view.FlutterMain: java.lang.String AOT_ISOLATE_SNAPSHOT_DATA_KEY
io.flutter.view.FlutterMain: java.lang.String AOT_ISOLATE_SNAPSHOT_INSTR_KEY
io.flutter.view.FlutterMain: java.lang.String FLX_KEY
io.flutter.view.FlutterMain: java.lang.String FLUTTER_ASSETS_DIR_KEY
io.flutter.view.FlutterMain: java.lang.String PUBLIC_AOT_AOT_SHARED_LIBRARY_PATH
io.flutter.view.FlutterMain: java.lang.String PUBLIC_AOT_VM_SNAPSHOT_DATA_KEY
io.flutter.view.FlutterMain: java.lang.String PUBLIC_AOT_VM_SNAPSHOT_INSTR_KEY
io.flutter.view.FlutterMain: java.lang.String PUBLIC_AOT_ISOLATE_SNAPSHOT_DATA_KEY
io.flutter.view.FlutterMain: java.lang.String PUBLIC_AOT_ISOLATE_SNAPSHOT_INSTR_KEY
io.flutter.view.FlutterMain: java.lang.String PUBLIC_FLX_KEY
io.flutter.view.FlutterMain: java.lang.String PUBLIC_FLUTTER_ASSETS_DIR_KEY
io.flutter.view.FlutterMain: java.lang.String DEFAULT_AOT_SHARED_LIBRARY_PATH
io.flutter.view.FlutterMain: java.lang.String DEFAULT_AOT_VM_SNAPSHOT_DATA
io.flutter.view.FlutterMain: java.lang.String DEFAULT_AOT_VM_SNAPSHOT_INSTR
io.flutter.view.FlutterMain: java.lang.String DEFAULT_AOT_ISOLATE_SNAPSHOT_DATA
io.flutter.view.FlutterMain: java.lang.String DEFAULT_AOT_ISOLATE_SNAPSHOT_INSTR
io.flutter.view.FlutterMain: java.lang.String DEFAULT_FLX
io.flutter.view.FlutterMain: java.lang.String DEFAULT_LIBRARY
io.flutter.view.FlutterMain: java.lang.String DEFAULT_KERNEL_BLOB
io.flutter.view.FlutterMain: java.lang.String DEFAULT_FLUTTER_ASSETS_DIR
io.flutter.view.FlutterMain: java.lang.String sAotSharedLibraryPath
io.flutter.view.FlutterMain: java.lang.String sAotVmSnapshotData
io.flutter.view.FlutterMain: java.lang.String sAotVmSnapshotInstr
io.flutter.view.FlutterMain: java.lang.String sAotIsolateSnapshotData
io.flutter.view.FlutterMain: java.lang.String sAotIsolateSnapshotInstr
io.flutter.view.FlutterMain: java.lang.String sFlx
io.flutter.view.FlutterMain: java.lang.String sFlutterAssetsDir
io.flutter.view.FlutterMain: boolean sInitialized
io.flutter.view.FlutterMain: io.flutter.view.ResourceUpdater sResourceUpdater
io.flutter.view.FlutterMain: io.flutter.view.ResourceExtractor sResourceExtractor
io.flutter.view.FlutterMain: boolean sIsPrecompiledAsBlobs
io.flutter.view.FlutterMain: boolean sIsPrecompiledAsSharedLibrary
io.flutter.view.FlutterMain: io.flutter.view.FlutterMain$Settings sSettings
io.flutter.view.FlutterMain: FlutterMain()
io.flutter.view.FlutterMain: java.lang.String fromFlutterAssets(java.lang.String)
io.flutter.view.FlutterMain: void startInitialization(android.content.Context)
io.flutter.view.FlutterMain: void startInitialization(android.content.Context,io.flutter.view.FlutterMain$Settings)
io.flutter.view.FlutterMain: void ensureInitializationComplete(android.content.Context,java.lang.String[])
io.flutter.view.FlutterMain: void ensureInitializationCompleteAsync(android.content.Context,java.lang.String[],android.os.Handler,java.lang.Runnable)
io.flutter.view.FlutterMain: void nativeInit(android.content.Context,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)
io.flutter.view.FlutterMain: void nativeRecordStartTimestamp(long)
io.flutter.view.FlutterMain: void initConfig(android.content.Context)
io.flutter.view.FlutterMain: void initResources(android.content.Context)
io.flutter.view.FlutterMain: void onResume(android.content.Context)
io.flutter.view.FlutterMain: java.util.Set listAssets(android.content.Context,java.lang.String)
io.flutter.view.FlutterMain: void initAot(android.content.Context)
io.flutter.view.FlutterMain: boolean isRunningPrecompiledCode()
io.flutter.view.FlutterMain: java.lang.String findAppBundlePath(android.content.Context)
io.flutter.view.FlutterMain: io.flutter.view.ResourceUpdater getResourceUpdater()
io.flutter.view.FlutterMain: java.lang.String getLookupKeyForAsset(java.lang.String)
io.flutter.view.FlutterMain: java.lang.String getLookupKeyForAsset(java.lang.String,java.lang.String)
io.flutter.view.FlutterMain: io.flutter.view.ResourceExtractor access$000()
io.flutter.view.FlutterMain: void <clinit>()
io.flutter.view.FlutterMain$1
io.flutter.view.FlutterMain$1: android.content.Context val$applicationContext
io.flutter.view.FlutterMain$1: java.lang.String[] val$args
io.flutter.view.FlutterMain$1: android.os.Handler val$callbackHandler
io.flutter.view.FlutterMain$1: java.lang.Runnable val$callback
io.flutter.view.FlutterMain$1: FlutterMain$1(android.content.Context,java.lang.String[],android.os.Handler,java.lang.Runnable)
io.flutter.view.FlutterMain$1: void run()
io.flutter.view.FlutterMain$1$1
io.flutter.view.FlutterMain$1$1: io.flutter.view.FlutterMain$1 this$0
io.flutter.view.FlutterMain$1$1: FlutterMain$1$1(io.flutter.view.FlutterMain$1)
io.flutter.view.FlutterMain$1$1: void run()
io.flutter.view.FlutterMain$ImmutableSetBuilder
io.flutter.view.FlutterMain$ImmutableSetBuilder: java.util.HashSet set
io.flutter.view.FlutterMain$ImmutableSetBuilder: io.flutter.view.FlutterMain$ImmutableSetBuilder newInstance()
io.flutter.view.FlutterMain$ImmutableSetBuilder: FlutterMain$ImmutableSetBuilder()
io.flutter.view.FlutterMain$ImmutableSetBuilder: io.flutter.view.FlutterMain$ImmutableSetBuilder add(java.lang.Object)
io.flutter.view.FlutterMain$ImmutableSetBuilder: io.flutter.view.FlutterMain$ImmutableSetBuilder add(java.lang.Object[])
io.flutter.view.FlutterMain$ImmutableSetBuilder: java.util.Set build()
io.flutter.view.FlutterMain$Settings
io.flutter.view.FlutterMain$Settings: java.lang.String logTag
io.flutter.view.FlutterMain$Settings: FlutterMain$Settings()
io.flutter.view.FlutterMain$Settings: java.lang.String getLogTag()
io.flutter.view.FlutterMain$Settings: void setLogTag(java.lang.String)
io.flutter.view.FlutterNativeView
io.flutter.view.FlutterNativeView: java.lang.String TAG
io.flutter.view.FlutterNativeView: io.flutter.app.FlutterPluginRegistry mPluginRegistry
io.flutter.view.FlutterNativeView: io.flutter.embedding.engine.dart.DartExecutor dartExecutor
io.flutter.view.FlutterNativeView: io.flutter.view.FlutterView mFlutterView
io.flutter.view.FlutterNativeView: io.flutter.embedding.engine.FlutterJNI mFlutterJNI
io.flutter.view.FlutterNativeView: android.content.Context mContext
io.flutter.view.FlutterNativeView: boolean applicationIsRunning
io.flutter.view.FlutterNativeView: FlutterNativeView(android.content.Context)
io.flutter.view.FlutterNativeView: FlutterNativeView(android.content.Context,boolean)
io.flutter.view.FlutterNativeView: void detachFromFlutterView()
io.flutter.view.FlutterNativeView: void destroy()
io.flutter.view.FlutterNativeView: io.flutter.embedding.engine.dart.DartExecutor getDartExecutor()
io.flutter.view.FlutterNativeView: io.flutter.app.FlutterPluginRegistry getPluginRegistry()
io.flutter.view.FlutterNativeView: void attachViewAndActivity(io.flutter.view.FlutterView,android.app.Activity)
io.flutter.view.FlutterNativeView: boolean isAttached()
io.flutter.view.FlutterNativeView: void assertAttached()
io.flutter.view.FlutterNativeView: void runFromBundle(io.flutter.view.FlutterRunArguments)
io.flutter.view.FlutterNativeView: void runFromBundle(java.lang.String,java.lang.String,java.lang.String,boolean)
io.flutter.view.FlutterNativeView: void runFromBundleInternal(java.lang.String[],java.lang.String,java.lang.String)
io.flutter.view.FlutterNativeView: boolean isApplicationRunning()
io.flutter.view.FlutterNativeView: java.lang.String getObservatoryUri()
io.flutter.view.FlutterNativeView: void send(java.lang.String,java.nio.ByteBuffer)
io.flutter.view.FlutterNativeView: void send(java.lang.String,java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply)
io.flutter.view.FlutterNativeView: void setMessageHandler(java.lang.String,io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler)
io.flutter.view.FlutterNativeView: io.flutter.embedding.engine.FlutterJNI getFlutterJNI()
io.flutter.view.FlutterNativeView: void attach(io.flutter.view.FlutterNativeView,boolean)
io.flutter.view.FlutterNativeView: io.flutter.view.FlutterView access$200(io.flutter.view.FlutterNativeView)
io.flutter.view.FlutterNativeView: io.flutter.app.FlutterPluginRegistry access$300(io.flutter.view.FlutterNativeView)
io.flutter.view.FlutterNativeView$1
io.flutter.view.FlutterNativeView$EngineLifecycleListenerImpl
io.flutter.view.FlutterNativeView$EngineLifecycleListenerImpl: io.flutter.view.FlutterNativeView this$0
io.flutter.view.FlutterNativeView$EngineLifecycleListenerImpl: FlutterNativeView$EngineLifecycleListenerImpl(io.flutter.view.FlutterNativeView)
io.flutter.view.FlutterNativeView$EngineLifecycleListenerImpl: void onPreEngineRestart()
io.flutter.view.FlutterNativeView$EngineLifecycleListenerImpl: FlutterNativeView$EngineLifecycleListenerImpl(io.flutter.view.FlutterNativeView,io.flutter.view.FlutterNativeView$1)
io.flutter.view.FlutterNativeView$RenderSurfaceImpl
io.flutter.view.FlutterNativeView$RenderSurfaceImpl: io.flutter.view.FlutterNativeView this$0
io.flutter.view.FlutterNativeView$RenderSurfaceImpl: FlutterNativeView$RenderSurfaceImpl(io.flutter.view.FlutterNativeView)
io.flutter.view.FlutterNativeView$RenderSurfaceImpl: void attachToRenderer(io.flutter.embedding.engine.renderer.FlutterRenderer)
io.flutter.view.FlutterNativeView$RenderSurfaceImpl: void detachFromRenderer()
io.flutter.view.FlutterNativeView$RenderSurfaceImpl: void updateSemantics(java.nio.ByteBuffer,java.lang.String[])
io.flutter.view.FlutterNativeView$RenderSurfaceImpl: void updateCustomAccessibilityActions(java.nio.ByteBuffer,java.lang.String[])
io.flutter.view.FlutterNativeView$RenderSurfaceImpl: void onFirstFrameRendered()
io.flutter.view.FlutterNativeView$RenderSurfaceImpl: void addOnFirstFrameRenderedListener(io.flutter.embedding.engine.renderer.OnFirstFrameRenderedListener)
io.flutter.view.FlutterNativeView$RenderSurfaceImpl: void removeOnFirstFrameRenderedListener(io.flutter.embedding.engine.renderer.OnFirstFrameRenderedListener)
io.flutter.view.FlutterNativeView$RenderSurfaceImpl: FlutterNativeView$RenderSurfaceImpl(io.flutter.view.FlutterNativeView,io.flutter.view.FlutterNativeView$1)
io.flutter.view.FlutterRunArguments
io.flutter.view.FlutterRunArguments: java.lang.String[] bundlePaths
io.flutter.view.FlutterRunArguments: java.lang.String bundlePath
io.flutter.view.FlutterRunArguments: java.lang.String entrypoint
io.flutter.view.FlutterRunArguments: java.lang.String libraryPath
io.flutter.view.FlutterRunArguments: java.lang.String defaultPath
io.flutter.view.FlutterRunArguments: FlutterRunArguments()
io.flutter.view.FlutterView
io.flutter.view.FlutterView: java.lang.String TAG
io.flutter.view.FlutterView: io.flutter.embedding.engine.dart.DartExecutor dartExecutor
io.flutter.view.FlutterView: io.flutter.embedding.engine.renderer.FlutterRenderer flutterRenderer
io.flutter.view.FlutterView: io.flutter.embedding.engine.systemchannels.NavigationChannel navigationChannel
io.flutter.view.FlutterView: io.flutter.embedding.engine.systemchannels.KeyEventChannel keyEventChannel
io.flutter.view.FlutterView: io.flutter.embedding.engine.systemchannels.LifecycleChannel lifecycleChannel
io.flutter.view.FlutterView: io.flutter.embedding.engine.systemchannels.LocalizationChannel localizationChannel
io.flutter.view.FlutterView: io.flutter.embedding.engine.systemchannels.PlatformChannel platformChannel
io.flutter.view.FlutterView: io.flutter.embedding.engine.systemchannels.SettingsChannel settingsChannel
io.flutter.view.FlutterView: io.flutter.embedding.engine.systemchannels.SystemChannel systemChannel
io.flutter.view.FlutterView: android.view.inputmethod.InputMethodManager mImm
io.flutter.view.FlutterView: io.flutter.plugin.editing.TextInputPlugin mTextInputPlugin
io.flutter.view.FlutterView: io.flutter.embedding.android.AndroidKeyProcessor androidKeyProcessor
io.flutter.view.FlutterView: io.flutter.embedding.android.AndroidTouchProcessor androidTouchProcessor
io.flutter.view.FlutterView: io.flutter.view.AccessibilityBridge mAccessibilityNodeProvider
io.flutter.view.FlutterView: android.view.SurfaceHolder$Callback mSurfaceCallback
io.flutter.view.FlutterView: io.flutter.view.FlutterView$ViewportMetrics mMetrics
io.flutter.view.FlutterView: java.util.List mActivityLifecycleListeners
io.flutter.view.FlutterView: java.util.List mFirstFrameListeners
io.flutter.view.FlutterView: java.util.concurrent.atomic.AtomicLong nextTextureId
io.flutter.view.FlutterView: io.flutter.view.FlutterNativeView mNativeView
io.flutter.view.FlutterView: boolean mIsSoftwareRenderingEnabled
io.flutter.view.FlutterView: io.flutter.view.AccessibilityBridge$OnAccessibilityChangeListener onAccessibilityChangeListener
io.flutter.view.FlutterView: FlutterView(android.content.Context)
io.flutter.view.FlutterView: FlutterView(android.content.Context,android.util.AttributeSet)
io.flutter.view.FlutterView: FlutterView(android.content.Context,android.util.AttributeSet,io.flutter.view.FlutterNativeView)
io.flutter.view.FlutterView: android.app.Activity getActivity(android.content.Context)
io.flutter.view.FlutterView: boolean onKeyUp(int,android.view.KeyEvent)
io.flutter.view.FlutterView: boolean onKeyDown(int,android.view.KeyEvent)
io.flutter.view.FlutterView: io.flutter.view.FlutterNativeView getFlutterNativeView()
io.flutter.view.FlutterView: io.flutter.app.FlutterPluginRegistry getPluginRegistry()
io.flutter.view.FlutterView: java.lang.String getLookupKeyForAsset(java.lang.String)
io.flutter.view.FlutterView: java.lang.String getLookupKeyForAsset(java.lang.String,java.lang.String)
io.flutter.view.FlutterView: void addActivityLifecycleListener(io.flutter.plugin.common.ActivityLifecycleListener)
io.flutter.view.FlutterView: void onStart()
io.flutter.view.FlutterView: void onPause()
io.flutter.view.FlutterView: void onPostResume()
io.flutter.view.FlutterView: void onStop()
io.flutter.view.FlutterView: void onMemoryPressure()
io.flutter.view.FlutterView: void addFirstFrameListener(io.flutter.view.FlutterView$FirstFrameListener)
io.flutter.view.FlutterView: void removeFirstFrameListener(io.flutter.view.FlutterView$FirstFrameListener)
io.flutter.view.FlutterView: void enableTransparentBackground()
io.flutter.view.FlutterView: void disableTransparentBackground()
io.flutter.view.FlutterView: void setInitialRoute(java.lang.String)
io.flutter.view.FlutterView: void pushRoute(java.lang.String)
io.flutter.view.FlutterView: void popRoute()
io.flutter.view.FlutterView: void sendUserPlatformSettingsToDart()
io.flutter.view.FlutterView: void sendLocalesToDart(android.content.res.Configuration)
io.flutter.view.FlutterView: void onConfigurationChanged(android.content.res.Configuration)
io.flutter.view.FlutterView: float getDevicePixelRatio()
io.flutter.view.FlutterView: io.flutter.view.FlutterNativeView detach()
io.flutter.view.FlutterView: void destroy()
io.flutter.view.FlutterView: android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo)
io.flutter.view.FlutterView: boolean onTouchEvent(android.view.MotionEvent)
io.flutter.view.FlutterView: boolean onHoverEvent(android.view.MotionEvent)
io.flutter.view.FlutterView: boolean onGenericMotionEvent(android.view.MotionEvent)
io.flutter.view.FlutterView: void onSizeChanged(int,int,int,int)
io.flutter.view.FlutterView: io.flutter.view.FlutterView$ZeroSides calculateShouldZeroSides()
io.flutter.view.FlutterView: int calculateBottomKeyboardInset(android.view.WindowInsets)
io.flutter.view.FlutterView: android.view.WindowInsets onApplyWindowInsets(android.view.WindowInsets)
io.flutter.view.FlutterView: boolean fitSystemWindows(android.graphics.Rect)
io.flutter.view.FlutterView: boolean isAttached()
io.flutter.view.FlutterView: void assertAttached()
io.flutter.view.FlutterView: void preRun()
io.flutter.view.FlutterView: void resetAccessibilityTree()
io.flutter.view.FlutterView: void postRun()
io.flutter.view.FlutterView: void runFromBundle(io.flutter.view.FlutterRunArguments)
io.flutter.view.FlutterView: void runFromBundle(java.lang.String,java.lang.String)
io.flutter.view.FlutterView: void runFromBundle(java.lang.String,java.lang.String,java.lang.String)
io.flutter.view.FlutterView: void runFromBundle(java.lang.String,java.lang.String,java.lang.String,boolean)
io.flutter.view.FlutterView: android.graphics.Bitmap getBitmap()
io.flutter.view.FlutterView: void updateViewportMetrics()
io.flutter.view.FlutterView: void updateSemantics(java.nio.ByteBuffer,java.lang.String[])
io.flutter.view.FlutterView: void updateCustomAccessibilityActions(java.nio.ByteBuffer,java.lang.String[])
io.flutter.view.FlutterView: void onFirstFrame()
io.flutter.view.FlutterView: void onAttachedToWindow()
io.flutter.view.FlutterView: void onDetachedFromWindow()
io.flutter.view.FlutterView: void resetWillNotDraw(boolean,boolean)
io.flutter.view.FlutterView: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider()
io.flutter.view.FlutterView: void send(java.lang.String,java.nio.ByteBuffer)
io.flutter.view.FlutterView: void send(java.lang.String,java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply)
io.flutter.view.FlutterView: void setMessageHandler(java.lang.String,io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler)
io.flutter.view.FlutterView: io.flutter.view.TextureRegistry$SurfaceTextureEntry createSurfaceTexture()
io.flutter.view.FlutterView: void access$000(io.flutter.view.FlutterView,boolean,boolean)
io.flutter.view.FlutterView: io.flutter.view.FlutterNativeView access$100(io.flutter.view.FlutterView)
io.flutter.view.FlutterView$1
io.flutter.view.FlutterView$1: io.flutter.view.FlutterView this$0
io.flutter.view.FlutterView$1: FlutterView$1(io.flutter.view.FlutterView)
io.flutter.view.FlutterView$1: void onAccessibilityChanged(boolean,boolean)
io.flutter.view.FlutterView$2
io.flutter.view.FlutterView$2: io.flutter.view.FlutterView this$0
io.flutter.view.FlutterView$2: FlutterView$2(io.flutter.view.FlutterView)
io.flutter.view.FlutterView$2: void surfaceCreated(android.view.SurfaceHolder)
io.flutter.view.FlutterView$2: void surfaceChanged(android.view.SurfaceHolder,int,int,int)
io.flutter.view.FlutterView$2: void surfaceDestroyed(android.view.SurfaceHolder)
io.flutter.view.FlutterView$FirstFrameListener
io.flutter.view.FlutterView$FirstFrameListener: void onFirstFrame()
io.flutter.view.FlutterView$Provider
io.flutter.view.FlutterView$Provider: io.flutter.view.FlutterView getFlutterView()
io.flutter.view.FlutterView$SurfaceTextureRegistryEntry
io.flutter.view.FlutterView$SurfaceTextureRegistryEntry: long id
io.flutter.view.FlutterView$SurfaceTextureRegistryEntry: android.graphics.SurfaceTexture surfaceTexture
io.flutter.view.FlutterView$SurfaceTextureRegistryEntry: boolean released
io.flutter.view.FlutterView$SurfaceTextureRegistryEntry: android.graphics.SurfaceTexture$OnFrameAvailableListener onFrameListener
io.flutter.view.FlutterView$SurfaceTextureRegistryEntry: io.flutter.view.FlutterView this$0
io.flutter.view.FlutterView$SurfaceTextureRegistryEntry: FlutterView$SurfaceTextureRegistryEntry(io.flutter.view.FlutterView,long,android.graphics.SurfaceTexture)
io.flutter.view.FlutterView$SurfaceTextureRegistryEntry: android.graphics.SurfaceTexture surfaceTexture()
io.flutter.view.FlutterView$SurfaceTextureRegistryEntry: long id()
io.flutter.view.FlutterView$SurfaceTextureRegistryEntry: void release()
io.flutter.view.FlutterView$SurfaceTextureRegistryEntry: boolean access$200(io.flutter.view.FlutterView$SurfaceTextureRegistryEntry)
io.flutter.view.FlutterView$SurfaceTextureRegistryEntry: long access$300(io.flutter.view.FlutterView$SurfaceTextureRegistryEntry)
io.flutter.view.FlutterView$SurfaceTextureRegistryEntry$1
io.flutter.view.FlutterView$SurfaceTextureRegistryEntry$1: io.flutter.view.FlutterView$SurfaceTextureRegistryEntry this$1
io.flutter.view.FlutterView$SurfaceTextureRegistryEntry$1: FlutterView$SurfaceTextureRegistryEntry$1(io.flutter.view.FlutterView$SurfaceTextureRegistryEntry)
io.flutter.view.FlutterView$SurfaceTextureRegistryEntry$1: void onFrameAvailable(android.graphics.SurfaceTexture)
io.flutter.view.FlutterView$ViewportMetrics
io.flutter.view.FlutterView$ViewportMetrics: float devicePixelRatio
io.flutter.view.FlutterView$ViewportMetrics: int physicalWidth
io.flutter.view.FlutterView$ViewportMetrics: int physicalHeight
io.flutter.view.FlutterView$ViewportMetrics: int physicalPaddingTop
io.flutter.view.FlutterView$ViewportMetrics: int physicalPaddingRight
io.flutter.view.FlutterView$ViewportMetrics: int physicalPaddingBottom
io.flutter.view.FlutterView$ViewportMetrics: int physicalPaddingLeft
io.flutter.view.FlutterView$ViewportMetrics: int physicalViewInsetTop
io.flutter.view.FlutterView$ViewportMetrics: int physicalViewInsetRight
io.flutter.view.FlutterView$ViewportMetrics: int physicalViewInsetBottom
io.flutter.view.FlutterView$ViewportMetrics: int physicalViewInsetLeft
io.flutter.view.FlutterView$ViewportMetrics: FlutterView$ViewportMetrics()
io.flutter.view.FlutterView$ZeroSides
io.flutter.view.FlutterView$ZeroSides: io.flutter.view.FlutterView$ZeroSides NONE
io.flutter.view.FlutterView$ZeroSides: io.flutter.view.FlutterView$ZeroSides LEFT
io.flutter.view.FlutterView$ZeroSides: io.flutter.view.FlutterView$ZeroSides RIGHT
io.flutter.view.FlutterView$ZeroSides: io.flutter.view.FlutterView$ZeroSides BOTH
io.flutter.view.FlutterView$ZeroSides: io.flutter.view.FlutterView$ZeroSides[] $VALUES
io.flutter.view.FlutterView$ZeroSides: io.flutter.view.FlutterView$ZeroSides[] values()
io.flutter.view.FlutterView$ZeroSides: io.flutter.view.FlutterView$ZeroSides valueOf(java.lang.String)
io.flutter.view.FlutterView$ZeroSides: FlutterView$ZeroSides(java.lang.String,int)
io.flutter.view.FlutterView$ZeroSides: void <clinit>()
io.flutter.view.ResourceCleaner
io.flutter.view.ResourceCleaner: java.lang.String TAG
io.flutter.view.ResourceCleaner: long DELAY_MS
io.flutter.view.ResourceCleaner: android.content.Context mContext
io.flutter.view.ResourceCleaner: ResourceCleaner(android.content.Context)
io.flutter.view.ResourceCleaner: void start()
io.flutter.view.ResourceCleaner$1
io.flutter.view.ResourceCleaner$1: io.flutter.view.ResourceCleaner this$0
io.flutter.view.ResourceCleaner$1: ResourceCleaner$1(io.flutter.view.ResourceCleaner)
io.flutter.view.ResourceCleaner$1: boolean accept(java.io.File,java.lang.String)
io.flutter.view.ResourceCleaner$2
io.flutter.view.ResourceCleaner$2: io.flutter.view.ResourceCleaner$CleanTask val$task
io.flutter.view.ResourceCleaner$2: io.flutter.view.ResourceCleaner this$0
io.flutter.view.ResourceCleaner$2: ResourceCleaner$2(io.flutter.view.ResourceCleaner,io.flutter.view.ResourceCleaner$CleanTask)
io.flutter.view.ResourceCleaner$2: void run()
io.flutter.view.ResourceCleaner$CleanTask
io.flutter.view.ResourceCleaner$CleanTask: java.io.File[] mFilesToDelete
io.flutter.view.ResourceCleaner$CleanTask: io.flutter.view.ResourceCleaner this$0
io.flutter.view.ResourceCleaner$CleanTask: ResourceCleaner$CleanTask(io.flutter.view.ResourceCleaner,java.io.File[])
io.flutter.view.ResourceCleaner$CleanTask: boolean hasFilesToDelete()
io.flutter.view.ResourceCleaner$CleanTask: java.lang.Void doInBackground(java.lang.Void[])
io.flutter.view.ResourceCleaner$CleanTask: void deleteRecursively(java.io.File)
io.flutter.view.ResourceCleaner$CleanTask: java.lang.Object doInBackground(java.lang.Object[])
io.flutter.view.ResourceExtractor
io.flutter.view.ResourceExtractor: java.lang.String TAG
io.flutter.view.ResourceExtractor: java.lang.String TIMESTAMP_PREFIX
io.flutter.view.ResourceExtractor: java.lang.String[] SUPPORTED_ABIS
io.flutter.view.ResourceExtractor: android.content.Context mContext
io.flutter.view.ResourceExtractor: java.util.HashSet mResources
io.flutter.view.ResourceExtractor: io.flutter.view.ResourceExtractor$ExtractTask mExtractTask
io.flutter.view.ResourceExtractor: boolean $assertionsDisabled
io.flutter.view.ResourceExtractor: long getVersionCode(android.content.pm.PackageInfo)
io.flutter.view.ResourceExtractor: ResourceExtractor(android.content.Context)
io.flutter.view.ResourceExtractor: io.flutter.view.ResourceExtractor addResource(java.lang.String)
io.flutter.view.ResourceExtractor: io.flutter.view.ResourceExtractor addResources(java.util.Collection)
io.flutter.view.ResourceExtractor: io.flutter.view.ResourceExtractor start()
io.flutter.view.ResourceExtractor: void waitForCompletion()
io.flutter.view.ResourceExtractor: java.lang.String[] getExistingTimestamps(java.io.File)
io.flutter.view.ResourceExtractor: void deleteFiles()
io.flutter.view.ResourceExtractor: boolean extractAPK(java.io.File)
io.flutter.view.ResourceExtractor: boolean extractUpdate(java.io.File)
io.flutter.view.ResourceExtractor: java.lang.String checkTimestamp(java.io.File)
io.flutter.view.ResourceExtractor: void copy(java.io.InputStream,java.io.OutputStream)
io.flutter.view.ResourceExtractor: java.lang.String getAPKPath()
io.flutter.view.ResourceExtractor: java.lang.String[] getSupportedAbis()
io.flutter.view.ResourceExtractor: android.content.Context access$000(io.flutter.view.ResourceExtractor)
io.flutter.view.ResourceExtractor: java.lang.String access$100(io.flutter.view.ResourceExtractor,java.io.File)
io.flutter.view.ResourceExtractor: void access$200(io.flutter.view.ResourceExtractor)
io.flutter.view.ResourceExtractor: boolean access$300(io.flutter.view.ResourceExtractor,java.io.File)
io.flutter.view.ResourceExtractor: boolean access$400(io.flutter.view.ResourceExtractor,java.io.File)
io.flutter.view.ResourceExtractor: void <clinit>()
io.flutter.view.ResourceExtractor$1
io.flutter.view.ResourceExtractor$1: io.flutter.view.ResourceExtractor this$0
io.flutter.view.ResourceExtractor$1: ResourceExtractor$1(io.flutter.view.ResourceExtractor)
io.flutter.view.ResourceExtractor$1: boolean accept(java.io.File,java.lang.String)
io.flutter.view.ResourceExtractor$ExtractTask
io.flutter.view.ResourceExtractor$ExtractTask: io.flutter.view.ResourceExtractor this$0
io.flutter.view.ResourceExtractor$ExtractTask: ResourceExtractor$ExtractTask(io.flutter.view.ResourceExtractor)
io.flutter.view.ResourceExtractor$ExtractTask: java.lang.Void doInBackground(java.lang.Void[])
io.flutter.view.ResourceExtractor$ExtractTask: java.lang.Object doInBackground(java.lang.Object[])
io.flutter.view.ResourcePaths
io.flutter.view.ResourcePaths: java.lang.String TEMPORARY_RESOURCE_PREFIX
io.flutter.view.ResourcePaths: ResourcePaths()
io.flutter.view.ResourcePaths: java.io.File createTempFile(android.content.Context,java.lang.String)
io.flutter.view.ResourceUpdater
io.flutter.view.ResourceUpdater: java.lang.String TAG
io.flutter.view.ResourceUpdater: int BUFFER_SIZE
io.flutter.view.ResourceUpdater: android.content.Context context
io.flutter.view.ResourceUpdater: io.flutter.view.ResourceUpdater$DownloadTask downloadTask
io.flutter.view.ResourceUpdater: java.util.concurrent.locks.Lock installationLock
io.flutter.view.ResourceUpdater: java.util.concurrent.locks.Lock getInstallationLock()
io.flutter.view.ResourceUpdater: java.io.File getInstalledPatch()
io.flutter.view.ResourceUpdater: java.io.File getDownloadedPatch()
io.flutter.view.ResourceUpdater: ResourceUpdater(android.content.Context)
io.flutter.view.ResourceUpdater: java.lang.String getAPKVersion()
io.flutter.view.ResourceUpdater: java.lang.String buildUpdateDownloadURL()
io.flutter.view.ResourceUpdater: io.flutter.view.ResourceUpdater$DownloadMode getDownloadMode()
io.flutter.view.ResourceUpdater: io.flutter.view.ResourceUpdater$InstallMode getInstallMode()
io.flutter.view.ResourceUpdater: org.json.JSONObject readManifest(java.io.File)
io.flutter.view.ResourceUpdater: boolean validateManifest(org.json.JSONObject)
io.flutter.view.ResourceUpdater: void startUpdateDownloadOnce()
io.flutter.view.ResourceUpdater: void waitForDownloadCompletion()
io.flutter.view.ResourceUpdater: java.lang.String access$000(io.flutter.view.ResourceUpdater)
io.flutter.view.ResourceUpdater: java.util.concurrent.locks.Lock access$100(io.flutter.view.ResourceUpdater)
io.flutter.view.ResourceUpdater$1
io.flutter.view.ResourceUpdater$DownloadMode
io.flutter.view.ResourceUpdater$DownloadMode: io.flutter.view.ResourceUpdater$DownloadMode ON_RESTART
io.flutter.view.ResourceUpdater$DownloadMode: io.flutter.view.ResourceUpdater$DownloadMode ON_RESUME
io.flutter.view.ResourceUpdater$DownloadMode: io.flutter.view.ResourceUpdater$DownloadMode[] $VALUES
io.flutter.view.ResourceUpdater$DownloadMode: io.flutter.view.ResourceUpdater$DownloadMode[] values()
io.flutter.view.ResourceUpdater$DownloadMode: io.flutter.view.ResourceUpdater$DownloadMode valueOf(java.lang.String)
io.flutter.view.ResourceUpdater$DownloadMode: ResourceUpdater$DownloadMode(java.lang.String,int)
io.flutter.view.ResourceUpdater$DownloadMode: void <clinit>()
io.flutter.view.ResourceUpdater$DownloadTask
io.flutter.view.ResourceUpdater$DownloadTask: io.flutter.view.ResourceUpdater this$0
io.flutter.view.ResourceUpdater$DownloadTask: ResourceUpdater$DownloadTask(io.flutter.view.ResourceUpdater)
io.flutter.view.ResourceUpdater$DownloadTask: java.lang.Void doInBackground(java.lang.String[])
io.flutter.view.ResourceUpdater$DownloadTask: java.lang.Object doInBackground(java.lang.Object[])
io.flutter.view.ResourceUpdater$DownloadTask: ResourceUpdater$DownloadTask(io.flutter.view.ResourceUpdater,io.flutter.view.ResourceUpdater$1)
io.flutter.view.ResourceUpdater$InstallMode
io.flutter.view.ResourceUpdater$InstallMode: io.flutter.view.ResourceUpdater$InstallMode ON_NEXT_RESTART
io.flutter.view.ResourceUpdater$InstallMode: io.flutter.view.ResourceUpdater$InstallMode IMMEDIATE
io.flutter.view.ResourceUpdater$InstallMode: io.flutter.view.ResourceUpdater$InstallMode[] $VALUES
io.flutter.view.ResourceUpdater$InstallMode: io.flutter.view.ResourceUpdater$InstallMode[] values()
io.flutter.view.ResourceUpdater$InstallMode: io.flutter.view.ResourceUpdater$InstallMode valueOf(java.lang.String)
io.flutter.view.ResourceUpdater$InstallMode: ResourceUpdater$InstallMode(java.lang.String,int)
io.flutter.view.ResourceUpdater$InstallMode: void <clinit>()
io.flutter.view.TextureRegistry
io.flutter.view.TextureRegistry: io.flutter.view.TextureRegistry$SurfaceTextureEntry createSurfaceTexture()
io.flutter.view.TextureRegistry$SurfaceTextureEntry
io.flutter.view.TextureRegistry$SurfaceTextureEntry: android.graphics.SurfaceTexture surfaceTexture()
io.flutter.view.TextureRegistry$SurfaceTextureEntry: long id()
io.flutter.view.TextureRegistry$SurfaceTextureEntry: void release()
io.flutter.view.VsyncWaiter
io.flutter.view.VsyncWaiter: long refreshPeriodNanos
io.flutter.view.VsyncWaiter: float refreshRateFPS
io.flutter.view.VsyncWaiter: VsyncWaiter()
io.flutter.view.VsyncWaiter: void asyncWaitForVsync(long)
io.flutter.view.VsyncWaiter: void nativeOnVsync(long,long,long)
io.flutter.view.VsyncWaiter: void access$000(long,long,long)
io.flutter.view.VsyncWaiter: void <clinit>()
io.flutter.view.VsyncWaiter$1
io.flutter.view.VsyncWaiter$1: long val$cookie
io.flutter.view.VsyncWaiter$1: VsyncWaiter$1(long)
io.flutter.view.VsyncWaiter$1: void doFrame(long)
